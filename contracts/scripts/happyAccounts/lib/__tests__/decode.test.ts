import type { Hex } from "viem"
import { describe, test } from "vitest"

import type { HappyTx } from "../../types/happyTx"
import { assertHappyTxEqual } from "./utils"
import { decode } from "../happyTxLib"

// Test cases for decoding
describe("decode", () => {
    test("should correctly decode tx with empty dynamic data", () => {
        const encoded: Hex = "0x123456789012345678901234567890123456789023456789012345678901234534567890123456789012345678901234567890126789012345678901000f42400000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000005f5e10000000000000000060000000002000000000200000000020000000000000c3500123456789abc"
        const expected: HappyTx = {
            account: "0x1234567890123456789012345678901234567890",
            gasLimit: 1000000n,
            executeGasLimit: 800000n,
            dest: "0x2345678901234567890123456789012345678901",
            paymaster: "0x3456789012345678901234567890123456789012",
            value: 1000000000000000000n,
            nonce: 1n,
            maxFeePerGas: 2000000000n,
            submitterFee: 100000000n,
            callData: "0x1234",
            paymasterData: "0x5678",
            validatorData: "0x9abc",
            extraData: "0x",
        }

        const decoded = decode(encoded)
        assertHappyTxEqual(decoded, expected);
    })

    test("should correctly decode tx with only extraData empty", () => {
        const encoded: Hex = "0x123456789012345678901234567890123456789023456789012345678901234534567890123456789012345678901234567890126789012345678901000f42400000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000005f5e10000000000000000080000000002000000000200000000020000000002000c3500123456789abcdef0"
        const expected: HappyTx = {
            account: "0x1234567890123456789012345678901234567890",
            gasLimit: 1000000n,
            executeGasLimit: 800000n,
            dest: "0x2345678901234567890123456789012345678901",
            paymaster: "0x3456789012345678901234567890123456789012",
            value: 1000000000000000000n,
            nonce: 1n,
            maxFeePerGas: 2000000000n,
            submitterFee: 100000000n,
            callData: "0x1234",
            paymasterData: "0x5678",
            validatorData: "0x9abc",
            extraData: "0xdef0",
        }

        const decoded = decode(encoded)
        assertHappyTxEqual(decoded, expected);
    })

    test("should correctly decode tx with all fields", () => {
        const encoded: Hex = "0x123456789012345678901234567890123456789023456789012345678901234534567890123456789012345678901234567890126789012345678901000f42400000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000005f5e10000000000000000080000000002000000000200000000020000000002000c3500123456789abcdef0"
        const expected: HappyTx = {
            account: "0x1234567890123456789012345678901234567890",
            gasLimit: 1000000n,
            executeGasLimit: 800000n,
            dest: "0x2345678901234567890123456789012345678901",
            paymaster: "0x3456789012345678901234567890123456789012",
            value: 1000000000000000000n,
            nonce: 1n,
            maxFeePerGas: 2000000000n,
            submitterFee: 100000000n,
            callData: "0x1234",
            paymasterData: "0x5678",
            validatorData: "0x9abc",
            extraData: "0xdef0"
        }

        const decoded = decode(encoded)
        assertHappyTxEqual(decoded, expected);
    })
})