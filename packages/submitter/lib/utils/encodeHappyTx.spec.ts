import { describe, expect, test } from "bun:test"
import type { Hex } from "viem"
import type { HappyTx } from "#lib/tmp/interface/HappyTx"
import { encodeHappyTx } from "./encodeHappyTx"

describe("encode", () => {
    test("should correctly encode tx with empty dynamic data", () => {
        const tx: HappyTx = {
            account: "0x1234567890123456789012345678901234567890",
            gasLimit: 1000000n,
            validateGasLimit: 600000n,
            executeGasLimit: 700000n,
            validatePaymentGasLimit: 800000n,
            dest: "0x2345678901234567890123456789012345678901",
            paymaster: "0x3456789012345678901234567890123456789012",
            value: 1000000000000000000n, // 1 ETH (10^19 in wei)
            nonceTrack: 1234n,
            nonceValue: 5678n,
            maxFeePerGas: 2000000000n, // (2 * 10^9) wei
            submitterFee: 100000000n, // (10^8) wei
            callData: "0x",
            paymasterData: "0x",
            validatorData: "0x",
            extraData: "0x",
        }

        const expected: Hex =
            "0x1234567890123456789012345678901234567890000f4240000927c0000aae60000c3500234567890123456789012345678901234567890134567890123456789012345678901234567890120000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000004d2000000000000162e00000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000"
        const encoded = encodeHappyTx(tx)
        expect(encoded).toBe(expected)
    })

    test("should correctly encode tx with all fields", () => {
        const tx: HappyTx = {
            account: "0x1234567890123456789012345678901234567890",
            gasLimit: 1000000n,
            validateGasLimit: 600000n,
            executeGasLimit: 700000n,
            validatePaymentGasLimit: 800000n,
            dest: "0x2345678901234567890123456789012345678901",
            paymaster: "0x3456789012345678901234567890123456789012",
            value: 1000000000000000000n, // 1 ETH (10^19 in wei)
            nonceTrack: 1234n,
            nonceValue: 5678n,
            maxFeePerGas: 2000000000n, // (2 * 10^9) wei
            submitterFee: 100000000n, // (10^8) wei
            callData: "0x1234",
            paymasterData: "0x5678",
            validatorData: "0x9abc",
            extraData: "0xdef0",
        }

        const expected: Hex =
            "0x1234567890123456789012345678901234567890000f4240000927c0000aae60000c3500234567890123456789012345678901234567890134567890123456789012345678901234567890120000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000004d2000000000000162e00000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000005f5e100000000021234000000025678000000029abc00000002def0"
        const encoded = encodeHappyTx(tx)
        expect(encoded).toBe(expected)
    })

    test("should correctly encode tx with big dynamic fields", () => {
        const tx: HappyTx = {
            account: "0x1234567890123456789012345678901234567890",
            gasLimit: 1000000n,
            validateGasLimit: 600000n,
            executeGasLimit: 700000n,
            validatePaymentGasLimit: 800000n,
            dest: "0x2345678901234567890123456789012345678901",
            paymaster: "0x3456789012345678901234567890123456789012",
            value: 1000000000000000000n, // 1 ETH (10^19 in wei)
            nonceTrack: 1234n,
            nonceValue: 5678n,
            maxFeePerGas: 2000000000n, // (2 * 10^9) wei
            submitterFee: 100000000n, // (10^8) wei
            callData:
                "0x40c10f190000000000000000000000004bc8e81ad3be83276837f184138fc96770c1429700000000000000000000000000000000000000000000000000038d7ea4c68000",
            paymasterData:
                "0x789078907890789078907890789078907890789078907890789078907890789078907890789078907890789078907890",
            validatorData:
                "0x827a29d9e7e5e37adc8ae5ead7993f7d354da82a35a05da3fef21d133e22082f376916126bfece3e226c3a9bfb55354783deb43b58989d0a29ec53b4f36560cc1b",
            extraData: "0xdef0def0def0def0def0def0def0def0def0def0def0def0def0def0def0def0def0",
        }

        const expected: Hex =
            "0x1234567890123456789012345678901234567890000f4240000927c0000aae60000c3500234567890123456789012345678901234567890134567890123456789012345678901234567890120000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000004d2000000000000162e00000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000005f5e1000000004440c10f190000000000000000000000004bc8e81ad3be83276837f184138fc96770c1429700000000000000000000000000000000000000000000000000038d7ea4c680000000003078907890789078907890789078907890789078907890789078907890789078907890789078907890789078907890789000000041827a29d9e7e5e37adc8ae5ead7993f7d354da82a35a05da3fef21d133e22082f376916126bfece3e226c3a9bfb55354783deb43b58989d0a29ec53b4f36560cc1b00000022def0def0def0def0def0def0def0def0def0def0def0def0def0def0def0def0def0"
        const encoded = encodeHappyTx(tx)
        expect(encoded).toBe(expected)
    })
})
