/**
 * Shared data types definition, compatible with Viem, but cutting our dependence on it for
 * package exports. This also solve issues with Viem's new fancy `Address` definition that
 * uses fancy type-level register, which makes for a poor docs experience and makes api-extractor
 * complain.
 */

import type { Address, Hash, Hex } from "@happy.tech/common"

/**
 * Type of EVM logs.
 */
export type Log = {
    // This is a simplification of the equivalent Viem type, with the following change:
    // - hardcode `index` and `quantity` type params to `number` and `bigint` (defaults)
    // - remove ABI inference for log topics

    /** The address from which this log originated */
    address: Address

    /** Hash of block containing this log or `null` if pending */
    blockHash: Hash

    /** Number of block containing this log or `null` if pending */
    blockNumber: bigint

    /** List of order-dependent topics â€” weird type formulation for compat with Viem type. */
    topics: [] | [Hex] | [Hex, ...Hex[]]

    /** Contains the non-indexed arguments of the log */
    data: Hex

    /** Index of this log within its block or `null` if pending */
    logIndex: number

    /** Hash of the transaction that created this log or `null` if pending */
    transactionHash: Hash

    /** Index of the transaction that created this log or `null` if pending */
    transactionIndex: number

    /** Whether this log has been removed from the chain (only for filters, included for compat with Viem type) */
    removed: boolean
}

/** Possible EVM transaction types. */
export enum TransactionTypeName {
    LEGACY = "legacy",
    EIP1559 = "eip1559",
    EIP2930 = "eip2930",
    EIP4844 = "eip4844",
    EIP7702 = "eip7702",
}

/**
 * Type of EVM transaction receipts.
 */
export type Receipt = {
    // This is a simplification of the equivalent Viem `TransactionReceipt` type, with the following change:
    // - hardcode all type params to their default values
    // - use {@link TransactionType} enum for transaction types
    // - remove undefined case for contractAddress

    /**
     * The actual value per gas deducted from the sender's account for blob gas. Only specified for
     * blob transactions as defined by EIP-4844.
     */
    blobGasPrice?: bigint | undefined

    /** The amount of blob gas used. Only specified for blob transactions as defined by EIP-4844. */
    blobGasUsed?: bigint | undefined

    /** Hash of block containing this transaction */
    blockHash: Hash

    /** Number of block containing this transaction */
    blockNumber: bigint

    /** Address of new contract or `null` if no contract was created */
    contractAddress: Address | null

    /** Gas used by this and all preceding transactions in this block */
    cumulativeGasUsed: bigint

    /**
     * Pre-London, it is equal to the transaction's gasPrice. Post-London, it is equal to the actual
     * gas price paid for inclusion.
     */
    effectiveGasPrice: bigint

    /** Transaction sender */
    from: Address

    /** Gas used by this transaction */
    gasUsed: bigint

    /** List of log objects generated by this transaction */
    logs: Log[]

    /** Logs bloom filter */
    logsBloom: Hex

    /** The post-transaction state root. Only specified for transactions included before the Byzantium upgrade. */
    root?: Hash | undefined

    /** `success` if this transaction was successful or `reverted` if it failed */
    status: "success" | "reverted"

    /** Transaction recipient or `null` if deploying a contract */
    to: Address | null

    /** Hash of this transaction */
    transactionHash: Hash

    /** number of this transaction in the block */
    transactionIndex: number

    /** Transaction type */
    type: TransactionTypeName
}
