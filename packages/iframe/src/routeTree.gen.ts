/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RequestImport } from './routes/request'

// Create Virtual Routes

const EmbedLazyImport = createFileRoute('/embed')()
const IndexLazyImport = createFileRoute('/')()
const EmbedIndexLazyImport = createFileRoute('/embed/')()
const EmbedSendLazyImport = createFileRoute('/embed/send')()

// Create/Update Routes

const EmbedLazyRoute = EmbedLazyImport.update({
  path: '/embed',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/embed.lazy').then((d) => d.Route))

const RequestRoute = RequestImport.update({
  path: '/request',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/request.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const EmbedIndexLazyRoute = EmbedIndexLazyImport.update({
  path: '/',
  getParentRoute: () => EmbedLazyRoute,
} as any).lazy(() => import('./routes/embed/index.lazy').then((d) => d.Route))

const EmbedSendLazyRoute = EmbedSendLazyImport.update({
  path: '/send',
  getParentRoute: () => EmbedLazyRoute,
} as any).lazy(() => import('./routes/embed/send.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/request': {
      id: '/request'
      path: '/request'
      fullPath: '/request'
      preLoaderRoute: typeof RequestImport
      parentRoute: typeof rootRoute
    }
    '/embed': {
      id: '/embed'
      path: '/embed'
      fullPath: '/embed'
      preLoaderRoute: typeof EmbedLazyImport
      parentRoute: typeof rootRoute
    }
    '/embed/send': {
      id: '/embed/send'
      path: '/send'
      fullPath: '/embed/send'
      preLoaderRoute: typeof EmbedSendLazyImport
      parentRoute: typeof EmbedLazyImport
    }
    '/embed/': {
      id: '/embed/'
      path: '/'
      fullPath: '/embed/'
      preLoaderRoute: typeof EmbedIndexLazyImport
      parentRoute: typeof EmbedLazyImport
    }
  }
}

// Create and export the route tree

interface EmbedLazyRouteChildren {
  EmbedSendLazyRoute: typeof EmbedSendLazyRoute
  EmbedIndexLazyRoute: typeof EmbedIndexLazyRoute
}

const EmbedLazyRouteChildren: EmbedLazyRouteChildren = {
  EmbedSendLazyRoute: EmbedSendLazyRoute,
  EmbedIndexLazyRoute: EmbedIndexLazyRoute,
}

const EmbedLazyRouteWithChildren = EmbedLazyRoute._addFileChildren(
  EmbedLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/request': typeof RequestRoute
  '/embed': typeof EmbedLazyRouteWithChildren
  '/embed/send': typeof EmbedSendLazyRoute
  '/embed/': typeof EmbedIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/request': typeof RequestRoute
  '/embed/send': typeof EmbedSendLazyRoute
  '/embed': typeof EmbedIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/request': typeof RequestRoute
  '/embed': typeof EmbedLazyRouteWithChildren
  '/embed/send': typeof EmbedSendLazyRoute
  '/embed/': typeof EmbedIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/request' | '/embed' | '/embed/send' | '/embed/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/request' | '/embed/send' | '/embed'
  id: '__root__' | '/' | '/request' | '/embed' | '/embed/send' | '/embed/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  RequestRoute: typeof RequestRoute
  EmbedLazyRoute: typeof EmbedLazyRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  RequestRoute: RequestRoute,
  EmbedLazyRoute: EmbedLazyRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/request",
        "/embed"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/request": {
      "filePath": "request.tsx"
    },
    "/embed": {
      "filePath": "embed.lazy.tsx",
      "children": [
        "/embed/send",
        "/embed/"
      ]
    },
    "/embed/send": {
      "filePath": "embed/send.lazy.tsx",
      "parent": "/embed"
    },
    "/embed/": {
      "filePath": "embed/index.lazy.tsx",
      "parent": "/embed"
    }
  }
}
ROUTE_MANIFEST_END */
