schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Collection {
  id: Bytes!
  type: NftType!
  vaultCollections(skip: Int = 0, first: Int = 100, orderBy: VaultCollection_orderBy, orderDirection: OrderDirection, where: VaultCollection_filter): [VaultCollection!]!
}

input Collection_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  type: NftType
  type_not: NftType
  type_in: [NftType!]
  type_not_in: [NftType!]
  vaultCollections_: VaultCollection_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Collection_filter]
  or: [Collection_filter]
}

enum Collection_orderBy {
  id
  type
  vaultCollections
}

type DayData {
  id: Bytes!
  date: BigInt!
  reserveUSD: BigDecimal!
  reserveNFT: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!
}

input DayData_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  reserveUSD: BigDecimal
  reserveUSD_not: BigDecimal
  reserveUSD_gt: BigDecimal
  reserveUSD_lt: BigDecimal
  reserveUSD_gte: BigDecimal
  reserveUSD_lte: BigDecimal
  reserveUSD_in: [BigDecimal!]
  reserveUSD_not_in: [BigDecimal!]
  reserveNFT: BigDecimal
  reserveNFT_not: BigDecimal
  reserveNFT_gt: BigDecimal
  reserveNFT_lt: BigDecimal
  reserveNFT_gte: BigDecimal
  reserveNFT_lte: BigDecimal
  reserveNFT_in: [BigDecimal!]
  reserveNFT_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DayData_filter]
  or: [DayData_filter]
}

enum DayData_orderBy {
  id
  date
  reserveUSD
  reserveNFT
  volumeUSD
  txCount
}

type Factory {
  id: Bytes!
  pairCount: BigInt!
  volumeUSD: BigDecimal!
  reserveNFT: BigDecimal!
  reserveUSD: BigDecimal!
  txCount: BigInt!
  userCount: BigInt!
  magicUSD: BigDecimal!
  lpFee: BigDecimal!
  protocolFee: BigDecimal!
  protocolFeeBeneficiary: Bytes
}

input Factory_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  reserveNFT: BigDecimal
  reserveNFT_not: BigDecimal
  reserveNFT_gt: BigDecimal
  reserveNFT_lt: BigDecimal
  reserveNFT_gte: BigDecimal
  reserveNFT_lte: BigDecimal
  reserveNFT_in: [BigDecimal!]
  reserveNFT_not_in: [BigDecimal!]
  reserveUSD: BigDecimal
  reserveUSD_not: BigDecimal
  reserveUSD_gt: BigDecimal
  reserveUSD_lt: BigDecimal
  reserveUSD_gte: BigDecimal
  reserveUSD_lte: BigDecimal
  reserveUSD_in: [BigDecimal!]
  reserveUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  magicUSD: BigDecimal
  magicUSD_not: BigDecimal
  magicUSD_gt: BigDecimal
  magicUSD_lt: BigDecimal
  magicUSD_gte: BigDecimal
  magicUSD_lte: BigDecimal
  magicUSD_in: [BigDecimal!]
  magicUSD_not_in: [BigDecimal!]
  lpFee: BigDecimal
  lpFee_not: BigDecimal
  lpFee_gt: BigDecimal
  lpFee_lt: BigDecimal
  lpFee_gte: BigDecimal
  lpFee_lte: BigDecimal
  lpFee_in: [BigDecimal!]
  lpFee_not_in: [BigDecimal!]
  protocolFee: BigDecimal
  protocolFee_not: BigDecimal
  protocolFee_gt: BigDecimal
  protocolFee_lt: BigDecimal
  protocolFee_gte: BigDecimal
  protocolFee_lte: BigDecimal
  protocolFee_in: [BigDecimal!]
  protocolFee_not_in: [BigDecimal!]
  protocolFeeBeneficiary: Bytes
  protocolFeeBeneficiary_not: Bytes
  protocolFeeBeneficiary_gt: Bytes
  protocolFeeBeneficiary_lt: Bytes
  protocolFeeBeneficiary_gte: Bytes
  protocolFeeBeneficiary_lte: Bytes
  protocolFeeBeneficiary_in: [Bytes!]
  protocolFeeBeneficiary_not_in: [Bytes!]
  protocolFeeBeneficiary_contains: Bytes
  protocolFeeBeneficiary_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Factory_filter]
  or: [Factory_filter]
}

enum Factory_orderBy {
  id
  pairCount
  volumeUSD
  reserveNFT
  reserveUSD
  txCount
  userCount
  magicUSD
  lpFee
  protocolFee
  protocolFeeBeneficiary
}

"""
8 bytes signed integer

"""
scalar Int8

type LiquidityPosition {
  id: Bytes!
  pair: Pair!
  user: User!
  balance: BigInt!
}

input LiquidityPosition_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidityPosition_filter]
  or: [LiquidityPosition_filter]
}

enum LiquidityPosition_orderBy {
  id
  pair
  pair__id
  pair__reserve0
  pair__reserve1
  pair__reserveUSD
  pair__totalSupply
  pair__volume0
  pair__volume1
  pair__volumeUSD
  pair__txCount
  pair__lpFee
  pair__protocolFee
  pair__royaltiesFee
  pair__royaltiesBeneficiary
  pair__totalFee
  user
  user__id
  user__liquidityPositionCount
  balance
}

enum NftType {
  ERC721
  ERC1155
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Pair {
  id: Bytes!
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  reserveUSD: BigDecimal!
  totalSupply: BigInt!
  volume0: BigDecimal!
  volume1: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!
  lpFee: BigDecimal!
  protocolFee: BigDecimal!
  royaltiesFee: BigDecimal!
  royaltiesBeneficiary: Bytes
  totalFee: BigDecimal!
  transactions(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: LiquidityPosition_orderBy, orderDirection: OrderDirection, where: LiquidityPosition_filter): [LiquidityPosition!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: PairDayData_orderBy, orderDirection: OrderDirection, where: PairDayData_filter): [PairDayData!]!
}

type PairDayData {
  id: Bytes!
  pair: Pair!
  date: BigInt!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  reserveUSD: BigDecimal!
  totalSupply: BigInt!
  volume0: BigDecimal!
  volume1: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!
}

input PairDayData_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  reserve0: BigDecimal
  reserve0_not: BigDecimal
  reserve0_gt: BigDecimal
  reserve0_lt: BigDecimal
  reserve0_gte: BigDecimal
  reserve0_lte: BigDecimal
  reserve0_in: [BigDecimal!]
  reserve0_not_in: [BigDecimal!]
  reserve1: BigDecimal
  reserve1_not: BigDecimal
  reserve1_gt: BigDecimal
  reserve1_lt: BigDecimal
  reserve1_gte: BigDecimal
  reserve1_lte: BigDecimal
  reserve1_in: [BigDecimal!]
  reserve1_not_in: [BigDecimal!]
  reserveUSD: BigDecimal
  reserveUSD_not: BigDecimal
  reserveUSD_gt: BigDecimal
  reserveUSD_lt: BigDecimal
  reserveUSD_gte: BigDecimal
  reserveUSD_lte: BigDecimal
  reserveUSD_in: [BigDecimal!]
  reserveUSD_not_in: [BigDecimal!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume0: BigDecimal
  volume0_not: BigDecimal
  volume0_gt: BigDecimal
  volume0_lt: BigDecimal
  volume0_gte: BigDecimal
  volume0_lte: BigDecimal
  volume0_in: [BigDecimal!]
  volume0_not_in: [BigDecimal!]
  volume1: BigDecimal
  volume1_not: BigDecimal
  volume1_gt: BigDecimal
  volume1_lt: BigDecimal
  volume1_gte: BigDecimal
  volume1_lte: BigDecimal
  volume1_in: [BigDecimal!]
  volume1_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PairDayData_filter]
  or: [PairDayData_filter]
}

enum PairDayData_orderBy {
  id
  pair
  pair__id
  pair__reserve0
  pair__reserve1
  pair__reserveUSD
  pair__totalSupply
  pair__volume0
  pair__volume1
  pair__volumeUSD
  pair__txCount
  pair__lpFee
  pair__protocolFee
  pair__royaltiesFee
  pair__royaltiesBeneficiary
  pair__totalFee
  date
  reserve0
  reserve1
  reserveUSD
  totalSupply
  volume0
  volume1
  volumeUSD
  txCount
}

input Pair_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  reserve0: BigDecimal
  reserve0_not: BigDecimal
  reserve0_gt: BigDecimal
  reserve0_lt: BigDecimal
  reserve0_gte: BigDecimal
  reserve0_lte: BigDecimal
  reserve0_in: [BigDecimal!]
  reserve0_not_in: [BigDecimal!]
  reserve1: BigDecimal
  reserve1_not: BigDecimal
  reserve1_gt: BigDecimal
  reserve1_lt: BigDecimal
  reserve1_gte: BigDecimal
  reserve1_lte: BigDecimal
  reserve1_in: [BigDecimal!]
  reserve1_not_in: [BigDecimal!]
  reserveUSD: BigDecimal
  reserveUSD_not: BigDecimal
  reserveUSD_gt: BigDecimal
  reserveUSD_lt: BigDecimal
  reserveUSD_gte: BigDecimal
  reserveUSD_lte: BigDecimal
  reserveUSD_in: [BigDecimal!]
  reserveUSD_not_in: [BigDecimal!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume0: BigDecimal
  volume0_not: BigDecimal
  volume0_gt: BigDecimal
  volume0_lt: BigDecimal
  volume0_gte: BigDecimal
  volume0_lte: BigDecimal
  volume0_in: [BigDecimal!]
  volume0_not_in: [BigDecimal!]
  volume1: BigDecimal
  volume1_not: BigDecimal
  volume1_gt: BigDecimal
  volume1_lt: BigDecimal
  volume1_gte: BigDecimal
  volume1_lte: BigDecimal
  volume1_in: [BigDecimal!]
  volume1_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  lpFee: BigDecimal
  lpFee_not: BigDecimal
  lpFee_gt: BigDecimal
  lpFee_lt: BigDecimal
  lpFee_gte: BigDecimal
  lpFee_lte: BigDecimal
  lpFee_in: [BigDecimal!]
  lpFee_not_in: [BigDecimal!]
  protocolFee: BigDecimal
  protocolFee_not: BigDecimal
  protocolFee_gt: BigDecimal
  protocolFee_lt: BigDecimal
  protocolFee_gte: BigDecimal
  protocolFee_lte: BigDecimal
  protocolFee_in: [BigDecimal!]
  protocolFee_not_in: [BigDecimal!]
  royaltiesFee: BigDecimal
  royaltiesFee_not: BigDecimal
  royaltiesFee_gt: BigDecimal
  royaltiesFee_lt: BigDecimal
  royaltiesFee_gte: BigDecimal
  royaltiesFee_lte: BigDecimal
  royaltiesFee_in: [BigDecimal!]
  royaltiesFee_not_in: [BigDecimal!]
  royaltiesBeneficiary: Bytes
  royaltiesBeneficiary_not: Bytes
  royaltiesBeneficiary_gt: Bytes
  royaltiesBeneficiary_lt: Bytes
  royaltiesBeneficiary_gte: Bytes
  royaltiesBeneficiary_lte: Bytes
  royaltiesBeneficiary_in: [Bytes!]
  royaltiesBeneficiary_not_in: [Bytes!]
  royaltiesBeneficiary_contains: Bytes
  royaltiesBeneficiary_not_contains: Bytes
  totalFee: BigDecimal
  totalFee_not: BigDecimal
  totalFee_gt: BigDecimal
  totalFee_lt: BigDecimal
  totalFee_gte: BigDecimal
  totalFee_lte: BigDecimal
  totalFee_in: [BigDecimal!]
  totalFee_not_in: [BigDecimal!]
  transactions_: Transaction_filter
  liquidityPositions_: LiquidityPosition_filter
  dayData_: PairDayData_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pair_filter]
  or: [Pair_filter]
}

enum Pair_orderBy {
  id
  token0
  token0__id
  token0__name
  token0__symbol
  token0__totalSupply
  token0__decimals
  token0__decimalDivisor
  token0__isNFT
  token0__isMAGIC
  token0__isETH
  token0__volume
  token0__volumeUSD
  token0__txCount
  token0__derivedMAGIC
  token1
  token1__id
  token1__name
  token1__symbol
  token1__totalSupply
  token1__decimals
  token1__decimalDivisor
  token1__isNFT
  token1__isMAGIC
  token1__isETH
  token1__volume
  token1__volumeUSD
  token1__txCount
  token1__derivedMAGIC
  reserve0
  reserve1
  reserveUSD
  totalSupply
  volume0
  volume1
  volumeUSD
  txCount
  lpFee
  protocolFee
  royaltiesFee
  royaltiesBeneficiary
  totalFee
  transactions
  liquidityPositions
  dayData
}

type Query {
  factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Factory
  factories(
    skip: Int = 0
    first: Int = 100
    orderBy: Factory_orderBy
    orderDirection: OrderDirection
    where: Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Factory!]!
  dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DayData
  dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: DayData_orderBy
    orderDirection: OrderDirection
    where: DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DayData!]!
  collection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Collection
  collections(
    skip: Int = 0
    first: Int = 100
    orderBy: Collection_orderBy
    orderDirection: OrderDirection
    where: Collection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Collection!]!
  vaultCollection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultCollection
  vaultCollections(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultCollection_orderBy
    orderDirection: OrderDirection
    where: VaultCollection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultCollection!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  vaultReserveItem(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultReserveItem
  vaultReserveItems(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultReserveItem_orderBy
    orderDirection: OrderDirection
    where: VaultReserveItem_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultReserveItem!]!
  pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pair
  pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: Pair_orderBy
    orderDirection: OrderDirection
    where: Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pair!]!
  pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairDayData
  pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PairDayData_orderBy
    orderDirection: OrderDirection
    where: PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairDayData!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPosition
  liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPosition_orderBy
    orderDirection: OrderDirection
    where: LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPosition!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  transactionItem(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransactionItem
  transactionItems(
    skip: Int = 0
    first: Int = 100
    orderBy: TransactionItem_orderBy
    orderDirection: OrderDirection
    where: TransactionItem_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TransactionItem!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Factory
  factories(
    skip: Int = 0
    first: Int = 100
    orderBy: Factory_orderBy
    orderDirection: OrderDirection
    where: Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Factory!]!
  dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DayData
  dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: DayData_orderBy
    orderDirection: OrderDirection
    where: DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DayData!]!
  collection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Collection
  collections(
    skip: Int = 0
    first: Int = 100
    orderBy: Collection_orderBy
    orderDirection: OrderDirection
    where: Collection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Collection!]!
  vaultCollection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultCollection
  vaultCollections(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultCollection_orderBy
    orderDirection: OrderDirection
    where: VaultCollection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultCollection!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  vaultReserveItem(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultReserveItem
  vaultReserveItems(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultReserveItem_orderBy
    orderDirection: OrderDirection
    where: VaultReserveItem_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultReserveItem!]!
  pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pair
  pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: Pair_orderBy
    orderDirection: OrderDirection
    where: Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pair!]!
  pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairDayData
  pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PairDayData_orderBy
    orderDirection: OrderDirection
    where: PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairDayData!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPosition
  liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPosition_orderBy
    orderDirection: OrderDirection
    where: LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPosition!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  transactionItem(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransactionItem
  transactionItems(
    skip: Int = 0
    first: Int = 100
    orderBy: TransactionItem_orderBy
    orderDirection: OrderDirection
    where: TransactionItem_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TransactionItem!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Token {
  id: Bytes!
  name: String!
  symbol: String!
  totalSupply: BigInt!
  decimals: BigInt!
  decimalDivisor: BigDecimal!
  isNFT: Boolean!
  isMAGIC: Boolean!
  isETH: Boolean!
  vaultCollections(skip: Int = 0, first: Int = 100, orderBy: VaultCollection_orderBy, orderDirection: OrderDirection, where: VaultCollection_filter): [VaultCollection!]!
  vaultReserveItems(skip: Int = 0, first: Int = 100, orderBy: VaultReserveItem_orderBy, orderDirection: OrderDirection, where: VaultReserveItem_filter): [VaultReserveItem!]!
  magicPairs(skip: Int = 0, first: Int = 100, orderBy: Pair_orderBy, orderDirection: OrderDirection, where: Pair_filter): [Pair!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: Pair_orderBy, orderDirection: OrderDirection, where: Pair_filter): [Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: Pair_orderBy, orderDirection: OrderDirection, where: Pair_filter): [Pair!]!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!
  derivedMAGIC: BigDecimal!
}

input Token_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  decimalDivisor: BigDecimal
  decimalDivisor_not: BigDecimal
  decimalDivisor_gt: BigDecimal
  decimalDivisor_lt: BigDecimal
  decimalDivisor_gte: BigDecimal
  decimalDivisor_lte: BigDecimal
  decimalDivisor_in: [BigDecimal!]
  decimalDivisor_not_in: [BigDecimal!]
  isNFT: Boolean
  isNFT_not: Boolean
  isNFT_in: [Boolean!]
  isNFT_not_in: [Boolean!]
  isMAGIC: Boolean
  isMAGIC_not: Boolean
  isMAGIC_in: [Boolean!]
  isMAGIC_not_in: [Boolean!]
  isETH: Boolean
  isETH_not: Boolean
  isETH_in: [Boolean!]
  isETH_not_in: [Boolean!]
  vaultCollections_: VaultCollection_filter
  vaultReserveItems_: VaultReserveItem_filter
  magicPairs: [String!]
  magicPairs_not: [String!]
  magicPairs_contains: [String!]
  magicPairs_contains_nocase: [String!]
  magicPairs_not_contains: [String!]
  magicPairs_not_contains_nocase: [String!]
  magicPairs_: Pair_filter
  basePairs_: Pair_filter
  quotePairs_: Pair_filter
  volume: BigDecimal
  volume_not: BigDecimal
  volume_gt: BigDecimal
  volume_lt: BigDecimal
  volume_gte: BigDecimal
  volume_lte: BigDecimal
  volume_in: [BigDecimal!]
  volume_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  derivedMAGIC: BigDecimal
  derivedMAGIC_not: BigDecimal
  derivedMAGIC_gt: BigDecimal
  derivedMAGIC_lt: BigDecimal
  derivedMAGIC_gte: BigDecimal
  derivedMAGIC_lte: BigDecimal
  derivedMAGIC_in: [BigDecimal!]
  derivedMAGIC_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  name
  symbol
  totalSupply
  decimals
  decimalDivisor
  isNFT
  isMAGIC
  isETH
  vaultCollections
  vaultReserveItems
  magicPairs
  basePairs
  quotePairs
  volume
  volumeUSD
  txCount
  derivedMAGIC
}

type Transaction {
  id: Bytes!
  hash: Bytes!
  timestamp: BigInt!
  type: TransactionType
  user: User
  pair: Pair
  amount0: BigDecimal!
  amount1: BigDecimal!
  amountUSD: BigDecimal!
  isAmount1Out: Boolean
  items(skip: Int = 0, first: Int = 100, orderBy: TransactionItem_orderBy, orderDirection: OrderDirection, where: TransactionItem_filter): [TransactionItem!]!
}

type TransactionItem {
  id: Bytes!
  transaction: Transaction!
  vault: Token!
  collection: Collection!
  tokenId: BigInt!
  amount: Int!
}

input TransactionItem_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Token_filter
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: Collection_filter
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  amount: Int
  amount_not: Int
  amount_gt: Int
  amount_lt: Int
  amount_gte: Int
  amount_lte: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TransactionItem_filter]
  or: [TransactionItem_filter]
}

enum TransactionItem_orderBy {
  id
  transaction
  transaction__id
  transaction__hash
  transaction__timestamp
  transaction__type
  transaction__amount0
  transaction__amount1
  transaction__amountUSD
  transaction__isAmount1Out
  vault
  vault__id
  vault__name
  vault__symbol
  vault__totalSupply
  vault__decimals
  vault__decimalDivisor
  vault__isNFT
  vault__isMAGIC
  vault__isETH
  vault__volume
  vault__volumeUSD
  vault__txCount
  vault__derivedMAGIC
  collection
  collection__id
  collection__type
  tokenId
  amount
}

enum TransactionType {
  Swap
  Deposit
  Withdrawal
}

input Transaction_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hash: Bytes
  hash_not: Bytes
  hash_gt: Bytes
  hash_lt: Bytes
  hash_gte: Bytes
  hash_lte: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  type: TransactionType
  type_not: TransactionType
  type_in: [TransactionType!]
  type_not_in: [TransactionType!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  amount0: BigDecimal
  amount0_not: BigDecimal
  amount0_gt: BigDecimal
  amount0_lt: BigDecimal
  amount0_gte: BigDecimal
  amount0_lte: BigDecimal
  amount0_in: [BigDecimal!]
  amount0_not_in: [BigDecimal!]
  amount1: BigDecimal
  amount1_not: BigDecimal
  amount1_gt: BigDecimal
  amount1_lt: BigDecimal
  amount1_gte: BigDecimal
  amount1_lte: BigDecimal
  amount1_in: [BigDecimal!]
  amount1_not_in: [BigDecimal!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  isAmount1Out: Boolean
  isAmount1Out_not: Boolean
  isAmount1Out_in: [Boolean!]
  isAmount1Out_not_in: [Boolean!]
  items_: TransactionItem_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transaction_filter]
  or: [Transaction_filter]
}

enum Transaction_orderBy {
  id
  hash
  timestamp
  type
  user
  user__id
  user__liquidityPositionCount
  pair
  pair__id
  pair__reserve0
  pair__reserve1
  pair__reserveUSD
  pair__totalSupply
  pair__volume0
  pair__volume1
  pair__volumeUSD
  pair__txCount
  pair__lpFee
  pair__protocolFee
  pair__royaltiesFee
  pair__royaltiesBeneficiary
  pair__totalFee
  amount0
  amount1
  amountUSD
  isAmount1Out
  items
}

type User {
  id: Bytes!
  liquidityPositionCount: BigInt!
  transactions(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: LiquidityPosition_orderBy, orderDirection: OrderDirection, where: LiquidityPosition_filter): [LiquidityPosition!]!
}

input User_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  liquidityPositionCount: BigInt
  liquidityPositionCount_not: BigInt
  liquidityPositionCount_gt: BigInt
  liquidityPositionCount_lt: BigInt
  liquidityPositionCount_gte: BigInt
  liquidityPositionCount_lte: BigInt
  liquidityPositionCount_in: [BigInt!]
  liquidityPositionCount_not_in: [BigInt!]
  transactions_: Transaction_filter
  liquidityPositions_: LiquidityPosition_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  liquidityPositionCount
  transactions
  liquidityPositions
}

type VaultCollection {
  id: Bytes!
  vault: Token!
  collection: Collection!
  tokenIds: [BigInt!]
}

input VaultCollection_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Token_filter
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: Collection_filter
  tokenIds: [BigInt!]
  tokenIds_not: [BigInt!]
  tokenIds_contains: [BigInt!]
  tokenIds_contains_nocase: [BigInt!]
  tokenIds_not_contains: [BigInt!]
  tokenIds_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultCollection_filter]
  or: [VaultCollection_filter]
}

enum VaultCollection_orderBy {
  id
  vault
  vault__id
  vault__name
  vault__symbol
  vault__totalSupply
  vault__decimals
  vault__decimalDivisor
  vault__isNFT
  vault__isMAGIC
  vault__isETH
  vault__volume
  vault__volumeUSD
  vault__txCount
  vault__derivedMAGIC
  collection
  collection__id
  collection__type
  tokenIds
}

type VaultReserveItem {
  id: Bytes!
  vault: Token!
  collection: Collection!
  tokenId: BigInt!
  amount: Int!
}

input VaultReserveItem_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Token_filter
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: Collection_filter
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  amount: Int
  amount_not: Int
  amount_gt: Int
  amount_lt: Int
  amount_gte: Int
  amount_lte: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultReserveItem_filter]
  or: [VaultReserveItem_filter]
}

enum VaultReserveItem_orderBy {
  id
  vault
  vault__id
  vault__name
  vault__symbol
  vault__totalSupply
  vault__decimals
  vault__decimalDivisor
  vault__isNFT
  vault__isMAGIC
  vault__isETH
  vault__volume
  vault__volumeUSD
  vault__txCount
  vault__derivedMAGIC
  collection
  collection__id
  collection__type
  tokenId
  amount
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}