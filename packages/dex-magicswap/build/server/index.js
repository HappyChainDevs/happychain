import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { PassThrough } from 'node:stream';
import { createReadableStreamFromReadable, json, createCookieSessionStorage, defer } from '@remix-run/node';
import { RemixServer, Link, NavLink, useFetcher, useNavigation, useFetchers, Meta, Links, Outlet, Scripts, ScrollRestoration, useLoaderData, useNavigate, Await, useRevalidator, useRouteLoaderData, useSearchParams, useMatches, useLocation } from '@remix-run/react';
import { isbot } from 'isbot';
import { renderToPipeableStream } from 'react-dom/server';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import NProgress from 'nprogress';
import * as React from 'react';
import { createContext, useContext, useEffect, useState, useMemo, Suspense as Suspense$1, useRef, useCallback, forwardRef, memo, Fragment as Fragment$1 } from 'react';
import { useAccount as useAccount$1, createConfig, custom, WagmiProvider, useChainId, useWaitForTransactionReceipt, useBalance } from 'wagmi';
import { MagicSwapLogo, MagicSwapLogoFull, MagicLogo } from '@treasure-project/branding';
import { Loader, XIcon, ExternalLinkIcon, ChevronUpIcon, ChevronRightIcon, CheckIcon as CheckIcon$1, CircleIcon, MenuIcon, CheckCircleIcon, AlertCircleIcon, LoaderIcon as LoaderIcon$1, Minus, Plus, LayoutGridIcon, TableIcon, RotateCwIcon, ExternalLink, SettingsIcon, HelpCircle, X, ChevronLeftIcon, ArrowLeftRightIcon, ArrowDownToLineIcon, ArrowUpToLineIcon, ArrowRightIcon, PlusIcon, ChevronRight, SearchIcon, ArrowDownIcon, ChevronDownIcon, LayersIcon, GlobeIcon } from 'lucide-react';
import { arbitrum, arbitrumSepolia } from 'viem/chains';
import { clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';
import { Balancer } from 'react-wrap-balancer';
import { cva } from 'class-variance-authority';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { ClientOnly } from 'remix-utils/client-only';
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { Toaster as Toaster$1, toast } from 'sonner';
import { injected } from 'wagmi/connectors';
import invariant from 'tiny-invariant';
import { createUseReadContract, createUseWriteContract } from 'wagmi/codegen';
import { createPublicClient, http, parseUnits, formatUnits, formatEther, parseEther } from 'viem';
import dayjs from 'dayjs';
import { fileURLToPath, gql, PubSub, DefaultLogger, printWithCache } from '@graphql-mesh/utils';
import MeshCache from '@graphql-mesh/cache-localforage';
import { fetch as fetch$1 } from '@whatwg-node/fetch';
import GraphqlHandler from '@graphql-mesh/graphql';
import BareMerger from '@graphql-mesh/merger-bare';
import { usePersistedOperations } from '@graphql-yoga/plugin-persisted-operations';
import { getMesh } from '@graphql-mesh/runtime';
import { MeshStore, FsStoreStorageAdapter } from '@graphql-mesh/store';
import { path } from '@graphql-mesh/cross-helpers';
import { buildASTSchema } from 'graphql';
import { cachified, verboseReporter, totalTtl } from '@epic-web/cachified';
import { LRUCache } from 'lru-cache';
import { Resvg } from '@resvg/resvg-js';
import satori from 'satori';
import Decimal from 'decimal.js-light';
import { z } from 'zod';
import { ConstantProductRPool, findMultiRouteExactOut, findMultiRouteExactIn } from '@sushiswap/tines';
import { AnimatePresence, motion } from 'framer-motion';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { DialogClose as DialogClose$1 } from '@radix-ui/react-dialog';
import { arbitrumSepolia as arbitrumSepolia$1, arbitrum as arbitrum$1 } from 'wagmi/chains';
import * as PopoverPrimitive from '@radix-ui/react-popover';
import { useLocale } from '@react-aria/i18n';
import { useNumberField } from '@react-aria/numberfield';
import { useNumberFieldState } from '@react-stately/numberfield';
import * as LabelPrimitive from '@radix-ui/react-label';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import useMeasure from 'react-use-measure';

const ABORT_DELAY = 5e3;
function handleRequest(request, responseStatusCode, responseHeaders, remixContext, _loadContext) {
  return isbot(request.headers.get("user-agent")) ? handleBotRequest(
    request,
    responseStatusCode,
    responseHeaders,
    remixContext
  ) : handleBrowserRequest(
    request,
    responseStatusCode,
    responseHeaders,
    remixContext
  );
}
function handleBotRequest(request, responseStatusCode, responseHeaders, remixContext) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      /* @__PURE__ */ jsx(
        RemixServer,
        {
          context: remixContext,
          url: request.url,
          abortDelay: ABORT_DELAY
        }
      ),
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);
          responseHeaders.set("Content-Type", "text/html");
          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          );
          pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500;
          if (shellRendered) {
            console.error(error);
          }
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}
function handleBrowserRequest(request, responseStatusCode, responseHeaders, remixContext) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      /* @__PURE__ */ jsx(
        RemixServer,
        {
          context: remixContext,
          url: request.url,
          abortDelay: ABORT_DELAY
        }
      ),
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);
          responseHeaders.set("Content-Type", "text/html");
          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          );
          pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500;
          if (shellRendered) {
            console.error(error);
          }
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}

const entryServer = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: handleRequest
}, Symbol.toStringTag, { value: 'Module' }));

const PRIVACY_POLICY_URL = "https://app.treasure.lol/privacy-policy";
const TERMS_OF_SERVICE_URL = "https://app.treasure.lol/terms-of-service";
const DOCS_URL = "https://docs.treasure.lol/magicswap";
const GOVERNANCE_FORUM_URL = "https://forum.treasure.lol/discussions/3.1.%20Magicswap%20-%20Active";
const BUY_MAGIC_URL = "https://market.treasure.lol/manage-funds";
const DISCORD_URL = "https://discord.com/invite/treasuredao";
const TWITTER_URL = "https://twitter.com/MagicSwap_";
const TOKEN_METADATA = {
  [arbitrum.id]: [
    {
      id: "0x539bde0d7dbd336b79148aa742883198bbf60342",
      name: "MAGIC",
      symbol: "MAGIC",
      image: "/img/tokens/magic.png",
      isMAGIC: true
    },
    {
      id: "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
      name: "Ether",
      symbol: "ETH",
      image: "/img/tokens/eth.png",
      isETH: true
    },
    {
      id: "0xccd05a0fcfc1380e9da27862adb2198e58e0d66f",
      name: "Anima",
      symbol: "ANIMA",
      image: "/img/tokens/anima.png"
    },
    {
      id: "0xeeac5e75216571773c0064b3b591a86253791db6",
      name: "Ellerium",
      symbol: "ELM",
      image: "/img/tokens/elm.png"
    },
    {
      id: "0x872bad41cfc8ba731f811fea8b2d0b9fd6369585",
      name: "gFLY",
      symbol: "GFLY",
      image: "/img/tokens/gfly.png"
    },
    {
      id: "0x9e64d3b9e8ec387a9a58ced80b71ed815f8d82b5",
      name: "Smolcoin",
      symbol: "SMOL",
      image: "/img/tokens/smol.png"
    },
    {
      id: "0x0caadd427a6feb5b5fc1137eb05aa7ddd9c08ce9",
      name: "VEE",
      symbol: "VEE",
      image: "/img/tokens/vee.png"
    },
    {
      id: "0x74abf11b5f7bf057000e411a7130b46911792709",
      name: "Heist Rewards Token",
      symbol: "HRT",
      image: "/img/tokens/hrt.png"
    }
  ],
  [arbitrumSepolia.id]: [
    {
      id: "0x55d0cf68a1afe0932aff6f36c87efa703508191c",
      name: "MAGIC",
      symbol: "MAGIC",
      image: "/img/tokens/magic.png",
      isMAGIC: true
    },
    {
      id: "0x980b62da83eff3d4576c647993b0c1d7faf17c73",
      name: "Ether",
      symbol: "ETH",
      image: "/img/tokens/eth.png",
      isETH: true
    },
    {
      id: "0xda3cad5e4f40062ceca6c1b979766bc0baed8e33",
      name: "Ellerium",
      symbol: "ELM",
      image: "/img/tokens/elm.png"
    },
    {
      id: "0xff095e7d5a51d268f17ed77c32a62669782868ba",
      name: "gFLY",
      symbol: "GFLY",
      image: "/img/tokens/gfly.png"
    },
    {
      id: "0x568b900f596c183e68fe9d773a7afb93156c9db3",
      name: "Smolcoin",
      symbol: "SMOL",
      image: "/img/tokens/smol.png"
    },
    {
      id: "0x23be0504127475387a459fe4b01e54f1e336ffae",
      name: "VEE",
      symbol: "VEE",
      image: "/img/tokens/vee.png"
    },
    {
      id: "0x5a3247e764ee0e71cef22802d189815fad6f1257",
      name: "Heist Rewards Token",
      symbol: "HRT",
      image: "/img/tokens/hrt.png"
    }
  ]
};
const GAME_METADATA = {
  bitmates: {
    name: "Bitmates",
    image: "/img/games/bitmates.png",
    tokens: {},
    collections: {
      [arbitrumSepolia.id]: ["0x7e0ac4fd9ce457c4dfc903804d96b1eb5a34000e"]
    }
  },
  realm: {
    name: "Realm",
    image: "/img/games/realm.png",
    tokens: {
      [arbitrum.id]: ["0xccd05a0fcfc1380e9da27862adb2198e58e0d66f"]
    },
    collections: {}
  },
  smol: {
    name: "SMOL",
    image: "/img/games/smol.png",
    tokens: {
      [arbitrum.id]: ["0x9e64d3b9e8ec387a9a58ced80b71ed815f8d82b5"],
      [arbitrumSepolia.id]: ["0x568b900f596c183e68fe9d773a7afb93156c9db3"]
    },
    collections: {}
  },
  zeeverse: {
    name: "Zeeverse",
    image: "/img/games/zeeverse.png",
    tokens: {
      [arbitrum.id]: [
        "0x0caadd427a6feb5b5fc1137eb05aa7ddd9c08ce9",
        "0x74abf11b5f7bf057000e411a7130b46911792709"
      ],
      [arbitrumSepolia.id]: [
        "0x23be0504127475387a459fe4b01e54f1e336ffae",
        "0x5a3247e764ee0e71cef22802d189815fad6f1257"
      ]
    },
    collections: {
      [arbitrum.id]: ["0x58318bceaa0d249b62fad57d134da7475e551b47"],
      [arbitrumSepolia.id]: ["0xfaad5aa3209ab1b25ede22ed4da5521538b649fa"]
    }
  }
};
const BLOCKED_TOKENS = [
  "0x45d55eadf0ed5495b369e040af0717eafae3b731"
  // ELM v1
];

function cn(...inputs) {
  return twMerge(clsx(inputs));
}

const ConnectButton = undefined;

const LoaderIcon = ({ className }) => /* @__PURE__ */ jsx(Loader, { className: cn("animate-spin text-night-400", className) });
const DiscordIcon = ({ className }) => /* @__PURE__ */ jsx("svg", { viewBox: "0 0 20 20", className, children: /* @__PURE__ */ jsx(
  "path",
  {
    d: "M14.998 5.70055C14.0536 5.27423 13.0545 4.97131 12.0272 4.7998C11.8992 5.02302 11.7497 5.32325 11.6466 5.5621C10.5389 5.4014 9.44141 5.4014 8.3541 5.5621C8.25105 5.32331 8.09816 5.02302 7.96901 4.7998C6.94064 4.97139 5.94072 5.27508 4.99591 5.70277C3.11581 8.44396 2.60613 11.117 2.86094 13.7522C4.10795 14.6507 5.31643 15.1965 6.50454 15.5536C6.79981 15.1618 7.06083 14.7471 7.2849 14.3136C6.85831 14.1569 6.44707 13.9638 6.05606 13.7366C6.15896 13.663 6.25943 13.5863 6.35733 13.5066C8.7267 14.5759 11.3011 14.5759 13.6423 13.5066C13.7406 13.5858 13.841 13.6624 13.9435 13.7366C13.5519 13.9644 13.1398 14.1579 12.7124 14.3147C12.9377 14.75 13.1983 15.1651 13.4928 15.5547C14.682 15.1976 15.8916 14.6518 17.1386 13.7522C17.4376 10.6974 16.6279 8.04881 14.998 5.70049V5.70055ZM7.60771 12.1316C6.89643 12.1316 6.31312 11.4909 6.31312 10.7108C6.31312 9.93062 6.884 9.28886 7.60771 9.28886C8.33148 9.28886 8.91474 9.92948 8.90231 10.7108C8.90343 11.4909 8.33148 12.1316 7.60771 12.1316ZM12.3918 12.1316C11.6806 12.1316 11.0973 11.4909 11.0973 10.7108C11.0973 9.93062 11.6681 9.28886 12.3918 9.28886C13.1156 9.28886 13.6989 9.92948 13.6864 10.7108C13.6864 11.4909 13.1156 12.1316 12.3918 12.1316V12.1316Z",
    fill: "currentColor"
  }
) });
const TwitterIcon = ({ className }) => /* @__PURE__ */ jsx("svg", { viewBox: "0 0 24 24", className, children: /* @__PURE__ */ jsx(
  "path",
  {
    d: "M14.095479,10.316482L22.286354,1h-1.940718l-7.115352,8.087682L7.551414,1H1l8.589488,12.231093L1,23h1.940717  l7.509372-8.542861L16.448587,23H23L14.095479,10.316482z M11.436522,13.338465l-0.871624-1.218704l-6.924311-9.68815h2.981339  l5.58978,7.82155l0.867949,1.218704l7.26506,10.166271h-2.981339L11.436522,13.338465z",
    fill: "currentColor"
  }
) });
const SwapIcon = ({ className }) => /* @__PURE__ */ jsx("svg", { width: "24", height: "24", viewBox: "0 0 24 24", className, children: /* @__PURE__ */ jsx(
  "path",
  {
    d: "M19 18L15 22L13.55 20.6L15.15 19L8 19C6.9 19 5.95833 18.6083 5.175 17.825C4.39167 17.0417 4 16.1 4 15C4 13.9 4.39167 12.9583 5.175 12.175C5.95833 11.3917 6.9 11 8 11L15 11C15.55 11 16.0208 10.8042 16.4125 10.4125C16.8042 10.0208 17 9.55 17 9C17 8.45 16.8042 7.97917 16.4125 7.5875C16.0208 7.19583 15.55 7 15 7L7.85 7L9.45 8.6L8 10L4 6L8 2L9.45 3.4L7.85 5L15 5C16.1 5 17.0417 5.39167 17.825 6.175C18.6083 6.95833 19 7.9 19 9C19 10.1 18.6083 11.0417 17.825 11.825C17.0417 12.6083 16.1 13 15 13L8 13C7.45 13 6.97917 13.1958 6.5875 13.5875C6.19583 13.9792 6 14.45 6 15C6 15.55 6.19583 16.0208 6.5875 16.4125C6.97917 16.8042 7.45 17 8 17L15.15 17L13.55 15.4L15 14L19 18Z",
    fill: "currentColor"
  }
) });
const TokenIcon = ({ className }) => /* @__PURE__ */ jsx("svg", { width: "14", height: "18", viewBox: "0 0 14 18", className, children: /* @__PURE__ */ jsx(
  "path",
  {
    d: "M12.5078 3.38281C11.5625 1.76562 10.2734 0.875 8.875 0.875H5.125C3.72656 0.875 2.4375 1.76562 1.49219 3.38281C0.546875 5 0.125 6.89062 0.125 9C0.125 11.1094 0.609375 13.1094 1.49219 14.6172C2.375 16.125 3.72656 17.125 5.125 17.125H8.875C10.2734 17.125 11.5625 16.2344 12.5078 14.6172C13.4531 13 13.875 11.1094 13.875 9C13.875 6.89062 13.3906 4.89062 12.5078 3.38281ZM12.6094 8.375H10.1094C10.0469 7.03125 9.78906 5.74219 9.35156 4.625H11.7422C12.2188 5.67188 12.5391 6.96875 12.6094 8.375ZM11 3.375H8.75781C8.49327 2.92443 8.17879 2.50512 7.82031 2.125H8.875C9.65625 2.125 10.3906 2.59375 11 3.375ZM8.875 15.875H7.82031C8.17879 15.4949 8.49327 15.0756 8.75781 14.625H11C10.3906 15.4062 9.65625 15.875 8.875 15.875ZM11.7422 13.375H9.35156C9.78906 12.2578 10.0469 10.9688 10.1094 9.625H12.6094C12.5391 11.0312 12.2188 12.3281 11.7422 13.375Z",
    fill: "currentColor"
  }
) });
const CheckIcon = ({ className }) => /* @__PURE__ */ jsx("svg", { width: "9", height: "6", viewBox: "0 0 9 6", className, children: /* @__PURE__ */ jsx(
  "path",
  {
    d: "M3.52503 5.93281L0.710449 3.11823L2.00837 1.82031L3.52503 3.33698L6.7917 0.0703125L8.08962 1.36823L3.52503 5.93281Z",
    fill: "currentColor"
  }
) });
const MagicTextLogo = ({ className }) => /* @__PURE__ */ jsxs("svg", { viewBox: "0 0 69 17", className, children: [
  /* @__PURE__ */ jsx(
    "path",
    {
      d: "M26.2195 7.62214L29.028 1.88162C29.057 1.8209 29.1151 1.78851 29.1815 1.78851H33.0603C33.1184 1.78851 33.1681 1.8128 33.2013 1.86138C33.2345 1.90996 33.2387 1.96259 33.2179 2.01522L32.7533 3.14875V11.7393L33.2179 12.8728C33.2387 12.9254 33.2345 12.9821 33.2013 13.0266C33.1681 13.0712 33.1184 13.0995 33.0603 13.0995H29.2769C29.2188 13.0995 29.169 13.0752 29.1358 13.0266C29.1027 12.9781 29.0985 12.9254 29.1193 12.8728L29.5839 11.7393V4.99478L25.618 13.2088C25.5889 13.2695 25.5308 13.306 25.4603 13.306C25.3898 13.306 25.3317 13.2655 25.3068 13.2048L21.8636 5.35913V11.2859L22.5191 12.8769C22.5398 12.9295 22.5357 12.9862 22.5025 13.0307C22.4693 13.0752 22.4195 13.1036 22.3614 13.1036H19.4865C19.4285 13.1036 19.3787 13.0793 19.3455 13.0307C19.3123 12.9821 19.3082 12.9295 19.3289 12.8769L19.9844 11.2859V3.1528L19.5197 2.01927C19.499 1.96664 19.5031 1.90996 19.5363 1.86543C19.5695 1.81685 19.6193 1.79256 19.6774 1.79256H23.5728C23.6433 1.79256 23.7014 1.83304 23.7304 1.89377L26.2278 7.63024L26.2195 7.62214Z",
      fill: "currentColor"
    }
  ),
  /* @__PURE__ */ jsx(
    "path",
    {
      d: "M43.6886 12.8768C43.7094 12.9295 43.7052 12.9821 43.672 13.0307C43.6389 13.0752 43.5891 13.1036 43.5351 13.1036H40.2288C40.1376 13.1036 40.0587 13.0307 40.0587 12.9376V12.4356C39.2456 13.0347 38.2956 13.2938 37.2585 13.2938C36.1177 13.2938 34.9603 12.8728 34.4874 11.7798C34.0186 10.6989 34.4666 9.50055 35.2548 8.68684C36.4537 7.44805 38.3247 7.03512 40.009 7.03512H40.0504C40.0339 6.73555 39.9467 6.40763 39.6812 6.2457C38.586 5.57773 36.8478 6.55337 35.931 7.18896C35.8895 7.2173 35.8398 7.22539 35.79 7.21325C35.7402 7.2011 35.7029 7.16872 35.6821 7.12419L34.952 5.6425C34.9312 5.60202 34.9312 5.55749 34.9478 5.51296C34.9644 5.46842 34.9935 5.44009 35.0391 5.41984C37.4784 4.39562 43.2157 4.12438 43.2157 7.85288V11.7352L43.6803 12.8728L43.6886 12.8768ZM40.0587 8.44394C39.3867 8.50871 38.7852 8.80829 38.333 9.31433C37.9721 9.72321 37.69 10.3102 37.719 10.8608C37.7314 11.0875 37.8103 11.3021 38.0052 11.4356C38.3703 11.6826 38.9096 11.5328 39.2498 11.3182C39.7849 10.9782 40.0587 10.4074 40.0587 9.78798V8.44394Z",
      fill: "currentColor"
    }
  ),
  /* @__PURE__ */ jsx(
    "path",
    {
      d: "M52.8485 16.3868C52.8485 16.3868 52.836 16.3706 52.8319 16.3625C52.8277 16.3503 52.8194 16.3382 52.8194 16.326C52.8153 16.2977 52.8194 16.2734 52.8277 16.2451C52.8277 16.2451 52.836 16.2289 52.8402 16.2248C53.2343 15.6702 52.7697 15.1682 51.9068 15.4273C50.8863 15.7309 48.5922 16.3018 47.5467 16.3139C46.3271 16.3301 45.1116 15.9576 44.5557 14.8282C43.8712 13.4355 44.9249 11.6664 46.0823 11.1887C43.2241 9.24149 44.3524 4.82072 49.3264 4.82072C50.1395 4.82072 50.9609 4.93812 51.716 5.2377C52.0561 4.47661 52.5705 3.7965 53.3173 3.37547C53.4044 3.32689 53.5122 3.35928 53.5537 3.44834L54.4996 5.43607C54.5494 5.53727 54.4788 5.65467 54.3668 5.66682C53.9146 5.7154 53.4293 5.82875 53.0227 6.03522C54.2756 7.16875 54.5079 8.93381 53.5247 10.294C52.8485 11.2292 51.7948 11.7272 50.6788 11.9498C49.6293 12.1603 48.6419 11.9782 47.5592 12.217C46.547 12.4397 46.7171 13.7797 47.8869 13.5489C48.8535 13.3586 50.6208 12.8688 51.7906 12.6461C54.3212 12.1644 55.35 14.5286 54.3793 16.322C54.3046 16.4596 54.2175 16.4394 54.0142 16.4394H52.9605C52.919 16.4394 52.8817 16.4232 52.8568 16.3949L52.8485 16.3868ZM49.9321 6.58579C49.6085 6.28216 49.1522 6.02307 48.6876 6.09189C48.1732 6.16881 47.8869 6.61818 47.7666 7.07968C47.6422 7.56953 47.6837 8.112 47.8164 8.59376C47.9741 9.17671 48.2893 9.75967 48.7374 10.1766C49.6002 10.9823 50.6083 10.8284 50.9029 9.68275C51.0315 9.19291 50.9858 8.65043 50.8531 8.16868C50.6954 7.58572 50.3801 7.00277 49.9321 6.58579Z",
      fill: "currentColor"
    }
  ),
  /* @__PURE__ */ jsx(
    "path",
    {
      d: "M59.4694 12.8769C59.4901 12.9295 59.486 12.9821 59.4528 13.0307C59.4196 13.0752 59.3698 13.1036 59.3159 13.1036H55.5325C55.4744 13.1036 55.4246 13.0793 55.3914 13.0307C55.3583 12.9821 55.3541 12.9295 55.3749 12.8769L55.8395 11.7393V7.0999L55.2794 6.19308C55.2504 6.14854 55.2463 6.09996 55.267 6.05138C55.2877 6.0028 55.3209 5.96637 55.3749 5.95422L55.9598 5.77205H55.9681L58.7932 5.01906C58.8471 5.00692 58.8969 5.01501 58.9384 5.0474C58.9799 5.07979 59.0048 5.12432 59.0048 5.17695V11.7433L59.4694 12.8809V12.8769ZM57.3537 1.20959H57.3868C58.3161 1.20959 59.0711 1.94639 59.0711 2.85321C59.0711 3.76004 58.3161 4.50493 57.3827 4.49683H57.3495C56.4203 4.49683 55.6652 3.76004 55.6652 2.85321C55.6652 1.94639 56.4203 1.20959 57.3537 1.20959Z",
      fill: "currentColor"
    }
  ),
  /* @__PURE__ */ jsx(
    "path",
    {
      d: "M68.6914 6.26597L66.7333 7.90149C66.6918 7.93793 66.6379 7.95007 66.584 7.93793C66.53 7.92578 66.4885 7.88935 66.4678 7.84077C66.3475 7.54929 66.2023 7.2659 66.0281 7.00276C65.7086 6.51292 65.0656 5.80446 64.3853 5.96235C63.9372 6.06355 63.6717 6.5534 63.539 6.94204C63.3316 7.55333 63.3108 8.27394 63.4145 8.90547C63.6634 10.4681 64.6383 11.7555 66.3184 11.9903C66.5093 12.0186 66.7001 12.0308 66.8909 12.0308C67.534 12.0308 68.1853 11.881 68.7495 11.5733C68.82 11.5328 68.9071 11.549 68.961 11.6098C69.015 11.6705 69.0108 11.7595 68.961 11.8203C68.0152 12.9133 66.5466 13.306 65.1237 13.306C62.4687 13.306 60.3281 11.7879 60.3281 9.05526C60.3281 6.32265 62.4811 4.82477 65.1237 4.82477C66.4097 4.82477 67.7497 5.13244 68.6955 6.03117C68.7287 6.06355 68.7495 6.10404 68.7453 6.15262C68.7453 6.2012 68.7246 6.24168 68.6872 6.27002L68.6914 6.26597Z",
      fill: "currentColor"
    }
  ),
  /* @__PURE__ */ jsx(
    "path",
    {
      d: "M15.1846 7.40354L13.0399 6.69508C12.2517 6.43599 11.6667 5.78421 11.5008 4.99074L10.5964 0.630701C10.5715 0.521396 10.472 0.44043 10.3558 0.44043C10.2397 0.44043 10.1401 0.521396 10.1152 0.630701L9.21085 4.99074C9.04491 5.78421 8.45998 6.43599 7.67177 6.69508L5.52702 7.40354C5.42746 7.43593 5.36108 7.52904 5.36108 7.63024C5.36108 7.73145 5.42746 7.82456 5.52702 7.85695L7.67177 8.56541C8.45998 8.8245 9.04491 9.47628 9.21085 10.2697L10.1152 14.6257C10.1401 14.735 10.2397 14.816 10.3558 14.816C10.472 14.816 10.5715 14.735 10.5964 14.6257L11.5008 10.2697C11.6667 9.47628 12.2517 8.8245 13.0399 8.56541L15.1846 7.85695C15.2842 7.82456 15.3506 7.73145 15.3506 7.63024C15.3506 7.52904 15.2842 7.43593 15.1846 7.40354Z",
      fill: "currentColor"
    }
  ),
  /* @__PURE__ */ jsx(
    "path",
    {
      d: "M3.66019 3.40786L4.41521 3.65885C4.69316 3.75196 4.90058 3.97867 4.95866 4.26205L5.27809 5.80041C5.28639 5.8409 5.31957 5.86923 5.36106 5.86923C5.40254 5.86923 5.43573 5.8409 5.44403 5.80041L5.76346 4.26205C5.82154 3.98272 6.02896 3.75196 6.30691 3.65885L7.06193 3.40786C7.09511 3.39571 7.12 3.36332 7.12 3.32689C7.12 3.29046 7.09511 3.25807 7.06193 3.24592L6.30691 2.99493C6.02896 2.90182 5.82154 2.67511 5.76346 2.39173L5.44403 0.853367C5.43573 0.812884 5.40254 0.784546 5.36106 0.784546C5.31957 0.784546 5.28639 0.812884 5.27809 0.853367L4.95866 2.39173C4.90058 2.67106 4.69316 2.90182 4.41521 2.99493L3.66019 3.24592C3.627 3.25807 3.60211 3.29046 3.60211 3.32689C3.60211 3.36332 3.627 3.39571 3.66019 3.40786Z",
      fill: "currentColor"
    }
  ),
  /* @__PURE__ */ jsx(
    "path",
    {
      d: "M5.42332 10.9661L4.4111 10.6301C4.03774 10.5086 3.75979 10.201 3.68512 9.82446L3.25782 7.76387C3.24538 7.71124 3.19975 7.6748 3.14582 7.6748C3.09189 7.6748 3.0421 7.71124 3.03381 7.76387L2.60652 9.82446C2.5277 10.201 2.24975 10.5086 1.88054 10.6301L0.868311 10.9661C0.822678 10.9823 0.78949 11.0228 0.78949 11.0713C0.78949 11.1199 0.822678 11.1645 0.868311 11.1766L1.88054 11.5126C2.2539 11.6341 2.53184 11.9417 2.60652 12.3182L3.03381 14.3788C3.04625 14.4314 3.09189 14.4679 3.14582 14.4679C3.19975 14.4679 3.24952 14.4314 3.25782 14.3788L3.68512 12.3182C3.76394 11.9417 4.04189 11.6341 4.4111 11.5126L5.42332 11.1766C5.46895 11.1604 5.50214 11.1199 5.50214 11.0713C5.50214 11.0228 5.46895 10.9782 5.42332 10.9661Z",
      fill: "currentColor"
    }
  )
] });

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed ring-offset-background",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        dark: "bg-accent text-accent-foreground hover:bg-accent/90",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        outline: "border border-input hover:bg-accent hover:text-accent-foreground",
        ghost: "hover:bg-accent text-accent-foreground hover:text-accent-foreground/90",
        link: "underline-offset-4 hover:underline text-primary"
      },
      size: {
        xs: "h-6 px-2 text-xs",
        default: "h-9 px-3",
        md: "h-10 px-4",
        lg: "h-11 px-8"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  }
);
const Button = React.forwardRef(
  ({ className, variant, size, ...props }, ref) => {
    return /* @__PURE__ */ jsx(
      "button",
      {
        type: "button",
        className: cn(buttonVariants({ variant, size, className })),
        ref,
        ...props
      }
    );
  }
);
Button.displayName = "Button";
const CloseButton = React.forwardRef(
  ({ variant, size, ...props }, ref) => {
    return /* @__PURE__ */ jsx(
      "button",
      {
        ref,
        type: "button",
        className: "flex h-7 w-7 items-center justify-center rounded-full bg-night-900 text-night-600 transition-colors hover:bg-ruby-800 hover:text-night-100",
        ...props,
        children: /* @__PURE__ */ jsx(XIcon, { className: "w-4" })
      }
    );
  }
);
CloseButton.displayName = "CloseButton";
const TransactionButton = React.forwardRef(
  ({ className, variant, size, ...props }, ref) => {
    return /* @__PURE__ */ jsx(
      "button",
      {
        type: "button",
        className: cn(buttonVariants({ variant, size, className })),
        ref,
        ...props
      }
    );
  }
);
TransactionButton.displayName = "TransactionButton";

const FOOTER_LINKS = {
  Treasure: [
    {
      text: "About",
      href: "https://docs.treasure.lol/introduction"
    },
    {
      text: "What is MAGIC?",
      href: "https://docs.treasure.lol/magic/introduction",
      type: "external"
    },
    {
      text: "Governance Forum",
      href: GOVERNANCE_FORUM_URL,
      type: "external"
    }
  ],
  Discover: [
    {
      text: "Games",
      href: "https://app.treasure.lol"
    },
    {
      text: "Marketplace",
      href: "https://app.treasure.lol/trending"
    }
  ],
  Resources: [
    {
      text: "Documentation",
      href: DOCS_URL,
      type: "external"
    },
    {
      text: "GitHub",
      href: "https://github.com/TreasureProject",
      type: "external"
    }
  ]
};
const Footer = () => {
  return /* @__PURE__ */ jsx("footer", { className: "border-night-900 border-t-2 bg-night-1200 px-4 py-6 md:p-16", children: /* @__PURE__ */ jsxs("div", { className: "container space-y-8 md:space-y-14", children: [
    /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between gap-4", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-6", children: [
        /* @__PURE__ */ jsx(MagicSwapLogo, { className: "h-8 shrink-0 md:h-14" }),
        /* @__PURE__ */ jsx("h1", { className: "max-w-xs font-semibold text-night-500 md:text-2xl", children: /* @__PURE__ */ jsxs(Balancer, { children: [
          "The gateway to the cross-game",
          " ",
          /* @__PURE__ */ jsx("span", { className: "text-white", children: "economy" }),
          "."
        ] }) })
      ] }),
      /* @__PURE__ */ jsxs("ul", { className: "flex items-center gap-2.5", children: [
        /* @__PURE__ */ jsx("li", { children: /* @__PURE__ */ jsx(
          "a",
          {
            className: "text-night-100 transition-colors hover:text-honey-25",
            href: DISCORD_URL,
            target: "_blank",
            rel: "noreferrer",
            children: /* @__PURE__ */ jsx(DiscordIcon, { className: "h-8" })
          }
        ) }),
        /* @__PURE__ */ jsx("li", { children: /* @__PURE__ */ jsx(
          "a",
          {
            className: "text-night-100 transition-colors hover:text-honey-25",
            href: TWITTER_URL,
            target: "_blank",
            rel: "noreferrer",
            children: /* @__PURE__ */ jsx(TwitterIcon, { className: "h-5" })
          }
        ) })
      ] })
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-center justify-between gap-8 md:flex-row", children: [
      /* @__PURE__ */ jsx("div", { className: "flex flex-wrap items-start justify-center gap-8", children: Object.entries(FOOTER_LINKS).map(([title, links]) => /* @__PURE__ */ jsxs(
        "div",
        {
          className: "space-y-2 text-center md:space-y-4 md:text-left",
          children: [
            /* @__PURE__ */ jsx("p", { className: "font-semibold text-honey-25", children: title }),
            /* @__PURE__ */ jsx("ul", { className: "space-y-2 text-night-500 md:space-y-4", children: links.map(({ text, href }) => /* @__PURE__ */ jsx("li", { children: /* @__PURE__ */ jsxs(
              "a",
              {
                href,
                className: "flex items-center justify-center gap-1 transition-colors hover:text-honey-25 md:justify-start",
                ...href.startsWith("https://") ? {
                  target: "_blank",
                  rel: "noopener noreferrer"
                } : void 0,
                children: [
                  text,
                  href.startsWith("https://") ? /* @__PURE__ */ jsx(ExternalLinkIcon, { className: "h-3 w-3" }) : null
                ]
              },
              text
            ) }, text)) })
          ]
        },
        title
      )) }),
      /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-end gap-2", children: [
        /* @__PURE__ */ jsx(Link, { to: BUY_MAGIC_URL, target: "_blank", rel: "noopener noreferrer", children: /* @__PURE__ */ jsxs(Button, { size: "md", className: "flex items-center gap-1", children: [
          "Buy ",
          /* @__PURE__ */ jsx(MagicTextLogo, { className: "h-4" })
        ] }) }),
        /* @__PURE__ */ jsxs(
          "button",
          {
            type: "button",
            className: "flex items-center gap-1 py-4 pl-4 font-semibold text-honey-25 text-sm transition-colors hover:text-white",
            onClick: () => {
              window.scrollTo({
                top: 0,
                behavior: "smooth"
              });
            },
            children: [
              "Back to the top",
              /* @__PURE__ */ jsx(ChevronUpIcon, { className: "h-4 w-4" })
            ]
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsx("div", { className: "w-full border-night-900 border-t text-night-500 text-sm", children: /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-center justify-between gap-4 pt-6 sm:flex-row", children: [
      /* @__PURE__ */ jsxs("p", { className: "base-500 text-center md:text-start", children: [
        "Copyright © ",
        (/* @__PURE__ */ new Date()).getFullYear(),
        " Magicswap. All rights reserved."
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-4", children: [
        /* @__PURE__ */ jsx(
          Link,
          {
            to: TERMS_OF_SERVICE_URL,
            className: "transition-colors hover:text-night-400",
            target: "_blank",
            rel: "noopener noreferrer",
            children: "Terms of Service"
          }
        ),
        /* @__PURE__ */ jsx(
          Link,
          {
            to: PRIVACY_POLICY_URL,
            className: "transition-colors hover:text-night-400",
            target: "_blank",
            rel: "noopener noreferrer",
            children: "Privacy Policy"
          }
        )
      ] })
    ] }) })
  ] }) });
};

const DropdownMenu = DropdownMenuPrimitive.Root;
const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;
const DropdownMenuGroup = DropdownMenuPrimitive.Group;
const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => /* @__PURE__ */ jsxs(
  DropdownMenuPrimitive.SubTrigger,
  {
    ref,
    className: cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    ),
    ...props,
    children: [
      children,
      /* @__PURE__ */ jsx(ChevronRightIcon, { className: "ml-auto h-4 w-4" })
    ]
  }
));
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;
const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  DropdownMenuPrimitive.SubContent,
  {
    ref,
    className: cn(
      "data-[side=bottom]:slide-in-from-top-1 data-[side=left]:slide-in-from-right-1 data-[side=right]:slide-in-from-left-1 data-[side=top]:slide-in-from-bottom-1 z-50 min-w-[8rem] animate-in overflow-hidden rounded-md border bg-popover p-1 shadow-md",
      className
    ),
    ...props
  }
));
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;
const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => /* @__PURE__ */ jsx(DropdownMenuPrimitive.Portal, { children: /* @__PURE__ */ jsx(
  DropdownMenuPrimitive.Content,
  {
    ref,
    sideOffset,
    className: cn(
      "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] animate-in overflow-hidden rounded-lg border bg-popover p-3 text-popover-foreground shadow-lg",
      className
    ),
    ...props
  }
) }));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;
const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => /* @__PURE__ */ jsx(
  DropdownMenuPrimitive.Item,
  {
    ref,
    className: cn(
      "relative flex cursor-pointer select-none items-center rounded-md px-2 py-2.5 text-sm leading-[160%] outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    ),
    ...props
  }
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;
const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => /* @__PURE__ */ jsxs(
  DropdownMenuPrimitive.CheckboxItem,
  {
    ref,
    className: cn(
      "relative flex cursor-default select-none items-center rounded-md py-1.5 pr-2 pl-8 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    ),
    checked,
    ...props,
    children: [
      /* @__PURE__ */ jsx("span", { className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center", children: /* @__PURE__ */ jsx(DropdownMenuPrimitive.ItemIndicator, { children: /* @__PURE__ */ jsx(CheckIcon$1, { className: "h-4 w-4" }) }) }),
      children
    ]
  }
));
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;
const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ jsxs(
  DropdownMenuPrimitive.RadioItem,
  {
    ref,
    className: cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pr-2 pl-8 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    ),
    ...props,
    children: [
      /* @__PURE__ */ jsx("span", { className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center", children: /* @__PURE__ */ jsx(DropdownMenuPrimitive.ItemIndicator, { children: /* @__PURE__ */ jsx(CircleIcon, { className: "h-2 w-2 fill-current" }) }) }),
      children
    ]
  }
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;
const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => /* @__PURE__ */ jsx(
  DropdownMenuPrimitive.Label,
  {
    ref,
    className: cn(
      "px-2 py-1.5 font-semibold text-sm",
      inset && "pl-8",
      className
    ),
    ...props
  }
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;
const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  DropdownMenuPrimitive.Separator,
  {
    ref,
    className: cn(
      "-mx-1 -translate-x-3 my-3 h-.5 w-[calc(100%+24px)] border-b border-b-night-900 bg-muted",
      className
    ),
    ...props
  }
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const VisibleOnClient = ({
  children
}) => {
  return /* @__PURE__ */ jsx(ClientOnly, { fallback: /* @__PURE__ */ jsx(LoaderIcon, { className: "inline-block h-3.5 w-3.5" }), children: () => children });
};

const NAV = [
  { name: "Swap", href: "/swap" },
  { name: "Pools", href: "/pools" }
];
const Layout = ({ children }) => {
  return /* @__PURE__ */ jsxs("div", { className: "flex min-h-full flex-col", children: [
    /* @__PURE__ */ jsx("header", { className: "h-20 border-night-900 border-b bg-night-1200", children: /* @__PURE__ */ jsxs("div", { className: "container flex h-full items-center", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-7 divide-x divide-night-900", children: [
        /* @__PURE__ */ jsxs(Link, { to: "/", children: [
          /* @__PURE__ */ jsx(MagicSwapLogoFull, { className: "hidden h-7 md:block" }),
          /* @__PURE__ */ jsx(MagicSwapLogo, { className: "h-8 md:hidden" })
        ] }),
        /* @__PURE__ */ jsx("div", { className: "hidden items-center lg:flex", children: NAV.map(({ name, href }) => /* @__PURE__ */ jsx(
          NavLink,
          {
            prefetch: "intent",
            className: ({ isActive }) => cn(
              "ml-3 cursor-pointer rounded-md px-5 py-2 font-medium text-night-500 transition-colors hover:bg-night-1100 hover:text-night-200",
              isActive && "text-honey-25 hover:text-honey-25"
            ),
            to: href,
            children: name
          },
          name
        )) })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "flex flex-1 items-center justify-between lg:justify-end ps-3 gap-3", children: [
        /* @__PURE__ */ jsx("div", { className: "lg:hidden", children: /* @__PURE__ */ jsxs(DropdownMenu, { children: [
          /* @__PURE__ */ jsx(DropdownMenuTrigger, { asChild: true, children: /* @__PURE__ */ jsx(Button, { variant: "secondary", className: "w-9 px-0", children: /* @__PURE__ */ jsx(MenuIcon, { className: "w-4" }) }) }),
          /* @__PURE__ */ jsxs(DropdownMenuContent, { align: "end", className: "w-56", children: [
            /* @__PURE__ */ jsxs(DropdownMenuGroup, { children: [
              /* @__PURE__ */ jsx(
                DropdownMenuItem,
                {
                  asChild: true,
                  className: "font-medium text-night-200 hover:text-night-100",
                  children: /* @__PURE__ */ jsx(Link, { to: "/swap", children: "Swap" })
                }
              ),
              /* @__PURE__ */ jsx(
                DropdownMenuItem,
                {
                  asChild: true,
                  className: "font-medium text-night-200 hover:text-night-100",
                  children: /* @__PURE__ */ jsx(Link, { to: "/pools", children: "Pools" })
                }
              )
            ] }),
            /* @__PURE__ */ jsx(DropdownMenuSeparator, {}),
            /* @__PURE__ */ jsx(Link, { to: DOCS_URL, target: "_blank", rel: "noopener noreferrer", children: /* @__PURE__ */ jsx(DropdownMenuItem, { children: /* @__PURE__ */ jsx("span", { children: "Documentation" }) }) }),
            /* @__PURE__ */ jsx(
              Link,
              {
                to: TERMS_OF_SERVICE_URL,
                target: "_blank",
                rel: "noopener noreferrer",
                children: /* @__PURE__ */ jsx(DropdownMenuItem, { children: /* @__PURE__ */ jsx("span", { children: "Terms of Service" }) })
              }
            ),
            /* @__PURE__ */ jsx(
              Link,
              {
                to: PRIVACY_POLICY_URL,
                target: "_blank",
                rel: "noopener noreferrer",
                children: /* @__PURE__ */ jsx(DropdownMenuItem, { children: /* @__PURE__ */ jsx("span", { children: "Privacy Policy" }) })
              }
            ),
            /* @__PURE__ */ jsx(
              Link,
              {
                to: GOVERNANCE_FORUM_URL,
                target: "_blank",
                rel: "noopener noreferrer",
                children: /* @__PURE__ */ jsx(DropdownMenuItem, { children: /* @__PURE__ */ jsx("span", { children: "Governance Forum" }) })
              }
            ),
            /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-3 p-3", children: [
              /* @__PURE__ */ jsx(
                Link,
                {
                  to: DISCORD_URL,
                  target: "_blank",
                  rel: "noopener noreferrer",
                  children: /* @__PURE__ */ jsx(DiscordIcon, { className: "w-7 text-night-600 transition-colors hover:text-night-100" })
                }
              ),
              /* @__PURE__ */ jsx(
                Link,
                {
                  to: TWITTER_URL,
                  target: "_blank",
                  rel: "noopener noreferrer",
                  children: /* @__PURE__ */ jsx(TwitterIcon, { className: "w-4 text-night-600 transition-colors hover:text-night-100" })
                }
              )
            ] })
          ] })
        ] }) }),
        /* @__PURE__ */ jsx(VisibleOnClient, { children: /* @__PURE__ */ jsx(ConnectButton, {}) })
      ] })
    ] }) }),
    /* @__PURE__ */ jsx("div", { className: "relative flex-1", children }),
    /* @__PURE__ */ jsx(Footer, {})
  ] });
};

const Context = createContext({
  isConnected: false,
  address: void 0,
  addressArg: "0x0"
});
const useAccount = () => {
  const context = useContext(Context);
  if (!context) {
    throw new Error(
      "Must call `useAccount` within an `AccountProvider` component."
    );
  }
  return context;
};
const AccountProvider = ({ children }) => {
  const { submit } = useFetcher();
  const { isConnected, address } = useAccount$1();
  useEffect(() => {
    if (address) {
      submit({ address }, { method: "put", action: "/resources/session" });
    } else {
      submit({}, { method: "delete", action: "/resources/session" });
    }
  }, [address, submit]);
  return /* @__PURE__ */ jsx(
    Context.Provider,
    {
      value: {
        isConnected,
        address,
        addressArg: address ?? "0x0"
      },
      children
    }
  );
};

const CHAIN_ID_TO_TROVE_API_URL = {
  [arbitrumSepolia.id]: "https://trove-api-dev.treasure.lol",
  [arbitrum.id]: "https://trove-api.treasure.lol"
};
const CHAIN_ID_TO_TROVE_API_NETWORK = {
  [arbitrumSepolia.id]: "arbsepolia",
  [arbitrum.id]: "arb"
};
const CHAIN_ID = Number(process.env.PUBLIC_CHAIN_ID);
const ENV = {
  NODE_ENV: process.env.NODE_ENV,
  PUBLIC_CHAIN_ID: CHAIN_ID,
  PUBLIC_DEFAULT_TOKEN_ADDRESS: TOKEN_METADATA[CHAIN_ID]?.[0].id,
  PUBLIC_THIRDWEB_CLIENT_ID: process.env.PUBLIC_THIRDWEB_CLIENT_ID,
  PUBLIC_WALLET_CONNECT_PROJECT_ID: process.env.PUBLIC_WALLET_CONNECT_PROJECT_ID,
  TROVE_API_URL: CHAIN_ID_TO_TROVE_API_URL[CHAIN_ID],
  TROVE_API_NETWORK: CHAIN_ID_TO_TROVE_API_NETWORK[CHAIN_ID],
  TROVE_API_KEY: process.env.TROVE_API_KEY
};

function getDomainUrl(request) {
  const host = request.headers.get("X-Forwarded-Host") ?? request.headers.get("host");
  if (!host) {
    throw new Error("Could not determine domain URL.");
  }
  const protocol = host.includes("localhost") ? "http" : "https";
  return `${protocol}://${host}`;
}
const generateUrl = (origin = "https://v2.magicswap.lol", path = "/") => origin + path;
function generateTitle(title) {
  return title ? `${title} | Magicswap` : "Magicswap";
}
function getSocialMetas({
  url,
  title = "Magicswap",
  description = "The gateway to the cross-game economy. Swap, pool, and earn tokens in the decentralized exchanged powered by Treasure and MAGIC.",
  keywords = "treasure, NFT, DeFi, games, community, imagination, magic",
  image
}) {
  return [
    { title },
    { name: "description", content: description },
    { name: "keywords", content: keywords },
    { name: "image", content: image },
    {
      name: "twitter:card",
      content: image ? "summary_large_image" : "summary"
    },
    { name: "twitter:creator", content: "@Treasure_DAO" },
    { name: "twitter:site", content: "@Treasure_DAO" },
    { name: "twitter:title", content: title },
    { name: "twitter:description", content: description },
    { name: "twitter:image", content: image },
    { name: "twitter:alt", content: title },
    { property: "og:url", content: url },
    { property: "og:title", content: title },
    { property: "og:description", content: description },
    { property: "og:image", content: image }
  ];
}

const DEFAULT_SLIPPAGE = 5e-3;
const useSettingsStore = create()(
  persist(
    (set) => ({
      slippage: DEFAULT_SLIPPAGE,
      deadline: 30,
      updateSlippage: (slippage) => set({ slippage }),
      updateDeadline: (deadline) => set({ deadline })
    }),
    {
      name: "settings",
      skipHydration: true
    }
  )
);

const renderToast = ({ title, description }) => /* @__PURE__ */ jsxs("div", { className: "text-honey-25 text-lg", children: [
  /* @__PURE__ */ jsx("p", { className: "font-medium", children: title }),
  description ? /* @__PURE__ */ jsx("p", { className: "text-night-100 text-sm", children: description }) : null
] });
const showSuccessToast = ({
  title,
  description,
  ...props
}) => toast.success(
  /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(CheckCircleIcon, { className: "h-5 w-5" }),
    renderToast({ title, description })
  ] }),
  props
);
const showErrorToast = ({
  title,
  description,
  ...props
}) => toast.error(
  /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(AlertCircleIcon, { className: "h-5 w-5" }),
    renderToast({ title, description })
  ] }),
  props
);
const showLoadingToast = ({
  title,
  description,
  ...props
}) => toast.loading(
  /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(LoaderIcon$1, { className: "h-6 w-6 animate-spin" }),
    renderToast({ title, description })
  ] }),
  props
);
const dismissToasts = () => toast.dismiss();
const Toaster = ({ ...props }) => {
  return /* @__PURE__ */ jsx(
    Toaster$1,
    {
      expand: true,
      className: "group",
      toastOptions: {
        unstyled: true,
        classNames: {
          toast: "w-full overflow-y-clip rounded-md rounded-md bg-background [box-shadow:0_4px_12px_#0000001a] text-sm flex items-center gap-2 p-4 before:content-[''] before:absolute before:inset-0 before:w-full before:h-full before:bg-gradient-to-r before:to-slate-800/30",
          loading: "before:from-primary/10 before:via-primary/5 before:rounded-md",
          success: "before:from-secondary/10 before:via-secondary/5 before:rounded-md",
          error: "before:from-error/10 before:via-error/5 before:rounded-md"
        }
      },
      ...props
    }
  );
};

const HappyContext = createContext({ user: void 0, initialized: false, sdk: null });
function HappyWalletProvider({ init, children }) {
  const [user, setUser] = useState();
  const [sdk, setSdk] = useState(null);
  useEffect(() => {
    if (typeof window !== "undefined") {
      import('./assets/index-DADZjG8M.js').then((loadedSdk) => {
        loadedSdk.register(init);
        loadedSdk.onUserUpdate(setUser);
        setSdk(loadedSdk);
      });
    }
  }, [init]);
  return /* @__PURE__ */ jsx(
    HappyContext.Provider,
    {
      value: {
        user,
        initialized: Boolean(sdk),
        sdk
      },
      children
    }
  );
}

let sdk = void 0;
if (typeof window !== "undefined") {
  sdk = import('./assets/index-DADZjG8M.js');
}
const chains = sdk ? (await sdk).chains : { devnet: {}, testnet: {}, defaultChain: {} };
const happyProvider = sdk ? (await sdk).happyProvider : void 0;
sdk ? (await sdk).onModalUpdate : () => {
};
sdk ? (await sdk).onUserUpdate : () => {
};
sdk ? (await sdk).getCurrentUser : () => void 0;
sdk ? (await sdk).connect : () => Promise.resolve();
sdk ? (await sdk).disconnect : () => Promise.resolve();

const happyConnector = injected({
  shimDisconnect: false,
  target() {
    return {
      id: "happyProvider",
      name: "HappyChain Provider",
      provider: happyProvider
    };
  }
});
const config = createConfig({
  chains: [chains.defaultChain],
  multiInjectedProviderDiscovery: true,
  connectors: [happyConnector],
  transports: {
    [chains.defaultChain.chaindId]: custom(happyProvider)
  }
});

const queryClient = new QueryClient();
const loader$c = async ({ request }) => {
  return json({
    requestInfo: {
      origin: getDomainUrl(request),
      path: new URL(request.url).pathname
    },
    env: {
      PUBLIC_CHAIN_ID: ENV.PUBLIC_CHAIN_ID,
      PUBLIC_THIRDWEB_CLIENT_ID: ENV.PUBLIC_THIRDWEB_CLIENT_ID,
      PUBLIC_WALLET_CONNECT_PROJECT_ID: ENV.PUBLIC_WALLET_CONNECT_PROJECT_ID
    }
  });
};
const shouldRevalidate$1 = () => {
  return false;
};
function App() {
  const transition = useNavigation();
  const fetchers = useFetchers();
  const state = useMemo(
    function getGlobalState() {
      const states = [
        transition.state,
        ...fetchers.map((fetcher) => fetcher.state)
      ];
      if (states.every((state2) => state2 === "idle")) return "idle";
      return "loading";
    },
    [transition.state, fetchers]
  );
  useEffect(() => {
    if (state === "loading") NProgress.start();
    if (state === "idle") NProgress.done();
  }, [state]);
  useEffect(() => {
    useSettingsStore.persist.rehydrate();
  }, []);
  return /* @__PURE__ */ jsxs("html", { lang: "en", className: "h-full", children: [
    /* @__PURE__ */ jsxs("head", { children: [
      /* @__PURE__ */ jsx("meta", { charSet: "utf-8" }),
      /* @__PURE__ */ jsx("meta", { name: "viewport", content: "width=device-width,initial-scale=1" }),
      /* @__PURE__ */ jsx(
        "link",
        {
          rel: "apple-touch-icon",
          sizes: "180x180",
          href: "/apple-touch-icon.png"
        }
      ),
      /* @__PURE__ */ jsx(
        "link",
        {
          rel: "icon",
          type: "image/png",
          sizes: "32x32",
          href: "/favicon-32x32.png"
        }
      ),
      /* @__PURE__ */ jsx(
        "link",
        {
          rel: "icon",
          type: "image/png",
          sizes: "16x16",
          href: "/favicon-16x16.png"
        }
      ),
      /* @__PURE__ */ jsx("link", { rel: "manifest", href: "/site.webmanifest" }),
      /* @__PURE__ */ jsx("link", { rel: "mask-icon", href: "/safari-pinned-tab.svg", color: "#5bbad5" }),
      /* @__PURE__ */ jsx("meta", { name: "msapplication-TileColor", content: "#00aba9" }),
      /* @__PURE__ */ jsx("meta", { name: "theme-color", content: "#ffffff" }),
      /* @__PURE__ */ jsx(Meta, {}),
      /* @__PURE__ */ jsx(Links, {})
    ] }),
    /* @__PURE__ */ jsxs("body", { className: "h-full antialiased", children: [
      /* @__PURE__ */ jsx(HappyWalletProvider, { children: /* @__PURE__ */ jsx(WagmiProvider, { config: config, children: /* @__PURE__ */ jsx(QueryClientProvider, { client: queryClient, children: /* @__PURE__ */ jsx(Layout, { children: /* @__PURE__ */ jsx(AccountProvider, { children: /* @__PURE__ */ jsx(Outlet, {}) }) }) }) }) }),
      /* @__PURE__ */ jsx(Scripts, {}),
      /* @__PURE__ */ jsx(ScrollRestoration, {}),
      /* @__PURE__ */ jsx(Toaster, {})
    ] })
  ] });
}

const route0 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: App,
  loader: loader$c,
  shouldRevalidate: shouldRevalidate$1
}, Symbol.toStringTag, { value: 'Module' }));

const erc1155Abi = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false }
    ],
    name: "ApprovalForAll"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Paused"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      }
    ],
    name: "RoleAdminChanged"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "RoleGranted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "RoleRevoked"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "ids",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      },
      {
        name: "values",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      }
    ],
    name: "TransferBatch"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "TransferSingle"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "value", internalType: "string", type: "string", indexed: false },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true }
    ],
    name: "URI"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Unpaused"
  },
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "MINTER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "PAUSER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" }
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "accounts", internalType: "address[]", type: "address[]" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" }
    ],
    name: "balanceOfBatch",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" }
    ],
    name: "burnBatch",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" }
    ],
    name: "getRoleMember",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" }
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" }
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" }
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "mintBatch",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "paused",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" }
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" }
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" }
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "uri",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  }
];
const erc20Abi = [
  {
    type: "event",
    inputs: [
      { name: "owner", type: "address", indexed: true },
      { name: "spender", type: "address", indexed: true },
      { name: "value", type: "uint256", indexed: false }
    ],
    name: "Approval"
  },
  {
    type: "event",
    inputs: [
      { name: "from", type: "address", indexed: true },
      { name: "to", type: "address", indexed: true },
      { name: "value", type: "uint256", indexed: false }
    ],
    name: "Transfer"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", type: "address" },
      { name: "spender", type: "address" }
    ],
    name: "allowance",
    outputs: [{ type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "spender", type: "address" },
      { name: "amount", type: "uint256" }
    ],
    name: "approve",
    outputs: [{ type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "account", type: "address" }],
    name: "balanceOf",
    outputs: [{ type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ type: "uint8" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "recipient", type: "address" },
      { name: "amount", type: "uint256" }
    ],
    name: "transfer",
    outputs: [{ type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "sender", type: "address" },
      { name: "recipient", type: "address" },
      { name: "amount", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [{ type: "bool" }],
    stateMutability: "nonpayable"
  }
];
const erc721Abi = [
  {
    type: "event",
    inputs: [
      { name: "owner", type: "address", indexed: true },
      { name: "spender", type: "address", indexed: true },
      { name: "tokenId", type: "uint256", indexed: true }
    ],
    name: "Approval"
  },
  {
    type: "event",
    inputs: [
      { name: "owner", type: "address", indexed: true },
      { name: "operator", type: "address", indexed: true },
      { name: "approved", type: "bool", indexed: false }
    ],
    name: "ApprovalForAll"
  },
  {
    type: "event",
    inputs: [
      { name: "from", type: "address", indexed: true },
      { name: "to", type: "address", indexed: true },
      { name: "tokenId", type: "uint256", indexed: true }
    ],
    name: "Transfer"
  },
  {
    type: "function",
    inputs: [
      { name: "spender", type: "address" },
      { name: "tokenId", type: "uint256" }
    ],
    name: "approve",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [{ name: "account", type: "address" }],
    name: "balanceOf",
    outputs: [{ type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", type: "uint256" }],
    name: "getApproved",
    outputs: [{ type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", type: "address" },
      { name: "operator", type: "address" }
    ],
    name: "isApprovedForAll",
    outputs: [{ type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "owner", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "from", type: "address" },
      { name: "to", type: "address" },
      { name: "tokenId", type: "uint256" }
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", type: "address" },
      { name: "to", type: "address" },
      { name: "id", type: "uint256" },
      { name: "data", type: "bytes" }
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "operator", type: "address" },
      { name: "approved", type: "bool" }
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "index", type: "uint256" }],
    name: "tokenByIndex",
    outputs: [{ type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", type: "address" },
      { name: "index", type: "uint256" }
    ],
    name: "tokenByIndex",
    outputs: [{ name: "tokenId", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "sender", type: "address" },
      { name: "recipient", type: "address" },
      { name: "tokeId", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "payable"
  }
];
const magicSwapV2RouterAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_factory", internalType: "address", type: "address" },
      { name: "_WETH", internalType: "address", type: "address" }
    ],
    stateMutability: "nonpayable"
  },
  { type: "error", inputs: [], name: "MagicSwapV2InvalidPath" },
  { type: "error", inputs: [], name: "MagicSwapV2WrongAmountADeposited" },
  { type: "error", inputs: [], name: "MagicSwapV2WrongAmountBDeposited" },
  { type: "error", inputs: [], name: "MagicSwapV2WrongAmountDeposited" },
  { type: "error", inputs: [], name: "MagicSwapV2WrongAmounts" },
  { type: "error", inputs: [], name: "UniswapV2RouterExcessiveInputAmount" },
  { type: "error", inputs: [], name: "UniswapV2RouterExpired" },
  { type: "error", inputs: [], name: "UniswapV2RouterInsufficientAAmount" },
  { type: "error", inputs: [], name: "UniswapV2RouterInsufficientBAmount" },
  {
    type: "error",
    inputs: [],
    name: "UniswapV2RouterInsufficientOutputAmount"
  },
  { type: "error", inputs: [], name: "UniswapV2RouterInvalidPath" },
  {
    type: "error",
    inputs: [],
    name: "UniswapV2RouterOnlyAcceptETHViaFallbackFromWETHContract"
  },
  { type: "error", inputs: [], name: "UnsupportedNft" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "pair",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "vault",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ],
        indexed: false
      }
    ],
    name: "NFTLiquidityAdded"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "pair",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "vault",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ],
        indexed: false
      }
    ],
    name: "NFTLiquidityRemoved"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "pair",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "vaultA",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ],
        indexed: false
      },
      {
        name: "vaultB",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ],
        indexed: false
      }
    ],
    name: "NFTNFTLiquidityAdded"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "pair",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "vaultA",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ],
        indexed: false
      },
      {
        name: "vaultB",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ],
        indexed: false
      }
    ],
    name: "NFTNFTLiquidityRemoved"
  },
  {
    type: "function",
    inputs: [],
    name: "BURN_ADDRESS",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "ONE",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "WETH",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenA", internalType: "address", type: "address" },
      { name: "tokenB", internalType: "address", type: "address" },
      { name: "amountADesired", internalType: "uint256", type: "uint256" },
      { name: "amountBDesired", internalType: "uint256", type: "uint256" },
      { name: "amountAMin", internalType: "uint256", type: "uint256" },
      { name: "amountBMin", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "addLiquidity",
    outputs: [
      { name: "amountA", internalType: "uint256", type: "uint256" },
      { name: "amountB", internalType: "uint256", type: "uint256" },
      { name: "liquidity", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "amountTokenDesired", internalType: "uint256", type: "uint256" },
      { name: "amountTokenMin", internalType: "uint256", type: "uint256" },
      { name: "amountETHMin", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "addLiquidityETH",
    outputs: [
      { name: "amountToken", internalType: "uint256", type: "uint256" },
      { name: "amountETH", internalType: "uint256", type: "uint256" },
      { name: "liquidity", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "_vault",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ]
      },
      { name: "_tokenB", internalType: "address", type: "address" },
      { name: "_amountBDesired", internalType: "uint256", type: "uint256" },
      { name: "_amountBMin", internalType: "uint256", type: "uint256" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "addLiquidityNFT",
    outputs: [
      { name: "amountA", internalType: "uint256", type: "uint256" },
      { name: "amountB", internalType: "uint256", type: "uint256" },
      { name: "lpAmount", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "_vault",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ]
      },
      { name: "_amountETHMin", internalType: "uint256", type: "uint256" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "addLiquidityNFTETH",
    outputs: [
      { name: "amountToken", internalType: "uint256", type: "uint256" },
      { name: "amountETH", internalType: "uint256", type: "uint256" },
      { name: "lpAmount", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "_vaultA",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ]
      },
      {
        name: "_vaultB",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ]
      },
      { name: "_amountAMin", internalType: "uint256", type: "uint256" },
      { name: "_amountBMin", internalType: "uint256", type: "uint256" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "addLiquidityNFTNFT",
    outputs: [
      { name: "amountA", internalType: "uint256", type: "uint256" },
      { name: "amountB", internalType: "uint256", type: "uint256" },
      { name: "lpAmount", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "_collection", internalType: "address[]", type: "address[]" },
      { name: "_tokenId", internalType: "uint256[]", type: "uint256[]" },
      { name: "_amount", internalType: "uint256[]", type: "uint256[]" },
      { name: "_vault", internalType: "contract INftVault", type: "address" },
      { name: "_to", internalType: "address", type: "address" }
    ],
    name: "depositVault",
    outputs: [
      { name: "amountMinted", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "amountOut", internalType: "uint256", type: "uint256" },
      { name: "reserveIn", internalType: "uint256", type: "uint256" },
      { name: "reserveOut", internalType: "uint256", type: "uint256" },
      { name: "pair", internalType: "address", type: "address" }
    ],
    name: "getAmountIn",
    outputs: [{ name: "amountIn", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "amountIn", internalType: "uint256", type: "uint256" },
      { name: "reserveIn", internalType: "uint256", type: "uint256" },
      { name: "reserveOut", internalType: "uint256", type: "uint256" },
      { name: "pair", internalType: "address", type: "address" }
    ],
    name: "getAmountOut",
    outputs: [{ name: "amountOut", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "amountOut", internalType: "uint256", type: "uint256" },
      { name: "path", internalType: "address[]", type: "address[]" }
    ],
    name: "getAmountsIn",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "amountIn", internalType: "uint256", type: "uint256" },
      { name: "path", internalType: "address[]", type: "address[]" }
    ],
    name: "getAmountsOut",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "amountA", internalType: "uint256", type: "uint256" },
      { name: "reserveA", internalType: "uint256", type: "uint256" },
      { name: "reserveB", internalType: "uint256", type: "uint256" }
    ],
    name: "quote",
    outputs: [{ name: "amountB", internalType: "uint256", type: "uint256" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenA", internalType: "address", type: "address" },
      { name: "tokenB", internalType: "address", type: "address" },
      { name: "liquidity", internalType: "uint256", type: "uint256" },
      { name: "amountAMin", internalType: "uint256", type: "uint256" },
      { name: "amountBMin", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "removeLiquidity",
    outputs: [
      { name: "amountA", internalType: "uint256", type: "uint256" },
      { name: "amountB", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "liquidity", internalType: "uint256", type: "uint256" },
      { name: "amountTokenMin", internalType: "uint256", type: "uint256" },
      { name: "amountETHMin", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "removeLiquidityETH",
    outputs: [
      { name: "amountToken", internalType: "uint256", type: "uint256" },
      { name: "amountETH", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "liquidity", internalType: "uint256", type: "uint256" },
      { name: "amountTokenMin", internalType: "uint256", type: "uint256" },
      { name: "amountETHMin", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "approveMax", internalType: "bool", type: "bool" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" }
    ],
    name: "removeLiquidityETHWithPermit",
    outputs: [
      { name: "amountToken", internalType: "uint256", type: "uint256" },
      { name: "amountETH", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "_vault",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ]
      },
      { name: "_tokenB", internalType: "address", type: "address" },
      { name: "_lpAmount", internalType: "uint256", type: "uint256" },
      { name: "_amountAMin", internalType: "uint256", type: "uint256" },
      { name: "_amountBMin", internalType: "uint256", type: "uint256" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" },
      { name: "_swapLeftover", internalType: "bool", type: "bool" }
    ],
    name: "removeLiquidityNFT",
    outputs: [
      { name: "amountA", internalType: "uint256", type: "uint256" },
      { name: "amountB", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "_vault",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ]
      },
      { name: "_lpAmount", internalType: "uint256", type: "uint256" },
      { name: "_amountTokenMin", internalType: "uint256", type: "uint256" },
      { name: "_amountETHMin", internalType: "uint256", type: "uint256" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" },
      { name: "_swapLeftover", internalType: "bool", type: "bool" }
    ],
    name: "removeLiquidityNFTETH",
    outputs: [
      { name: "amountToken", internalType: "uint256", type: "uint256" },
      { name: "amountETH", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "_vaultA",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ]
      },
      {
        name: "_vaultB",
        internalType: "struct IMagicSwapV2Router.NftVaultLiquidityData",
        type: "tuple",
        components: [
          {
            name: "token",
            internalType: "contract INftVault",
            type: "address"
          },
          { name: "collection", internalType: "address[]", type: "address[]" },
          { name: "tokenId", internalType: "uint256[]", type: "uint256[]" },
          { name: "amount", internalType: "uint256[]", type: "uint256[]" }
        ]
      },
      { name: "_lpAmount", internalType: "uint256", type: "uint256" },
      { name: "_amountAMin", internalType: "uint256", type: "uint256" },
      { name: "_amountBMin", internalType: "uint256", type: "uint256" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "removeLiquidityNFTNFT",
    outputs: [
      { name: "amountA", internalType: "uint256", type: "uint256" },
      { name: "amountB", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenA", internalType: "address", type: "address" },
      { name: "tokenB", internalType: "address", type: "address" },
      { name: "liquidity", internalType: "uint256", type: "uint256" },
      { name: "amountAMin", internalType: "uint256", type: "uint256" },
      { name: "amountBMin", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "approveMax", internalType: "bool", type: "bool" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" }
    ],
    name: "removeLiquidityWithPermit",
    outputs: [
      { name: "amountA", internalType: "uint256", type: "uint256" },
      { name: "amountB", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "amountOut", internalType: "uint256", type: "uint256" },
      { name: "path", internalType: "address[]", type: "address[]" },
      { name: "to", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "swapETHForExactTokens",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "_collection", internalType: "address[]", type: "address[]" },
      { name: "_tokenId", internalType: "uint256[]", type: "uint256[]" },
      { name: "_amount", internalType: "uint256[]", type: "uint256[]" },
      { name: "_path", internalType: "address[]", type: "address[]" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "swapETHForNft",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "amountOutMin", internalType: "uint256", type: "uint256" },
      { name: "path", internalType: "address[]", type: "address[]" },
      { name: "to", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "swapExactETHForTokens",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "amountIn", internalType: "uint256", type: "uint256" },
      { name: "amountOutMin", internalType: "uint256", type: "uint256" },
      { name: "path", internalType: "address[]", type: "address[]" },
      { name: "to", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "swapExactTokensForETH",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "amountIn", internalType: "uint256", type: "uint256" },
      { name: "amountOutMin", internalType: "uint256", type: "uint256" },
      { name: "path", internalType: "address[]", type: "address[]" },
      { name: "to", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "_collection", internalType: "address[]", type: "address[]" },
      { name: "_tokenId", internalType: "uint256[]", type: "uint256[]" },
      { name: "_amount", internalType: "uint256[]", type: "uint256[]" },
      { name: "_amountOutMin", internalType: "uint256", type: "uint256" },
      { name: "_path", internalType: "address[]", type: "address[]" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "swapNftForETH",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "_collectionIn", internalType: "address[]", type: "address[]" },
      { name: "_tokenIdIn", internalType: "uint256[]", type: "uint256[]" },
      { name: "_amountIn", internalType: "uint256[]", type: "uint256[]" },
      { name: "_collectionOut", internalType: "address[]", type: "address[]" },
      { name: "_tokenIdOut", internalType: "uint256[]", type: "uint256[]" },
      { name: "_amountOut", internalType: "uint256[]", type: "uint256[]" },
      { name: "_path", internalType: "address[]", type: "address[]" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "swapNftForNft",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "_collection", internalType: "address[]", type: "address[]" },
      { name: "_tokenId", internalType: "uint256[]", type: "uint256[]" },
      { name: "_amount", internalType: "uint256[]", type: "uint256[]" },
      { name: "_amountOutMin", internalType: "uint256", type: "uint256" },
      { name: "_path", internalType: "address[]", type: "address[]" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "swapNftForTokens",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "amountOut", internalType: "uint256", type: "uint256" },
      { name: "amountInMax", internalType: "uint256", type: "uint256" },
      { name: "path", internalType: "address[]", type: "address[]" },
      { name: "to", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "swapTokensForExactETH",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "amountOut", internalType: "uint256", type: "uint256" },
      { name: "amountInMax", internalType: "uint256", type: "uint256" },
      { name: "path", internalType: "address[]", type: "address[]" },
      { name: "to", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "_collection", internalType: "address[]", type: "address[]" },
      { name: "_tokenId", internalType: "uint256[]", type: "uint256[]" },
      { name: "_amount", internalType: "uint256[]", type: "uint256[]" },
      { name: "_amountInMax", internalType: "uint256", type: "uint256" },
      { name: "_path", internalType: "address[]", type: "address[]" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "swapTokensForNft",
    outputs: [
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "_collection", internalType: "address[]", type: "address[]" },
      { name: "_tokenId", internalType: "uint256[]", type: "uint256[]" },
      { name: "_amount", internalType: "uint256[]", type: "uint256[]" },
      { name: "_vault", internalType: "contract INftVault", type: "address" },
      { name: "_to", internalType: "address", type: "address" }
    ],
    name: "withdrawVault",
    outputs: [
      { name: "amountBurned", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  { type: "receive", stateMutability: "payable" }
];
const uniswapV2PairAbi = [
  { type: "constructor", inputs: [], stateMutability: "nonpayable" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Approval"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount0",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amount1",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "to", internalType: "address", type: "address", indexed: true }
    ],
    name: "Burn"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "observationCardinalityNextOld",
        internalType: "uint16",
        type: "uint16",
        indexed: false
      },
      {
        name: "observationCardinalityNextNew",
        internalType: "uint16",
        type: "uint16",
        indexed: false
      }
    ],
    name: "IncreaseObservationCardinalityNext"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount0",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amount1",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Mint"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount0In",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amount1In",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amount0Out",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amount1Out",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "to", internalType: "address", type: "address", indexed: true }
    ],
    name: "Swap"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve0",
        internalType: "uint112",
        type: "uint112",
        indexed: false
      },
      {
        name: "reserve1",
        internalType: "uint112",
        type: "uint112",
        indexed: false
      }
    ],
    name: "Sync"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Transfer"
  },
  {
    type: "function",
    inputs: [],
    name: "BASIS_POINTS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "MINIMUM_LIQUIDITY",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "TOKEN0_DECIMALS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" }
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "to", internalType: "address", type: "address" }],
    name: "burn",
    outputs: [
      { name: "amount0", internalType: "uint256", type: "uint256" },
      { name: "amount1", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "getReserves",
    outputs: [
      { name: "_reserve0", internalType: "uint112", type: "uint112" },
      { name: "_reserve1", internalType: "uint112", type: "uint112" },
      { name: "_blockTimestampLast", internalType: "uint32", type: "uint32" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "_observationCardinalityNext",
        internalType: "uint16",
        type: "uint16"
      }
    ],
    name: "increaseObservationCardinalityNext",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "_token0", internalType: "address", type: "address" },
      { name: "_token1", internalType: "address", type: "address" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "lastPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "to", internalType: "address", type: "address" }],
    name: "mint",
    outputs: [{ name: "liquidity", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "observationCardinality",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "observationCardinalityNext",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "observationIndex",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "observations",
    outputs: [
      { name: "blockTimestamp", internalType: "uint32", type: "uint32" },
      { name: "priceCumulative", internalType: "uint256", type: "uint256" },
      { name: "initialized", internalType: "bool", type: "bool" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "secondsAgos", internalType: "uint32[]", type: "uint32[]" }
    ],
    name: "observe",
    outputs: [
      {
        name: "priceCumulatives",
        internalType: "uint256[]",
        type: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" }
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "to", internalType: "address", type: "address" }],
    name: "skim",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "amount0Out", internalType: "uint256", type: "uint256" },
      { name: "amount1Out", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
      { name: "", internalType: "bytes", type: "bytes" }
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "sync",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "token0",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "token1",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  }
];
const useReadErc1155IsApprovedForAll = /* @__PURE__ */ createUseReadContract({
  abi: erc1155Abi,
  functionName: "isApprovedForAll"
});
const useWriteErc1155SetApprovalForAll = /* @__PURE__ */ createUseWriteContract({
  abi: erc1155Abi,
  functionName: "setApprovalForAll"
});
const useReadErc20Allowance = /* @__PURE__ */ createUseReadContract({
  abi: erc20Abi,
  functionName: "allowance"
});
const useReadErc20BalanceOf = /* @__PURE__ */ createUseReadContract({
  abi: erc20Abi,
  functionName: "balanceOf"
});
const useWriteErc20Approve = /* @__PURE__ */ createUseWriteContract({
  abi: erc20Abi,
  functionName: "approve"
});
const useReadErc721IsApprovedForAll = /* @__PURE__ */ createUseReadContract({
  abi: erc721Abi,
  functionName: "isApprovedForAll"
});
const useWriteErc721SetApprovalForAll = /* @__PURE__ */ createUseWriteContract({
  abi: erc721Abi,
  functionName: "setApprovalForAll"
});
const useWriteMagicSwapV2RouterAddLiquidity = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "addLiquidity"
});
const useWriteMagicSwapV2RouterAddLiquidityEth = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "addLiquidityETH"
});
const useWriteMagicSwapV2RouterAddLiquidityNft = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "addLiquidityNFT"
});
const useWriteMagicSwapV2RouterAddLiquidityNfteth = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "addLiquidityNFTETH"
});
const useWriteMagicSwapV2RouterAddLiquidityNftnft = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "addLiquidityNFTNFT"
});
const useWriteMagicSwapV2RouterRemoveLiquidity = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "removeLiquidity"
});
const useWriteMagicSwapV2RouterRemoveLiquidityEth = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "removeLiquidityETH"
});
const useWriteMagicSwapV2RouterRemoveLiquidityNft = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "removeLiquidityNFT"
});
const useWriteMagicSwapV2RouterRemoveLiquidityNfteth = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "removeLiquidityNFTETH"
});
const useWriteMagicSwapV2RouterRemoveLiquidityNftnft = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "removeLiquidityNFTNFT"
});
const useWriteMagicSwapV2RouterSwapEthForExactTokens = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "swapETHForExactTokens"
});
const useWriteMagicSwapV2RouterSwapEthForNft = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "swapETHForNft"
});
const useWriteMagicSwapV2RouterSwapExactEthForTokens = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "swapExactETHForTokens"
});
const useWriteMagicSwapV2RouterSwapExactTokensForEth = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "swapExactTokensForETH"
});
const useWriteMagicSwapV2RouterSwapExactTokensForTokens = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "swapExactTokensForTokens"
});
const useWriteMagicSwapV2RouterSwapNftForEth = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "swapNftForETH"
});
const useWriteMagicSwapV2RouterSwapNftForNft = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "swapNftForNft"
});
const useWriteMagicSwapV2RouterSwapNftForTokens = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "swapNftForTokens"
});
const useWriteMagicSwapV2RouterSwapTokensForExactEth = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "swapTokensForExactETH"
});
const useWriteMagicSwapV2RouterSwapTokensForExactTokens = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "swapTokensForExactTokens"
});
const useWriteMagicSwapV2RouterSwapTokensForNft = /* @__PURE__ */ createUseWriteContract({
  abi: magicSwapV2RouterAbi,
  functionName: "swapTokensForNft"
});

const client = createPublicClient({
  chain: ENV.PUBLIC_CHAIN_ID === arbitrumSepolia.id ? arbitrumSepolia : arbitrum,
  transport: http(
    `https://${ENV.PUBLIC_CHAIN_ID}.rpc.thirdweb.com/${ENV.PUBLIC_THIRDWEB_CLIENT_ID}`
  )
});

const getOneDayAgoTimestamp = () => dayjs().startOf("day").subtract(24, "hour").unix();
const getOneWeekAgoTimestamp = () => dayjs().startOf("day").subtract(7, "day").unix();

const SECONDS_PER_YEAR = 365.2425 * 86400;
const BLOCKS_IN_A_YEAR = SECONDS_PER_YEAR / 13.25;
const aprToApy = (apr, frequency = BLOCKS_IN_A_YEAR) => ((1 + apr / 100 / frequency) ** frequency - 1) * 100;

const formatNumber = (value, options) => (typeof value === "string" ? Number.parseFloat(value) : value).toLocaleString(
  "en-US",
  options
);
const formatPercent = (percentage, maximumFractionDigits = 2) => {
  const number = (typeof percentage === "string" ? Number.parseFloat(percentage) : percentage) * 100;
  return `${formatNumber(number, {
    minimumFractionDigits: 0,
    maximumFractionDigits
  })}%`;
};
const floorBigInt = (value, decimals = 18) => parseUnits(
  Math.floor(Number(formatUnits(value, decimals))).toString(),
  decimals
);
const ceilBigInt = (value, decimals = 18) => parseUnits(
  Math.ceil(Number(formatUnits(value, decimals))).toString(),
  decimals
);
const bigIntToNumber = (value, decimals = 18) => Number(formatUnits(value, decimals));

const truncateRegex = /^(0x[a-zA-Z0-9]{4})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/;
const truncateEthAddress = (address) => {
  const match = address.match(truncateRegex);
  if (!match) return address;
  return `${match[1]}…${match[2]}`;
};

const createPoolTokenCollection = (collection, tokenIds, collectionMapping) => {
  const {
    urlSlug = "",
    displayName: name = truncateEthAddress(collection.id),
    symbol = "?",
    contractType: type = "ERC721",
    thumbnailUri: image = ""
  } = collectionMapping[collection.id] ?? {};
  return {
    id: collection.id,
    urlSlug,
    tokenIds,
    name,
    symbol,
    type,
    image
  };
};

const itemToTroveTokenItem = ({ collection: { id: collectionId }, tokenId, amount }, tokens) => {
  const tokenDetails = tokens[collectionId]?.[tokenId];
  return {
    collectionId,
    tokenId,
    amount,
    name: tokenDetails?.metadata.name ?? "",
    image: tokenDetails?.image.uri ?? "",
    attributes: (tokenDetails?.metadata?.attributes || []).map(
      ({ value, trait_type: traitType, display_type: displayType = null }) => ({
        value,
        traitType,
        displayType
      })
    )
  };
};
const createTokenMetadata = (token, collectionMapping, tokenMapping) => {
  const metadata = TOKEN_METADATA[ENV.PUBLIC_CHAIN_ID].find(
    ({ id }) => id.toLowerCase() === token.id.toLowerCase()
  );
  if (metadata) {
    return metadata;
  }
  if (token.isNFT) {
    const vaultCollectionAddresses = token.vaultCollections.map(
      ({ collection: { id } }) => id
    );
    const vaultTokenIds = token.vaultCollections.flatMap(
      ({ tokenIds }) => tokenIds ?? []
    );
    const vaultCollection = vaultCollectionAddresses[0] ? collectionMapping[vaultCollectionAddresses[0]] : void 0;
    const vaultToken = vaultCollectionAddresses[0] && vaultTokenIds[0] ? tokenMapping[vaultCollectionAddresses[0]]?.[vaultTokenIds[0]] : void 0;
    if (vaultCollectionAddresses.length === 1 && vaultTokenIds.length === 1 && vaultToken) {
      return {
        name: vaultToken.metadata.name,
        symbol: vaultToken.metadata.name,
        image: vaultToken.image.uri
      };
    }
    if (vaultCollectionAddresses.length > 0 && vaultTokenIds.length > 1 && vaultToken) {
      const type = vaultToken?.metadata.attributes.find(
        ({ trait_type }) => trait_type.toLowerCase() === "type"
      )?.value;
      if (type) {
        const name2 = `${type}s`;
        return {
          name: name2,
          symbol: name2,
          image: vaultToken.image.uri
        };
      }
    }
    const name = vaultCollectionAddresses.map(
      (address) => collectionMapping[address]?.displayName ?? truncateEthAddress(address)
    ).join(" & ");
    return {
      name,
      symbol: name,
      image: vaultCollection?.thumbnailUri
    };
  }
  return {
    name: token.name,
    symbol: token.symbol.toUpperCase(),
    image: void 0
  };
};
const createPoolToken = (token, collectionMapping, tokenMapping, magicUSD) => {
  const tokenCollections = token.vaultCollections.map(
    ({ collection, tokenIds }) => createPoolTokenCollection(collection, tokenIds ?? [], collectionMapping)
  ) ?? [];
  const metadata = createTokenMetadata(token, collectionMapping, tokenMapping);
  return {
    ...token,
    ...tokenCollections[0]?.type ? {
      type: tokenCollections[0]?.type
    } : {},
    ...metadata,
    decimals: Number(token.decimals),
    collections: tokenCollections,
    urlSlug: tokenCollections[0]?.urlSlug ?? "",
    collectionId: tokenCollections[0]?.id ?? "",
    collectionTokenIds: tokenCollections[0]?.tokenIds ?? [],
    priceUSD: Number(token.derivedMAGIC) * magicUSD,
    reserve: "0"
  };
};

const createPoolFromPair = (pair, collectionMapping, tokenMapping, magicUSD, reserves) => {
  const token0 = {
    ...createPoolToken(pair.token0, collectionMapping, tokenMapping, magicUSD),
    reserve: (reserves?.[0] ?? parseUnits(pair.reserve0, Number(pair.token0.decimals))).toString()
  };
  const token1 = {
    ...createPoolToken(pair.token1, collectionMapping, tokenMapping, magicUSD),
    reserve: (reserves?.[1] ?? parseUnits(pair.reserve1, Number(pair.token1.decimals))).toString()
  };
  const isNFTNFT = token0.isNFT && token1.isNFT;
  const collections = [token0.collections, token1.collections].flat();
  const reserveUSD = Number(pair.reserveUSD);
  const volume1wUSD = pair.dayData?.reduce(
    (total, { volumeUSD }) => total + Number(volumeUSD),
    0
  ) ?? 0;
  const volume1w0 = pair.dayData?.reduce((total, { volume0 }) => total + Number(volume0), 0) ?? 0;
  const volume1w1 = pair.dayData?.reduce((total, { volume1 }) => total + Number(volume1), 0) ?? 0;
  const volume1w = isNFTNFT || !token0.isNFT ? volume1w0 : volume1w1;
  const aprReserve = isNFTNFT || !token0.isNFT ? bigIntToNumber(BigInt(token0.reserve)) : bigIntToNumber(BigInt(token1.reserve));
  const apr = aprReserve > 0 ? volume1w / 7 * 365 * Number(pair.lpFee) / aprReserve : 0;
  return {
    ...pair,
    name: token0.isNFT && !token1.isNFT || token1.isMAGIC ? `${token1.symbol} / ${token0.symbol}` : `${token0.symbol} / ${token1.symbol}`,
    token0,
    token1,
    hasNFT: token0.isNFT || token1.isNFT,
    isNFTNFT,
    collections: collections.filter(
      (value, index, self) => index === self.findIndex((t) => t.id.toLowerCase() === value.id.toLowerCase())
    ),
    reserveUSD,
    volume0: Number(pair.volume0),
    volume1: Number(pair.volume1),
    volumeUSD: Number(pair.volumeUSD),
    volume24h0: pair.hourData?.reduce(
      (total, { volume0 }) => total + Number(volume0),
      0
    ) ?? 0,
    volume24h1: pair.hourData?.reduce(
      (total, { volume1 }) => total + Number(volume1),
      0
    ) ?? 0,
    volume24hUSD: pair.hourData?.reduce(
      (total, { volumeUSD }) => total + Number(volumeUSD),
      0
    ) ?? 0,
    volume1wUSD,
    apy: aprToApy(apr)
  };
};

const schemaAST = {
  "kind": "Document",
  "definitions": [
    {
      "kind": "SchemaDefinition",
      "operationTypes": [
        {
          "kind": "OperationTypeDefinition",
          "operation": "query",
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Query"
            }
          }
        },
        {
          "kind": "OperationTypeDefinition",
          "operation": "subscription",
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Subscription"
            }
          }
        }
      ],
      "directives": []
    },
    {
      "kind": "DirectiveDefinition",
      "description": {
        "kind": "StringValue",
        "value": "Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.",
        "block": true
      },
      "name": {
        "kind": "Name",
        "value": "entity"
      },
      "arguments": [],
      "repeatable": false,
      "locations": [
        {
          "kind": "Name",
          "value": "OBJECT"
        }
      ]
    },
    {
      "kind": "DirectiveDefinition",
      "description": {
        "kind": "StringValue",
        "value": "Defined a Subgraph ID for an object type",
        "block": true
      },
      "name": {
        "kind": "Name",
        "value": "subgraphId"
      },
      "arguments": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "String"
              }
            }
          },
          "directives": []
        }
      ],
      "repeatable": false,
      "locations": [
        {
          "kind": "Name",
          "value": "OBJECT"
        }
      ]
    },
    {
      "kind": "DirectiveDefinition",
      "description": {
        "kind": "StringValue",
        "value": "creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.",
        "block": true
      },
      "name": {
        "kind": "Name",
        "value": "derivedFrom"
      },
      "arguments": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "field"
          },
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "String"
              }
            }
          },
          "directives": []
        }
      ],
      "repeatable": false,
      "locations": [
        {
          "kind": "Name",
          "value": "FIELD_DEFINITION"
        }
      ]
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Aggregation_interval"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hour"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "day"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "ScalarTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "BigDecimal"
      },
      "directives": []
    },
    {
      "kind": "ScalarTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "BigInt"
      },
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "BlockChangedFilter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "number_gte"
          },
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Int"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Block_height"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hash"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "number"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "number_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "ScalarTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Bytes"
      },
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Collection"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "type"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "NftType"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultCollections"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultCollection_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultCollection_filter"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "VaultCollection"
                  }
                }
              }
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Collection_filter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "type"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "NftType"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "type_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "NftType"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "type_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "NftType"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "type_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "NftType"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultCollections_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "VaultCollection_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Filter for the block changed event.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_change_block"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BlockChangedFilter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "and"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Collection_filter"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "or"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Collection_filter"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Collection_orderBy"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "type"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultCollections"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "DayData"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "date"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "DayData_filter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Filter for the block changed event.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_change_block"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BlockChangedFilter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "and"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "DayData_filter"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "or"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "DayData_filter"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "DayData_orderBy"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Factory"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "pairCount"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "userCount"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "magicUSD"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFeeBeneficiary"
          },
          "arguments": [],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Factory_filter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pairCount"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pairCount_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pairCount_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pairCount_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pairCount_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pairCount_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pairCount_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pairCount_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "userCount"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "userCount_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "userCount_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "userCount_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "userCount_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "userCount_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "userCount_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "userCount_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicUSD"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicUSD_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicUSD_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicUSD_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicUSD_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicUSD_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicUSD_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicUSD_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFeeBeneficiary"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFeeBeneficiary_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFeeBeneficiary_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFeeBeneficiary_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFeeBeneficiary_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFeeBeneficiary_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFeeBeneficiary_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFeeBeneficiary_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFeeBeneficiary_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFeeBeneficiary_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Filter for the block changed event.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_change_block"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BlockChangedFilter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "and"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Factory_filter"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "or"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Factory_filter"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Factory_orderBy"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pairCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveNFT"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "userCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFeeBeneficiary"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "ScalarTypeDefinition",
      "description": {
        "kind": "StringValue",
        "value": "8 bytes signed integer\n",
        "block": true
      },
      "name": {
        "kind": "Name",
        "value": "Int8"
      },
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "LiquidityPosition"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "pair"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Pair"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "user"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "User"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "balance"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "LiquidityPosition_filter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Pair_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "User_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "balance"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "balance_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "balance_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "balance_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "balance_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "balance_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "balance_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "balance_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Filter for the block changed event.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_change_block"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BlockChangedFilter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "and"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "LiquidityPosition_filter"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "or"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "LiquidityPosition_filter"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "LiquidityPosition_orderBy"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__reserve0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__reserve1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__reserveUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__totalSupply"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__volume0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__volume1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__txCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__lpFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__protocolFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__royaltiesFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__royaltiesBeneficiary"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__totalFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user__liquidityPositionCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "balance"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "NftType"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "ERC721"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "ERC1155"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "description": {
        "kind": "StringValue",
        "value": "Defines the order direction, either ascending or descending",
        "block": true
      },
      "name": {
        "kind": "Name",
        "value": "OrderDirection"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "asc"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "desc"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Pair"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "token0"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Token"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "token1"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Token"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesFee"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesBeneficiary"
          },
          "arguments": [],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "totalFee"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "transactions"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Transaction_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Transaction_filter"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Transaction"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositions"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "LiquidityPosition_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "LiquidityPosition_filter"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "LiquidityPosition"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "dayData"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PairDayData_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PairDayData_filter"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PairDayData"
                  }
                }
              }
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "PairDayData"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "pair"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Pair"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "date"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "PairDayData_filter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Pair_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Filter for the block changed event.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_change_block"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BlockChangedFilter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "and"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "PairDayData_filter"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "or"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "PairDayData_filter"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "PairDayData_orderBy"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__reserve0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__reserve1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__reserveUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__totalSupply"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__volume0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__volume1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__txCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__lpFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__protocolFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__royaltiesFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__royaltiesBeneficiary"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__totalFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "date"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Pair_filter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Token_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Token_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesFee"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesFee_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesFee_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesFee_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesFee_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesFee_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesFee_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesFee_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesBeneficiary"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesBeneficiary_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesBeneficiary_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesBeneficiary_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesBeneficiary_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesBeneficiary_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesBeneficiary_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesBeneficiary_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesBeneficiary_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesBeneficiary_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalFee"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalFee_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalFee_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalFee_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalFee_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalFee_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalFee_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalFee_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transactions_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Transaction_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositions_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "LiquidityPosition_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "dayData_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "PairDayData_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Filter for the block changed event.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_change_block"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BlockChangedFilter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "and"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Pair_filter"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "or"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Pair_filter"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Pair_orderBy"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__name"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__symbol"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__totalSupply"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__decimals"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__decimalDivisor"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__isNFT"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__isMAGIC"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__isETH"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__volume"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__txCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token0__derivedMAGIC"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__name"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__symbol"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__totalSupply"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__decimals"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__decimalDivisor"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__isNFT"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__isMAGIC"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__isETH"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__volume"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__txCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "token1__derivedMAGIC"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserve1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "reserveUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "lpFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "protocolFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "royaltiesBeneficiary"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transactions"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositions"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "dayData"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Query"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "factory"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Factory"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "factories"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Factory_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Factory_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Factory"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "dayData"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "DayData"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "dayDatas"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "DayData_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "DayData_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "DayData"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "collection"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Collection"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "collections"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Collection_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Collection_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Collection"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultCollection"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "VaultCollection"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultCollections"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultCollection_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultCollection_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "VaultCollection"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "token"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Token"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "tokens"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Token_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Token_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Token"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultReserveItem"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "VaultReserveItem"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultReserveItems"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultReserveItem_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultReserveItem_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "VaultReserveItem"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "pair"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Pair"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "pairs"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Pair_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Pair_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Pair"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "pairDayData"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "PairDayData"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "pairDayDatas"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PairDayData_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PairDayData_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PairDayData"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "user"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "User"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "users"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "User_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "User_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "User"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPosition"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "LiquidityPosition"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositions"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "LiquidityPosition_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "LiquidityPosition_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "LiquidityPosition"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Transaction"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "transactions"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Transaction_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Transaction_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Transaction"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "transactionItem"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "TransactionItem"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "transactionItems"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "TransactionItem_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "TransactionItem_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "TransactionItem"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Access to subgraph metadata",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_meta"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "_Meta_"
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Subscription"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "factory"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Factory"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "factories"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Factory_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Factory_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Factory"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "dayData"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "DayData"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "dayDatas"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "DayData_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "DayData_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "DayData"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "collection"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Collection"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "collections"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Collection_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Collection_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Collection"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultCollection"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "VaultCollection"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultCollections"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultCollection_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultCollection_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "VaultCollection"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "token"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Token"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "tokens"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Token_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Token_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Token"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultReserveItem"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "VaultReserveItem"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultReserveItems"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultReserveItem_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultReserveItem_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "VaultReserveItem"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "pair"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Pair"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "pairs"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Pair_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Pair_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Pair"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "pairDayData"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "PairDayData"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "pairDayDatas"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PairDayData_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PairDayData_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PairDayData"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "user"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "User"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "users"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "User_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "User_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "User"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPosition"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "LiquidityPosition"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositions"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "LiquidityPosition_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "LiquidityPosition_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "LiquidityPosition"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Transaction"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "transactions"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Transaction_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Transaction_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Transaction"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "transactionItem"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "TransactionItem"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "transactionItems"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "TransactionItem_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "TransactionItem_filter"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "subgraphError"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_SubgraphErrorPolicy_"
                  }
                }
              },
              "defaultValue": {
                "kind": "EnumValue",
                "value": "deny"
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "TransactionItem"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Access to subgraph metadata",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_meta"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "block"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Block_height"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "_Meta_"
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "ScalarTypeDefinition",
      "description": {
        "kind": "StringValue",
        "value": "A string representation of microseconds UNIX timestamp (16 digits)\n",
        "block": true
      },
      "name": {
        "kind": "Name",
        "value": "Timestamp"
      },
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Token"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "name"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "String"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "String"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "decimals"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "decimalDivisor"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "isNFT"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Boolean"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "isMAGIC"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Boolean"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "isETH"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Boolean"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultCollections"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultCollection_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultCollection_filter"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "VaultCollection"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultReserveItems"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultReserveItem_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VaultReserveItem_filter"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "VaultReserveItem"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "magicPairs"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Pair_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Pair_filter"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Pair"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "basePairs"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Pair_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Pair_filter"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Pair"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "quotePairs"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Pair_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Pair_filter"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Pair"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "volume"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "derivedMAGIC"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Token_filter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimals"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimals_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimals_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimals_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimals_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimals_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimals_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimals_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimalDivisor"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimalDivisor_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimalDivisor_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimalDivisor_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimalDivisor_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimalDivisor_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimalDivisor_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimalDivisor_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isNFT"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Boolean"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isNFT_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Boolean"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isNFT_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Boolean"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isNFT_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Boolean"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isMAGIC"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Boolean"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isMAGIC_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Boolean"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isMAGIC_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Boolean"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isMAGIC_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Boolean"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isETH"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Boolean"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isETH_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Boolean"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isETH_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Boolean"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isETH_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Boolean"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultCollections_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "VaultCollection_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultReserveItems_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "VaultReserveItem_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicPairs"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicPairs_not"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicPairs_contains"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicPairs_contains_nocase"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicPairs_not_contains"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicPairs_not_contains_nocase"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicPairs_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Pair_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "basePairs_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Pair_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "quotePairs_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Pair_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "derivedMAGIC"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "derivedMAGIC_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "derivedMAGIC_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "derivedMAGIC_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "derivedMAGIC_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "derivedMAGIC_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "derivedMAGIC_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "derivedMAGIC_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Filter for the block changed event.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_change_block"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BlockChangedFilter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "and"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Token_filter"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "or"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Token_filter"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Token_orderBy"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "name"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "symbol"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "totalSupply"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimals"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "decimalDivisor"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isNFT"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isMAGIC"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isETH"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultCollections"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vaultReserveItems"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "magicPairs"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "basePairs"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "quotePairs"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volume"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "txCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "derivedMAGIC"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Transaction"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "hash"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "timestamp"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "type"
          },
          "arguments": [],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "TransactionType"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "user"
          },
          "arguments": [],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "User"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "pair"
          },
          "arguments": [],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Pair"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "amount0"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "amount1"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "amountUSD"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigDecimal"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "isAmount1Out"
          },
          "arguments": [],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Boolean"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "items"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "TransactionItem_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "TransactionItem_filter"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "TransactionItem"
                  }
                }
              }
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "TransactionItem"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Transaction"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vault"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Token"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "collection"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Collection"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "amount"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Int"
              }
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "TransactionItem_filter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Transaction_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Token_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Collection_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Filter for the block changed event.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_change_block"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BlockChangedFilter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "and"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "TransactionItem_filter"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "or"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "TransactionItem_filter"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "TransactionItem_orderBy"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction__hash"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction__timestamp"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction__type"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction__amount0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction__amount1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction__amountUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transaction__isAmount1Out"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__name"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__symbol"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__totalSupply"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__decimals"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__decimalDivisor"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__isNFT"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__isMAGIC"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__isETH"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__volume"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__txCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__derivedMAGIC"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection__type"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "TransactionType"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "Swap"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "Deposit"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "Withdrawal"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Transaction_filter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hash"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hash_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hash_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hash_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hash_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hash_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hash_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hash_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hash_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hash_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "timestamp"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "timestamp_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "timestamp_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "timestamp_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "timestamp_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "timestamp_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "timestamp_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "timestamp_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "type"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "TransactionType"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "type_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "TransactionType"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "type_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "TransactionType"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "type_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "TransactionType"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "User_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Pair_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount0"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount0_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount0_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount0_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount0_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount0_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount0_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount0_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount1"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount1_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount1_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount1_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount1_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount1_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount1_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount1_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amountUSD"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amountUSD_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amountUSD_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amountUSD_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amountUSD_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amountUSD_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigDecimal"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amountUSD_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amountUSD_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigDecimal"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isAmount1Out"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Boolean"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isAmount1Out_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Boolean"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isAmount1Out_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Boolean"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isAmount1Out_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Boolean"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "items_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "TransactionItem_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Filter for the block changed event.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_change_block"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BlockChangedFilter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "and"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Transaction_filter"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "or"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Transaction_filter"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "Transaction_orderBy"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "hash"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "timestamp"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "type"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "user__liquidityPositionCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__reserve0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__reserve1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__reserveUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__totalSupply"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__volume0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__volume1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__txCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__lpFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__protocolFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__royaltiesFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__royaltiesBeneficiary"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "pair__totalFee"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount0"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount1"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amountUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "isAmount1Out"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "items"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "User"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositionCount"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "transactions"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Transaction_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Transaction_filter"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Transaction"
                  }
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositions"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "skip"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "0"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "first"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "defaultValue": {
                "kind": "IntValue",
                "value": "100"
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderBy"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "LiquidityPosition_orderBy"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "orderDirection"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "OrderDirection"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "where"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "LiquidityPosition_filter"
                }
              },
              "directives": []
            }
          ],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "ListType",
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "LiquidityPosition"
                  }
                }
              }
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "User_filter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositionCount"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositionCount_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositionCount_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositionCount_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositionCount_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositionCount_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositionCount_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositionCount_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transactions_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Transaction_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositions_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "LiquidityPosition_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Filter for the block changed event.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_change_block"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BlockChangedFilter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "and"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "User_filter"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "or"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "User_filter"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "User_orderBy"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositionCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "transactions"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "liquidityPositions"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "VaultCollection"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vault"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Token"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "collection"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Collection"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenIds"
          },
          "arguments": [],
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "VaultCollection_filter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Token_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Collection_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenIds"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenIds_not"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenIds_contains"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenIds_contains_nocase"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenIds_not_contains"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenIds_not_contains_nocase"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Filter for the block changed event.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_change_block"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BlockChangedFilter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "and"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "VaultCollection_filter"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "or"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "VaultCollection_filter"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "VaultCollection_orderBy"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__name"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__symbol"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__totalSupply"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__decimals"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__decimalDivisor"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__isNFT"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__isMAGIC"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__isETH"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__volume"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__txCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__derivedMAGIC"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection__type"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenIds"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "VaultReserveItem"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Bytes"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "vault"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Token"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "collection"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Collection"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "BigInt"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "name": {
            "kind": "Name",
            "value": "amount"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Int"
              }
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "InputObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "VaultReserveItem_filter"
      },
      "fields": [
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Bytes"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Token_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_contains"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_contains_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_starts_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_starts_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_ends_with"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_not_ends_with_nocase"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "String"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection_"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Collection_filter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BigInt"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "BigInt"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_not"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_gt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_lt"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_gte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_lte"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount_not_in"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NonNullType",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Filter for the block changed event.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "_change_block"
          },
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "BlockChangedFilter"
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "and"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "VaultReserveItem_filter"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "InputValueDefinition",
          "name": {
            "kind": "Name",
            "value": "or"
          },
          "type": {
            "kind": "ListType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "VaultReserveItem_filter"
              }
            }
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "VaultReserveItem_orderBy"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__name"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__symbol"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__totalSupply"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__decimals"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__decimalDivisor"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__isNFT"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__isMAGIC"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__isETH"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__volume"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__volumeUSD"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__txCount"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "vault__derivedMAGIC"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection__id"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "collection__type"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "tokenId"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "name": {
            "kind": "Name",
            "value": "amount"
          },
          "directives": []
        }
      ],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "_Block_"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "description": {
            "kind": "StringValue",
            "value": "The hash of the block",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "hash"
          },
          "arguments": [],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "description": {
            "kind": "StringValue",
            "value": "The block number",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "number"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Int"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Integer representation of the timestamp stored in blocks for the chain",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "timestamp"
          },
          "arguments": [],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Int"
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "description": {
            "kind": "StringValue",
            "value": "The hash of the parent block",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "parentHash"
          },
          "arguments": [],
          "type": {
            "kind": "NamedType",
            "name": {
              "kind": "Name",
              "value": "Bytes"
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "ObjectTypeDefinition",
      "description": {
        "kind": "StringValue",
        "value": "The type for the top-level _meta field",
        "block": true
      },
      "name": {
        "kind": "Name",
        "value": "_Meta_"
      },
      "fields": [
        {
          "kind": "FieldDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "block"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "_Block_"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "description": {
            "kind": "StringValue",
            "value": "The deployment ID",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "deployment"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "String"
              }
            }
          },
          "directives": []
        },
        {
          "kind": "FieldDefinition",
          "description": {
            "kind": "StringValue",
            "value": "If `true`, the subgraph encountered indexing errors at some past block",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "hasIndexingErrors"
          },
          "arguments": [],
          "type": {
            "kind": "NonNullType",
            "type": {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Boolean"
              }
            }
          },
          "directives": []
        }
      ],
      "interfaces": [],
      "directives": []
    },
    {
      "kind": "EnumTypeDefinition",
      "name": {
        "kind": "Name",
        "value": "_SubgraphErrorPolicy_"
      },
      "values": [
        {
          "kind": "EnumValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Data will be returned even if the subgraph has indexing errors",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "allow"
          },
          "directives": []
        },
        {
          "kind": "EnumValueDefinition",
          "description": {
            "kind": "StringValue",
            "value": "If the subgraph has indexing errors, data will be omitted. The default.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "deny"
          },
          "directives": []
        }
      ],
      "directives": []
    }
  ]
};
const introspectionSchema = buildASTSchema(schemaAST, {
  assumeValid: true,
  assumeValidSDL: true
});

const importedModule$0 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: introspectionSchema
}, Symbol.toStringTag, { value: 'Module' }));

const baseDir = path.join(path.dirname(fileURLToPath(import.meta.url)), "..");
const importFn = (moduleId) => {
  const relativeModuleId = (path.isAbsolute(moduleId) ? path.relative(baseDir, moduleId) : moduleId).split("\\").join("/").replace(baseDir + "/", "");
  switch (relativeModuleId) {
    case ".graphclient/sources/magicswapv2/introspectionSchema":
      return Promise.resolve(importedModule$0);
    default:
      return Promise.reject(new Error(`Cannot find module '${relativeModuleId}'.`));
  }
};
const rootStore = new MeshStore(".graphclient", new FsStoreStorageAdapter({
  cwd: baseDir,
  importFn,
  fileType: "ts"
}), {
  readonly: true,
  validate: false
});
async function getMeshOptions() {
  const pubsub = new PubSub();
  const sourcesStore = rootStore.child("sources");
  const logger = new DefaultLogger("GraphClient");
  const cache = new MeshCache({
    ...{},
    importFn,
    store: rootStore.child("cache"),
    pubsub,
    logger
  });
  const sources = [];
  const transforms = [];
  const additionalEnvelopPlugins = [];
  const magicswapv2Transforms = [];
  const additionalTypeDefs = [];
  const magicswapv2Handler = new GraphqlHandler({
    name: "magicswapv2",
    config: { "endpoint": "https://api.goldsky.com/api/public/project_clrm53zqegpoi01x18coz2fb5/subgraphs/magicswapv2-dev/live/gn" },
    baseDir,
    cache,
    pubsub,
    store: sourcesStore.child("magicswapv2"),
    logger: logger.child("magicswapv2"),
    importFn
  });
  sources[0] = {
    name: "magicswapv2",
    handler: magicswapv2Handler,
    transforms: magicswapv2Transforms
  };
  const additionalResolvers = [];
  const merger = new BareMerger({
    cache,
    pubsub,
    logger: logger.child("bareMerger"),
    store: rootStore.child("bareMerger")
  });
  const documentHashMap = {
    "2451e7dbd652f6525df0747331c28a6322d7545437ea8c999d2dbabd2179b771": GetPairTransactionsDocument,
    "04b4c6d1c86d3f298b8aeb9d5b9bd0b30f1e0fb8b3f5b64db39b9994d8045b75": GetPairsDocument,
    "ade09064317157ace46226a095cca04ebfd8aa1bef80b4a6ab948c7c28912e39": GetPairDocument,
    "a50f9c9d997e342257f2b44caa328e1a9a4779b269cb73fcae8681dc70c7af54": GetTokenDocument,
    "2dd1aad86f2e77d0af93040df670b19f9570e368e21207a263579582ffd4d21c": GetStatsDocument,
    "1479bbe705969a0a352f08c8a8f42295cd95830410411e631d13fd39ecc49460": GetTokensDocument,
    "11dd826f7a0865dd4cacd1d013c5192f575a61b1315d88e888289a62572b82d5": GetTokenVaultReserveItemsDocument,
    "a9535c67b4df9ae66cbe7153341997771fa337e0f5c3d731a00d1fb14162b598": GetUserPositionsDocument
  };
  additionalEnvelopPlugins.push(usePersistedOperations({
    getPersistedOperation(key) {
      return documentHashMap[key];
    },
    ...{}
  }));
  return {
    sources,
    transforms,
    additionalTypeDefs,
    additionalResolvers,
    cache,
    pubsub,
    merger,
    logger,
    additionalEnvelopPlugins,
    get documents() {
      return [
        {
          document: GetPairTransactionsDocument,
          get rawSDL() {
            return printWithCache(GetPairTransactionsDocument);
          },
          location: "GetPairTransactionsDocument.graphql",
          sha256Hash: "2451e7dbd652f6525df0747331c28a6322d7545437ea8c999d2dbabd2179b771"
        },
        {
          document: GetPairsDocument,
          get rawSDL() {
            return printWithCache(GetPairsDocument);
          },
          location: "GetPairsDocument.graphql",
          sha256Hash: "04b4c6d1c86d3f298b8aeb9d5b9bd0b30f1e0fb8b3f5b64db39b9994d8045b75"
        },
        {
          document: GetPairDocument,
          get rawSDL() {
            return printWithCache(GetPairDocument);
          },
          location: "GetPairDocument.graphql",
          sha256Hash: "ade09064317157ace46226a095cca04ebfd8aa1bef80b4a6ab948c7c28912e39"
        },
        {
          document: GetTokenDocument,
          get rawSDL() {
            return printWithCache(GetTokenDocument);
          },
          location: "GetTokenDocument.graphql",
          sha256Hash: "a50f9c9d997e342257f2b44caa328e1a9a4779b269cb73fcae8681dc70c7af54"
        },
        {
          document: GetStatsDocument,
          get rawSDL() {
            return printWithCache(GetStatsDocument);
          },
          location: "GetStatsDocument.graphql",
          sha256Hash: "2dd1aad86f2e77d0af93040df670b19f9570e368e21207a263579582ffd4d21c"
        },
        {
          document: GetTokensDocument,
          get rawSDL() {
            return printWithCache(GetTokensDocument);
          },
          location: "GetTokensDocument.graphql",
          sha256Hash: "1479bbe705969a0a352f08c8a8f42295cd95830410411e631d13fd39ecc49460"
        },
        {
          document: GetTokenVaultReserveItemsDocument,
          get rawSDL() {
            return printWithCache(GetTokenVaultReserveItemsDocument);
          },
          location: "GetTokenVaultReserveItemsDocument.graphql",
          sha256Hash: "11dd826f7a0865dd4cacd1d013c5192f575a61b1315d88e888289a62572b82d5"
        },
        {
          document: GetUserPositionsDocument,
          get rawSDL() {
            return printWithCache(GetUserPositionsDocument);
          },
          location: "GetUserPositionsDocument.graphql",
          sha256Hash: "a9535c67b4df9ae66cbe7153341997771fa337e0f5c3d731a00d1fb14162b598"
        }
      ];
    },
    fetchFn: fetch$1
  };
}
let meshInstance$;
function getBuiltGraphClient() {
  if (meshInstance$ == null) {
    meshInstance$ = getMeshOptions().then((meshOptions) => getMesh(meshOptions)).then((mesh) => {
      const id = mesh.pubsub.subscribe("destroy", () => {
        meshInstance$ = void 0;
        mesh.pubsub.unsubscribe(id);
      });
      return mesh;
    });
  }
  return meshInstance$;
}
const execute = (...args) => getBuiltGraphClient().then(({ execute: execute2 }) => execute2(...args));
const TransactionItemFragmentFragmentDoc = gql`
    fragment TransactionItemFragment on TransactionItem {
  id
  vault {
    id
  }
  collection {
    id
  }
  tokenId
  amount
}
    `;
const TokenFragmentFragmentDoc = gql`
    fragment TokenFragment on Token {
  id
  name
  symbol
  decimals
  derivedMAGIC
  isNFT
  isMAGIC
  isETH
  vaultCollections {
    collection {
      id
      type
    }
    tokenIds
  }
  vaultReserveItems {
    tokenId
    amount
  }
}
    `;
const PairFragmentFragmentDoc = gql`
    fragment PairFragment on Pair {
  id
  token0 {
    ...TokenFragment
  }
  token1 {
    ...TokenFragment
  }
  reserve0
  reserve1
  reserveUSD
  totalSupply
  txCount
  volume0
  volume1
  volumeUSD
  lpFee
  protocolFee
  royaltiesFee
  royaltiesBeneficiary
  totalFee
}
    ${TokenFragmentFragmentDoc}`;
const PairDayDataFragmentFragmentDoc = gql`
    fragment PairDayDataFragment on PairDayData {
  date
  reserve0
  reserve1
  reserveUSD
  volume0
  volume1
  volumeUSD
  txCount
}
    `;
const GetPairTransactionsDocument = gql`
    query GetPairTransactions($pair: ID!, $skip: Int = 0, $first: Int = 15, $where: Transaction_filter, $orderBy: Transaction_orderBy = timestamp, $orderDirection: OrderDirection = desc) {
  pair(id: $pair) {
    token0 {
      id
    }
    token1 {
      id
    }
    transactions(
      skip: $skip
      first: $first
      where: $where
      orderBy: $orderBy
      orderDirection: $orderDirection
    ) {
      id
      hash
      timestamp
      type
      user {
        id
      }
      amount0
      amount1
      amountUSD
      isAmount1Out
      items {
        ...TransactionItemFragment
      }
    }
  }
}
    ${TransactionItemFragmentFragmentDoc}`;
const GetPairsDocument = gql`
    query GetPairs($skip: Int = 0, $first: Int = 100, $where: Pair_filter = {reserve0_gt: 0}, $orderBy: Pair_orderBy = reserveUSD, $orderDirection: OrderDirection = desc) {
  pairs(
    skip: $skip
    first: $first
    where: $where
    orderBy: $orderBy
    orderDirection: $orderDirection
  ) {
    ...PairFragment
    dayData(orderBy: date, orderDirection: desc) {
      ...PairDayDataFragment
    }
  }
}
    ${PairFragmentFragmentDoc}
${PairDayDataFragmentFragmentDoc}`;
const GetPairDocument = gql`
    query GetPair($id: ID!) {
  pair(id: $id) {
    ...PairFragment
    dayData(orderBy: date, orderDirection: desc) {
      date
      reserve0
      reserve1
      reserveUSD
      volume0
      volume1
      volumeUSD
      txCount
    }
  }
}
    ${PairFragmentFragmentDoc}`;
const GetStatsDocument = gql`
    query GetStats {
  factories {
    pairCount
    reserveNFT
    txCount
  }
}
    `;
const GetTokenDocument = gql`
    query GetToken($id: ID!) {
  token(id: $id) {
    ...TokenFragment
  }
}
    ${TokenFragmentFragmentDoc}`;
const GetTokensDocument = gql`
    query GetTokens($skip: Int = 0, $first: Int = 100, $where: Token_filter, $orderBy: Token_orderBy = symbol, $orderDirection: OrderDirection = asc) {
  tokens(
    skip: $skip
    first: $first
    where: $where
    orderBy: $orderBy
    orderDirection: $orderDirection
  ) {
    ...TokenFragment
  }
}
    ${TokenFragmentFragmentDoc}`;
const GetTokenVaultReserveItemsDocument = gql`
    query GetTokenVaultReserveItems($id: String!, $skip: Int = 0, $first: Int = 50, $orderBy: VaultReserveItem_orderBy = tokenId, $orderDirection: OrderDirection = asc) {
  vaultReserveItems(
    first: $first
    skip: $skip
    where: {vault: $id}
    orderBy: $orderBy
    orderDirection: $orderDirection
  ) {
    collection {
      id
    }
    tokenId
    amount
  }
}
    `;
const GetUserPositionsDocument = gql`
    query GetUserPositions($id: ID!, $skip: Int = 0, $first: Int = 100, $where: LiquidityPosition_filter, $dayDataWhere: PairDayData_filter, $orderBy: LiquidityPosition_orderBy = balance, $orderDirection: OrderDirection = desc) {
  user(id: $id) {
    liquidityPositionCount
    liquidityPositions(
      first: $first
      skip: $skip
      where: $where
      orderBy: $orderBy
      orderDirection: $orderDirection
    ) {
      pair {
        ...PairFragment
        dayData(where: $dayDataWhere, orderBy: date, orderDirection: desc) {
          ...PairDayDataFragment
        }
      }
      balance
    }
  }
}
    ${PairFragmentFragmentDoc}
${PairDayDataFragmentFragmentDoc}`;

const lruInstance = new LRUCache({ max: 1e3 });
const lru = {
  set(key, value) {
    const ttl = totalTtl(value?.metadata);
    return lruInstance.set(key, value, {
      ttl: ttl === Number.POSITIVE_INFINITY ? void 0 : ttl,
      start: value?.metadata?.createdTime
    });
  },
  get(key) {
    return lruInstance.get(key);
  },
  delete(key) {
    return lruInstance.delete(key);
  }
};
const getCachedValue = async (key, getValue, options) => cachified(
  {
    cache: lru,
    ttl: 36e5,
    // 1 hour
    staleWhileRevalidate: 864e5,
    // 1 day
    key,
    getFreshValue: getValue,
    ...options
  },
  verboseReporter()
);

const sumArray = (arr) => arr.reduce((a, b) => a + b, 0);
const multiplyArray = (arr) => arr.length > 0 ? arr.reduce((a, b) => a * b, 1) : 0;

const fetchStats = async () => {
  const result = await execute(
    GetStatsDocument,
    {}
  );
  const { globals = [], factories = [] } = result.data ?? {};
  return {
    ...globals[0],
    ...factories[0]
  };
};
const fetchMagicUSD = async () => {
  const stats = await fetchStats();
  return Number(stats?.magicUSD ?? 0);
};

const fetchTokens = async () => {
  const { data, errors } = await execute(GetTokensDocument, {
    where: {
      id_not_in: BLOCKED_TOKENS
    }
  });
  if (errors) {
    throw new Error(
      `Error fetching tokens: ${errors.map((error) => error.message).join(", ")}`
    );
  }
  return data?.tokens ?? [];
};
const fetchToken = async (id) => {
  const result = await execute(GetTokenDocument, {
    id
  });
  const { token: rawToken } = result.data ?? {};
  if (!rawToken) {
    return null;
  }
  const [[collectionMapping, tokenMapping], magicUSD] = await Promise.all([
    fetchTokensCollections([rawToken]),
    fetchMagicUSD()
  ]);
  return createPoolToken(rawToken, collectionMapping, tokenMapping, magicUSD);
};
const fetchTroveTokens = async (ids) => {
  if (ids.length === 0) {
    return [];
  }
  return getCachedValue(`trove-tokens-${ids.join()}`, async () => {
    const response = await fetch(`${ENV.TROVE_API_URL}/batch-tokens`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-API-Key": ENV.TROVE_API_KEY
      },
      body: JSON.stringify({
        ids: ids.map((id) => `${ENV.TROVE_API_NETWORK}/${id}`)
      })
    });
    const results = await response.json();
    return results;
  });
};
const fetchTroveTokenMapping = async (ids) => {
  if (ids.length === 0) {
    return {};
  }
  const tokens = await fetchTroveTokens(ids);
  return tokens.reduce((acc, token) => {
    const address = token.collectionAddr.toLowerCase();
    if (!acc[address]) {
      acc[address] = {};
    }
    acc[address][token.tokenId] = token;
    return acc;
  }, {});
};
const fetchPoolTokenBalance = async (token, address) => {
  const url = new URL(`${ENV.TROVE_API_URL}/tokens-for-user`);
  url.searchParams.append("userAddress", address);
  url.searchParams.append("projection", "queryUserQuantityOwned");
  const tokenIds = token.collections.flatMap(
    ({ id, tokenIds: tokenIds2 }) => tokenIds2.map((tokenId) => `${ENV.TROVE_API_NETWORK}/${id}/${tokenId}`)
  );
  if (tokenIds.length > 0) {
    url.searchParams.append("ids", tokenIds.join(","));
  } else {
    url.searchParams.append(
      "slugs",
      token.collections.map(({ id }) => `${ENV.TROVE_API_NETWORK}/${id}`).join(",")
    );
  }
  const response = await fetch(url, {
    headers: {
      "X-API-Key": ENV.TROVE_API_KEY
    }
  });
  const result = await response.json();
  return sumArray(result.map((token2) => token2.queryUserQuantityOwned ?? 0));
};
const fetchVaultUserInventory = async ({
  id,
  address
}) => {
  const result = await execute(GetTokenDocument, {
    id
  });
  const { token } = result.data ?? {};
  if (!token) {
    throw new Error("Vault not found");
  }
  const url = new URL(`${ENV.TROVE_API_URL}/tokens-for-user`);
  url.searchParams.append("userAddress", address);
  const tokenIds = token.vaultCollections.flatMap(
    ({ collection: { id: collectionId }, tokenIds: tokenIds2 }) => tokenIds2?.map(
      (tokenId) => `${ENV.TROVE_API_NETWORK}/${collectionId}/${tokenId}`
    ) ?? []
  ) ?? [];
  if (tokenIds.length > 0) {
    url.searchParams.append("ids", tokenIds.join(","));
  } else {
    url.searchParams.append(
      "slugs",
      token.vaultCollections.map(
        ({ collection: { id: collectionId } }) => `${ENV.TROVE_API_NETWORK}/${collectionId}`
      ).join(",")
    );
  }
  const response = await fetch(url, {
    headers: {
      "X-API-Key": ENV.TROVE_API_KEY
    }
  });
  const results = await response.json();
  return results;
};
const fetchVaultReserveItems = async ({
  id,
  page = 1,
  resultsPerPage = 25
}) => {
  const result = await execute(GetTokenVaultReserveItemsDocument, {
    id,
    first: resultsPerPage,
    skip: (page - 1) * resultsPerPage
  });
  const { vaultReserveItems = [] } = result.data ?? {};
  const amountsMapping = vaultReserveItems.reduce(
    (acc, { collection: { id: collectionId }, tokenId, amount }) => {
      acc[`${collectionId.toLowerCase()}/${tokenId}`] = amount;
      return acc;
    },
    {}
  );
  const items = await fetchTroveTokens(Object.keys(amountsMapping));
  return items.map((item) => ({
    ...item,
    queryUserQuantityOwned: amountsMapping[`${item.collectionAddr.toLowerCase()}/${item.tokenId}`] ?? item.queryUserQuantityOwned ?? 0
  }));
};

const fetchCollections = (addresses) => (
  // Cache this because it's relatively static NFT collection metadata
  getCachedValue(`trove-collections-${addresses.join()}`, async () => {
    const url = new URL(`${ENV.TROVE_API_URL}/batch-collections`);
    url.searchParams.set(
      "slugs",
      addresses.map((address) => `${ENV.TROVE_API_NETWORK}/${address}`).join(",")
    );
    const response = await fetch(url.toString(), {
      headers: {
        "X-API-Key": ENV.TROVE_API_KEY
      }
    });
    const result = await response.json();
    return result;
  })
);
const fetchTokensCollections = async (tokens) => {
  const addresses = [
    ...new Set(
      tokens.flatMap(
        ({ vaultCollections }) => vaultCollections.map(({ collection }) => collection.id)
      )
    )
  ];
  const tokenIds = [
    ...new Set(
      tokens.flatMap(
        ({ vaultCollections }) => vaultCollections.flatMap(
          ({ collection: { id: address }, tokenIds: tokenIds2 }) => tokenIds2?.map((tokenId) => `${address}/${tokenId}`) ?? []
        )
      )
    )
  ];
  const [collections, tokenMapping] = await Promise.all([
    fetchCollections(addresses),
    fetchTroveTokenMapping(tokenIds)
  ]);
  const collectionMapping = collections.reduce((acc, collection) => {
    acc[collection.collectionAddr.toLowerCase()] = collection;
    return acc;
  }, {});
  return [collectionMapping, tokenMapping];
};

const fetchDomain = async (address) => getCachedValue(`domain-${address}`, async () => {
  const response = await fetch(`${ENV.TROVE_API_URL}/domain/${address}`, {
    headers: {
      "X-API-Key": ENV.TROVE_API_KEY
    }
  });
  if (!response.ok) {
    throw new Error(`Error fetching domain: ${response.statusText}`);
  }
  const result = await response.json();
  return result;
});
const fetchDomains = async (addresses) => {
  const uniqueAddresses = [...new Set(addresses.filter((address) => address))];
  return getCachedValue(`domains-${uniqueAddresses.join(",")}`, async () => {
    const response = await fetch(`${ENV.TROVE_API_URL}/batch-domains`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-API-Key": ENV.TROVE_API_KEY
      },
      body: JSON.stringify({ addresses: uniqueAddresses })
    });
    if (!response.ok) {
      throw new Error(`Error fetching domains: ${response.statusText}`);
    }
    const result = await response.json();
    return result.reduce(
      (acc, domain) => {
        acc[domain.address] = domain;
        return acc;
      },
      {}
    );
  });
};

const fetchPoolTransactions = async ({
  id,
  page = 1,
  resultsPerPage = 25,
  type
}) => {
  const result = await execute(GetPairTransactionsDocument, {
    pair: id,
    first: resultsPerPage,
    skip: (page - 1) * resultsPerPage,
    ...type ? { where: { type } } : void 0
  });
  const { pair } = result.data ?? {};
  if (!pair) {
    throw new Error(`Pair not found: ${id}`);
  }
  const transactions = pair.transactions;
  const [tokens, domains] = await Promise.all([
    fetchTroveTokenMapping([
      ...new Set(
        transactions.flatMap(
          ({ items }) => items.map(({ collection, tokenId }) => `${collection.id}/${tokenId}`)
        )
      )
    ]),
    fetchDomains(transactions.map(({ user }) => user?.id ?? ""))
  ]);
  return transactions.map(({ items, ...transaction }) => ({
    ...transaction,
    userDomain: transaction.user ? domains[transaction.user.id] : void 0,
    items0: items?.filter(({ vault }) => vault.id === pair.token0.id).map((item) => itemToTroveTokenItem(item, tokens)) ?? [],
    items1: items?.filter(({ vault }) => vault.id === pair.token1.id).map((item) => itemToTroveTokenItem(item, tokens)) ?? []
  }));
};
const createPoolsFromPairs = async (pairs) => {
  const [[collectionMapping, tokenMapping], magicUSD, reserves] = await Promise.all([
    fetchTokensCollections(
      pairs.flatMap(({ token0, token1 }) => [token0, token1])
    ),
    fetchMagicUSD(),
    client.multicall({
      contracts: pairs.map(({ id }) => ({
        address: id,
        abi: uniswapV2PairAbi,
        functionName: "getReserves"
      }))
    })
  ]);
  return pairs.map((pair, i) => {
    const reserve = reserves[i];
    return createPoolFromPair(
      pair,
      collectionMapping,
      tokenMapping,
      magicUSD,
      reserve?.status === "success" ? [reserve.result[0], reserve.result[1]] : void 0
    );
  });
};
const fetchPool = async (id) => {
  const result = await execute(GetPairDocument, {
    id,
    hourDataWhere: { date_gte: getOneDayAgoTimestamp() },
    dayDataWhere: {
      date_gte: getOneWeekAgoTimestamp()
    }
  });
  const pair = result.data?.pair;
  if (!pair) {
    return void 0;
  }
  const pools = await createPoolsFromPairs([pair]);
  return pools[0];
};

const createErrorResponse$1 = (error) => json({ ok: false, error });
const loader$b = async ({ request, params }) => {
  const { id } = params;
  invariant(id, "Pool ID required");
  const url = new URL(request.url);
  const page = url.searchParams.get("page");
  const resultsPerPage = url.searchParams.get("resultsPerPage");
  const type = url.searchParams.get("type");
  try {
    const results = await fetchPoolTransactions({
      id,
      page: page ? Number(page) : void 0,
      resultsPerPage: resultsPerPage ? Number(resultsPerPage) : void 0,
      type: type ? type : void 0
    });
    return json({ ok: true, results });
  } catch (err) {
    return createErrorResponse$1(err.message);
  }
};

const route1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  loader: loader$b
}, Symbol.toStringTag, { value: 'Module' }));

const loadFont = (baseUrl, name, weight) => fetch(new URL(`${baseUrl}/fonts/${name}`)).then(
  async (res) => ({
    name: "ABCWhyte",
    weight,
    data: await res.arrayBuffer(),
    style: "normal"
  })
);
const NIGHT_100 = "#E7E8E9";
const NIGHT_400 = "#9FA3A9";
const TokenDisplay = ({
  token0,
  token1,
  origin
}) => /* @__PURE__ */ jsxs("div", { tw: "flex items-center", children: [
  /* @__PURE__ */ jsx(
    "img",
    {
      src: token0?.isNFT ? token0?.image : `${origin}${token0?.image}`,
      height: 132,
      width: 132,
      tw: token0?.isNFT ? "rounded-lg" : "rounded-full",
      alt: "banner"
    }
  ),
  /* @__PURE__ */ jsx(
    "div",
    {
      tw: `${token1?.isNFT ? "rounded-xl" : "rounded-full"} flex items-center justify-center -ml-10 relative`,
      style: {
        ...token1?.isNFT ? {
          width: 128,
          height: 128
        } : {
          width: 136,
          height: 136
        },
        backgroundColor: "rgba(16, 24, 39, 1)"
      },
      children: /* @__PURE__ */ jsx(
        "img",
        {
          src: token1?.isNFT ? token1?.image : `${origin}${token1?.image}`,
          height: token1?.isNFT ? 116 : 124,
          width: token1?.isNFT ? 116 : 124,
          tw: token1?.isNFT ? "rounded-lg" : "rounded-full",
          alt: "banner"
        }
      )
    }
  )
] });
const generateOgImage = async (content, origin) => {
  const fontData = await Promise.all([
    loadFont(origin, "ABCWhyteVariable.woff", 500),
    loadFont(origin, "ABCWhyte-Bold.otf", 600)
  ]).then((fonts) => fonts.flat());
  const options = {
    width: 1200,
    height: 600,
    fonts: fontData
  };
  const svg = await satori(
    /* @__PURE__ */ jsx(
      "div",
      {
        tw: "flex relative",
        style: {
          width: options.width,
          height: options.height,
          fontFamily: "ABCWhyte",
          fontSize: 45,
          backgroundImage: `url(${origin}/img/seo-banner-blank.png)`
        },
        children: content
      }
    ),
    options
  );
  const resvg = new Resvg(svg);
  const pngData = resvg.render();
  return pngData.asPng();
};

const loader$a = async ({ request, params }) => {
  const { origin } = new URL(request.url);
  const tokenInAddress = params.tokenIn ?? ENV.PUBLIC_DEFAULT_TOKEN_ADDRESS;
  const tokenOutAddress = params.tokenOut;
  invariant(tokenOutAddress, "Missing output address");
  const [tokenIn, tokenOut] = await Promise.all([
    fetchToken(tokenInAddress),
    fetchToken(tokenOutAddress)
  ]);
  const png = await generateOgImage(
    /* @__PURE__ */ jsx("div", { tw: "flex p-16 w-full", children: /* @__PURE__ */ jsxs("div", { tw: "flex justify-end flex-col", children: [
      /* @__PURE__ */ jsx(TokenDisplay, { token0: tokenIn, token1: tokenOut, origin }),
      /* @__PURE__ */ jsxs("div", { tw: "flex flex-col mt-8", children: [
        /* @__PURE__ */ jsx(
          "div",
          {
            style: {
              color: NIGHT_400
            },
            tw: "text-3xl",
            children: "Swap"
          }
        ),
        /* @__PURE__ */ jsxs(
          "div",
          {
            tw: "flex font-semibold text-5xl mt-4 items-center",
            style: {
              color: NIGHT_100
            },
            children: [
              /* @__PURE__ */ jsx("div", { tw: "flex", children: tokenIn?.symbol }),
              /* @__PURE__ */ jsx(
                "svg",
                {
                  width: "30",
                  height: "40",
                  viewBox: "0 0 30 40",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  tw: "mx-4 mt-2",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M30 32L22 40L19.1 37.2L22.3 34L8 34C5.8 34 3.91667 33.2167 2.35 31.65C0.783333 30.0833 -5.16248e-07 28.2 -6.12497e-07 26C-7.08747e-07 23.8 0.783333 21.9167 2.35 20.35C3.91667 18.7833 5.8 18 8 18L22 18C23.1 18 24.0417 17.6083 24.825 16.825C25.6083 16.0417 26 15.1 26 14C26 12.9 25.6083 11.9583 24.825 11.175C24.0417 10.3917 23.1 10 22 10L7.7 10L10.9 13.2L8 16L-1.39999e-06 8L8 -3.49384e-07L10.9 2.8L7.7 6L22 6C24.2 6 26.0833 6.78333 27.65 8.35C29.2167 9.91667 30 11.8 30 14C30 16.2 29.2167 18.0833 27.65 19.65C26.0833 21.2167 24.2 22 22 22L8 22C6.9 22 5.95833 22.3917 5.175 23.175C4.39167 23.9583 4 24.9 4 26C4 27.1 4.39167 28.0417 5.175 28.825C5.95833 29.6083 6.9 30 8 30L22.3 30L19.1 26.8L22 24L30 32Z",
                      fill: "#70747D"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx("div", { tw: "flex", children: tokenOut?.symbol })
            ]
          }
        )
      ] })
    ] }) }),
    origin
  );
  return new Response(png, {
    status: 200,
    headers: {
      "Content-Type": "image/png",
      "cache-control": ENV.NODE_ENV === "development" ? "no-cache, no-store" : "public, immutable, no-transform, max-age=86400"
    }
  });
};

const route2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  loader: loader$a
}, Symbol.toStringTag, { value: 'Module' }));

const loader$9 = async ({ request, params }) => {
  const { id } = params;
  invariant(id, "Token ID required");
  const url = new URL(request.url);
  const address = url.searchParams.get("address");
  invariant(address, "User address required");
  const createErrorResponse = (error) => json({ ok: false, error });
  let token;
  try {
    token = await fetchToken(id);
  } catch (err) {
    return createErrorResponse(err.message);
  }
  if (!token) {
    return createErrorResponse("Token not found");
  }
  if (!token.isNFT) {
    return createErrorResponse("Token must be an NFT vault");
  }
  try {
    const balance = await fetchPoolTokenBalance(token, address);
    return json({ ok: true, balance });
  } catch (err) {
    return createErrorResponse(err.message);
  }
};

const route3 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  loader: loader$9
}, Symbol.toStringTag, { value: 'Module' }));

const createErrorResponse = (error) => json({ ok: false, error });
const loader$8 = async ({ request, params }) => {
  const { id } = params;
  invariant(id, "Token ID required");
  const url = new URL(request.url);
  const type = url.searchParams.get("type") ?? "reserves";
  const address = url.searchParams.get("address");
  const page = url.searchParams.get("page");
  const resultsPerPage = url.searchParams.get("resultsPerPage");
  if (type === "inventory") {
    if (!address) {
      return createErrorResponse("Address required to fetch inventory");
    }
    try {
      const results = await fetchVaultUserInventory({ id, address });
      return json({ ok: true, results });
    } catch (err) {
      return createErrorResponse(err.message);
    }
  }
  try {
    const results = await fetchVaultReserveItems({
      id,
      page: page ? Number(page) : void 0,
      resultsPerPage: resultsPerPage ? Number(resultsPerPage) : void 0
    });
    return json({ ok: true, results });
  } catch (err) {
    return createErrorResponse(err.message);
  }
};

const route4 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  loader: loader$8
}, Symbol.toStringTag, { value: 'Module' }));

const Badge = ({
  children,
  color = "default",
  rounded = "full",
  size = "sm"
}) => /* @__PURE__ */ jsx(
  "div",
  {
    className: cn(
      "rounded-3xl bg-night-700 px-3.5 py-0.5 font-medium text-white text-xs leading-[160%]",
      color === "primary" && "bg-ruby-800/10 text-ruby-700",
      color === "secondary" && "bg-honey-500/25 text-honey-700",
      rounded === "partially" && "rounded-md",
      size === "xs" && "px-1.5 font-normal text-[0.6rem]"
    ),
    children
  }
);

const PoolTokenImage = ({ token, className, ...divProps }) => /* @__PURE__ */ jsx(
  "div",
  {
    className: cn(
      "h-9 w-9 overflow-hidden border border-night-1000 bg-night-1000",
      token?.isNFT ? "rounded-lg" : "rounded-full",
      className
    ),
    ...divProps,
    children: token?.image ? /* @__PURE__ */ jsx("img", { src: token.image, title: token.name, alt: token.symbol }) : null
  }
);

const PoolImage = ({ pool, className, ...divProps }) => {
  const isToken1Base = pool.token0.isNFT && !pool.token1.isNFT || pool.token1.isMAGIC;
  return /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
    /* @__PURE__ */ jsx(
      PoolTokenImage,
      {
        token: isToken1Base ? pool.token1 : pool.token0,
        className: cn("border-2 border-night-1100", className),
        ...divProps
      }
    ),
    /* @__PURE__ */ jsx(
      PoolTokenImage,
      {
        token: isToken1Base ? pool.token0 : pool.token1,
        className: cn("-translate-x-1/3 border-2 border-night-1100", className),
        ...divProps
      }
    )
  ] });
};

function Skeleton({
  className,
  ...props
}) {
  return /* @__PURE__ */ jsx(
    "span",
    {
      className: cn("block animate-pulse rounded-md bg-night-800", className),
      ...props
    }
  );
}

const formatUSD = (value) => `$${Number(value).toLocaleString("en-US", {
  minimumFractionDigits: 2,
  maximumFractionDigits: Number(value) < 0.01 ? 4 : 2
})}`;
const formatAmount = (value, params) => {
  const { type = "default", decimals = 18 } = params ?? {};
  if (typeof value === "bigint") {
    return formatAmount(formatUnits(value, decimals), { type });
  }
  const decimal = new Decimal(value);
  let decimalPlaces;
  if (decimal.lt(1e-3)) {
    decimalPlaces = 6;
  } else if (decimal.lt(1)) {
    decimalPlaces = 4;
  } else if (decimal.lt(100)) {
    decimalPlaces = 3;
  } else {
    decimalPlaces = 2;
  }
  const rounded = decimal.toDecimalPlaces(decimalPlaces, Decimal.ROUND_DOWN);
  if (type !== "default" && type !== "compact") {
    return rounded.toString();
  }
  return rounded.toNumber().toLocaleString("en-US", {
    notation: type === "compact" ? "compact" : "standard",
    maximumFractionDigits: decimalPlaces
  });
};

const getTokenIdsForGame = (id, chainId) => GAME_METADATA[id]?.tokens[chainId]?.map((id2) => id2.toLowerCase()) ?? [];
const getTokenIdsMapForGame = (id, chainId) => getTokenIdsForGame(id, chainId).reduce(
  (acc, id2) => {
    acc[id2.toLowerCase()] = true;
    return acc;
  },
  {}
);
const getCollectionIdsForGame = (id, chainId) => GAME_METADATA[id]?.collections[chainId]?.map((id2) => id2.toLowerCase()) ?? [];
const getCollectionIdsMapForGame = (id, chainId) => getCollectionIdsForGame(id, chainId).reduce(
  (acc, id2) => {
    acc[id2] = true;
    return acc;
  },
  {}
);

const SESSION_KEY_ADDRESS = "address";
const { getSession, commitSession } = createCookieSessionStorage({
  cookie: {
    name: "__session",
    secure: true
  }
});

const handle$1 = {
  tab: "user"
};
async function loader$7({ request }) {
  const session = await getSession(request.headers.get("Cookie"));
  session.get("address");
  const url = new URL(request.url);
  url.searchParams.get("search");
  url.searchParams.get("game");
  return defer({
    userPositions: { total: 0, positions: [] }
  });
}
const RowSkeleton$1 = () => /* @__PURE__ */ jsxs("tr", { children: [
  /* @__PURE__ */ jsx("td", { className: "px-4 py-3.5 sm:px-5", children: /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
    /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
      /* @__PURE__ */ jsx(Skeleton, { className: "h-9 w-9 rounded-full" }),
      /* @__PURE__ */ jsx(Skeleton, { className: "-translate-x-1/3 h-9 w-9 rounded-full" })
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "-ml-2 flex-1 space-y-1 sm:ml-0", children: [
      /* @__PURE__ */ jsx(Skeleton, { className: "h-4 w-1/2" }),
      /* @__PURE__ */ jsx(Skeleton, { className: "h-4 w-1/4" })
    ] })
  ] }) }),
  /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 sm:table-cell sm:px-5", children: /* @__PURE__ */ jsx(Skeleton, { className: "h-4" }) }),
  /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 sm:table-cell sm:px-5", children: /* @__PURE__ */ jsx(Skeleton, { className: "h-4" }) })
] });
function UserPositionsListPage() {
  const { userPositions } = useLoaderData();
  const navigate = useNavigate();
  return /* @__PURE__ */ jsxs("table", { className: "mt-4 w-full table-fixed rounded-md bg-night-1100 sm:mt-6", children: [
    /* @__PURE__ */ jsx("thead", { children: /* @__PURE__ */ jsxs("tr", { className: "text-night-100 text-sm", children: [
      /* @__PURE__ */ jsx("th", { className: "w-1/2 px-4 py-2.5 text-left font-normal text-sm sm:px-5", children: "Name" }),
      /* @__PURE__ */ jsx("th", { className: "px-4 py-2.5 text-right font-normal sm:px-5", children: "Balance" }),
      /* @__PURE__ */ jsx("th", { className: "hidden px-4 py-2.5 text-right font-normal sm:table-cell sm:px-5", children: /* @__PURE__ */ jsx("abbr", { title: "Annual Percentage Yield", className: "no-underline", children: "APY" }) })
    ] }) }),
    /* @__PURE__ */ jsx("tbody", { children: /* @__PURE__ */ jsx(
      Suspense$1,
      {
        fallback: Array.from({ length: 5 }).map((_, i) => (
          // biome-ignore lint/suspicious/noArrayIndexKey: skeleton rows are identical
          /* @__PURE__ */ jsx(RowSkeleton$1, {}, i)
        )),
        children: /* @__PURE__ */ jsx(Await, { resolve: userPositions, children: ({ positions }) => positions.map(({ balance, pool }) => {
          const lpShare = bigIntToNumber(BigInt(balance)) / bigIntToNumber(BigInt(pool.totalSupply));
          return (
            // biome-ignore lint/a11y/useKeyWithClickEvents: it is only used for additional hit space
            /* @__PURE__ */ jsxs(
              "tr",
              {
                className: "cursor-pointer border-night-900 border-t transition-colors hover:bg-night-1000",
                onClick: () => navigate(`/pools/${pool.id}`),
                children: [
                  /* @__PURE__ */ jsx("td", { className: "px-4 py-3.5 text-left font-medium text-white sm:px-5", children: /* @__PURE__ */ jsxs(
                    Link,
                    {
                      to: `/pools/${pool.id}`,
                      prefetch: "intent",
                      className: "flex items-center",
                      onClick: (e) => e.stopPropagation(),
                      children: [
                        /* @__PURE__ */ jsx(PoolImage, { pool }),
                        /* @__PURE__ */ jsxs("div", { className: "-ml-2 space-y-1 sm:ml-0", children: [
                          /* @__PURE__ */ jsx("span", { className: "block", children: pool.name }),
                          /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-1", children: [
                            /* @__PURE__ */ jsx(
                              Badge,
                              {
                                size: "xs",
                                color: pool.version === "V2" ? "primary" : "secondary",
                                children: pool.version
                              }
                            ),
                            /* @__PURE__ */ jsx(Badge, { size: "xs", children: formatPercent(pool.lpFee, 3) })
                          ] })
                        ] })
                      ]
                    }
                  ) }),
                  /* @__PURE__ */ jsx("td", { className: "px-4 py-3.5 text-right text-night-200 text-sm sm:px-5", children: pool.reserveUSD > 0 ? formatUSD(lpShare * pool.reserveUSD) : `${formatAmount(lpShare)} MLP` }),
                  /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 text-right text-night-200 text-sm sm:table-cell sm:px-5", children: formatPercent(pool.apy) })
                ]
              },
              pool.id
            )
          );
        }) })
      }
    ) })
  ] });
}

const route5 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: UserPositionsListPage,
  handle: handle$1,
  loader: loader$7
}, Symbol.toStringTag, { value: 'Module' }));

const putSchema = z.object({
  address: z.string()
});
const action = async ({ request }) => {
  const session = await getSession(request.headers.get("Cookie"));
  switch (request.method) {
    case "PUT": {
      try {
        const { address } = putSchema.parse(
          Object.fromEntries(await request.formData())
        );
        session.set(SESSION_KEY_ADDRESS, address);
      } catch (err) {
        console.error("Error parsing session payload:", err);
        return json({ message: "Missing address" }, 400);
      }
      break;
    }
    case "DELETE":
      session.unset(SESSION_KEY_ADDRESS);
      break;
    default:
      return json({ message: "Method not allowed" }, 405);
  }
  return json(
    {},
    {
      headers: {
        "Set-Cookie": await commitSession(session)
      }
    }
  );
};

const route6 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  action
}, Symbol.toStringTag, { value: 'Module' }));

const tokenToRToken = ({
  name,
  symbol,
  id: address,
  decimals
}) => ({
  name,
  symbol,
  address,
  decimals
});
const countTokens = (tokens) => sumArray(tokens.map(({ quantity }) => quantity));
const formatTokenReserve = (token) => formatAmount(
  token.isNFT ? floorBigInt(BigInt(token.reserve), token.decimals) : BigInt(token.reserve),
  { decimals: token.decimals }
);

const quote = (amountA, reserveA, reserveB) => reserveA > 0 ? amountA * reserveB / reserveA : 0n;
const getLpCountForTokens = (amount, reserve, totalSupply) => reserve > 0 ? amount * totalSupply / reserve : 0n;
const getTokenCountForLp = (amount, reserve, totalSupply) => totalSupply > 0 ? amount * reserve / totalSupply : 0n;
const getAmountMax = (amount, slippage) => amount + amount * BigInt(Math.ceil(slippage * 1e3)) / 1000n;
const getAmountMin = (amount, slippage) => amount - amount * BigInt(Math.ceil(slippage * 1e3)) / 1000n;
const createSwapRoute = (tokenIn, tokenOut, pools, amount, isExactOut) => {
  if (amount <= 0 || !tokenOut) {
    return void 0;
  }
  const rTokenIn = tokenToRToken(tokenIn);
  const rTokenOut = tokenToRToken(tokenOut);
  const rPools = pools.map(
    ({ id, token0, token1, reserve0, reserve1, totalFee }) => {
      return new ConstantProductRPool(
        id,
        tokenToRToken(token0),
        tokenToRToken(token1),
        Number(totalFee ?? 0),
        parseUnits(reserve0.toString(), token0.decimals),
        parseUnits(reserve1.toString(), token0.decimals)
      );
    }
  );
  const networks = [
    {
      baseToken: {
        name: "ETH",
        symbol: "ETH",
        address: "0x0",
        decimals: 18
      },
      gasPrice: 0
    }
  ];
  if (isExactOut) {
    return findMultiRouteExactOut(
      rTokenIn,
      rTokenOut,
      amount,
      rPools,
      networks
    );
  }
  return findMultiRouteExactIn(rTokenIn, rTokenOut, amount, rPools, networks);
};
const getPoolVolume24hDisplay = (pool) => {
  if (!pool.volume24hUSD) {
    if (pool.isNFTNFT || !pool.token0.isNFT) {
      return `${formatAmount(pool.volume24h0, { type: "compact" })} ${pool.token0.symbol}`;
    }
    return `${formatAmount(pool.volume24h1, { type: "compact" })} ${pool.token1.symbol}`;
  }
  return formatUSD(pool.volume24hUSD);
};
const getPoolReserveDisplay = (pool) => {
  if (!pool.reserveUSD) {
    if (pool.isNFTNFT || !pool.token0.isNFT) {
      return `${formatAmount(BigInt(pool.token0.reserve) * 2n, { decimals: pool.token0.decimals, type: "compact" })} ${pool.token0.symbol}`;
    }
    return `${formatAmount(BigInt(pool.token1.reserve) * 2n, { decimals: pool.token1.decimals, type: "compact" })} ${pool.token1.symbol}`;
  }
  return formatUSD(pool.reserveUSD);
};
const getPoolFeesDisplay = (pool) => {
  const fee = Number(pool.lpFee);
  if (!pool.volumeUSD) {
    if (pool.isNFTNFT || !pool.token0.isNFT) {
      return `${formatAmount(pool.volume0 * fee, { type: "compact" })} ${pool.token0.symbol}`;
    }
    return `${formatAmount(pool.volume1 * fee, { type: "compact" })} ${pool.token1.symbol}`;
  }
  return formatUSD(pool.volumeUSD * fee);
};
const getPoolFees24hDisplay = (pool) => {
  const fee = Number(pool.lpFee);
  if (!pool.volume24hUSD) {
    if (pool.isNFTNFT || !pool.token0.isNFT) {
      return `${formatAmount(pool.volume24h0 * fee, { type: "compact" })} ${pool.token0.symbol}`;
    }
    return `${formatAmount(pool.volume24h1 * fee, { type: "compact" })} ${pool.token1.symbol}`;
  }
  return formatUSD(pool.volume24hUSD * fee);
};

const loader$6 = async ({ request, params }) => {
  const { origin } = new URL(request.url);
  invariant(params.id, "Missing pool id");
  const pool = await fetchPool(params.id);
  if (!pool) {
    return new Response(void 0, {
      status: 404,
      headers: {
        "Content-Type": "image/png",
        "cache-control": "no-cache, no-store"
      }
    });
  }
  const token0 = pool.token0;
  const token1 = pool.token1;
  const baseToken = token1.isNFT && !pool.isNFTNFT ? token1 : token0;
  const quoteToken = token1.isNFT && !pool.isNFTNFT ? token0 : token1;
  const png = await generateOgImage(
    /* @__PURE__ */ jsxs("div", { tw: "flex p-16 w-full", children: [
      /* @__PURE__ */ jsxs("div", { tw: "flex justify-end flex-col", children: [
        /* @__PURE__ */ jsx(TokenDisplay, { token0, token1, origin }),
        /* @__PURE__ */ jsxs("div", { tw: "flex flex-col mt-8", children: [
          /* @__PURE__ */ jsxs(
            "div",
            {
              tw: "flex font-semibold text-5xl",
              style: {
                color: NIGHT_100
              },
              children: [
                /* @__PURE__ */ jsx("div", { tw: "flex", children: token0.symbol }),
                /* @__PURE__ */ jsx("div", { tw: "flex mx-2", children: "/" }),
                /* @__PURE__ */ jsx("div", { tw: "flex", children: token1.symbol })
              ]
            }
          ),
          /* @__PURE__ */ jsxs("div", { tw: "flex mt-6", children: [
            /* @__PURE__ */ jsxs("div", { tw: "flex flex-col", children: [
              /* @__PURE__ */ jsx(
                "div",
                {
                  tw: "text-3xl",
                  style: {
                    color: NIGHT_100
                  },
                  children: formatTokenReserve(token0)
                }
              ),
              /* @__PURE__ */ jsx(
                "div",
                {
                  style: {
                    color: NIGHT_400
                  },
                  tw: "text-lg",
                  children: token0.symbol
                }
              )
            ] }),
            /* @__PURE__ */ jsxs("div", { tw: "flex ml-12 flex-col", children: [
              /* @__PURE__ */ jsx(
                "div",
                {
                  tw: "text-3xl",
                  style: {
                    color: NIGHT_100
                  },
                  children: formatTokenReserve(token1)
                }
              ),
              /* @__PURE__ */ jsx(
                "div",
                {
                  style: {
                    color: NIGHT_400
                  },
                  tw: "text-lg",
                  children: token1.symbol
                }
              )
            ] }),
            /* @__PURE__ */ jsxs("div", { tw: "flex ml-12 flex-col", children: [
              /* @__PURE__ */ jsx(
                "div",
                {
                  tw: "text-3xl",
                  style: {
                    color: NIGHT_100
                  },
                  children: getPoolReserveDisplay(pool)
                }
              ),
              /* @__PURE__ */ jsx(
                "div",
                {
                  style: {
                    color: NIGHT_400
                  },
                  tw: "text-lg",
                  children: "TVL"
                }
              )
            ] }),
            /* @__PURE__ */ jsxs("div", { tw: "flex ml-12 flex-col", children: [
              /* @__PURE__ */ jsx(
                "div",
                {
                  tw: "text-3xl",
                  style: {
                    color: NIGHT_100
                  },
                  children: formatPercent(pool.apy)
                }
              ),
              /* @__PURE__ */ jsx(
                "div",
                {
                  style: {
                    color: NIGHT_400
                  },
                  tw: "text-lg",
                  children: "APY"
                }
              )
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxs(
        "div",
        {
          tw: "flex text-3xl absolute right-16 top-16 items-center px-6 py-3 rounded-full font-semibold",
          style: {
            backgroundColor: "rgba(64, 70, 82, 0.6)"
          },
          children: [
            /* @__PURE__ */ jsxs(
              "div",
              {
                tw: "flex items-center",
                style: {
                  color: NIGHT_100
                },
                children: [
                  /* @__PURE__ */ jsx("span", { children: "1" }),
                  /* @__PURE__ */ jsx(
                    "span",
                    {
                      tw: "ml-2",
                      style: {
                        color: NIGHT_400
                      },
                      children: baseToken.symbol
                    }
                  )
                ]
              }
            ),
            /* @__PURE__ */ jsx(
              "svg",
              {
                width: "24",
                height: "19",
                viewBox: "0 0 24 19",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                tw: "mx-4 mt-2",
                children: /* @__PURE__ */ jsx(
                  "path",
                  {
                    d: "M6.16683 18.8334L0.333496 13L6.16683 7.16669L7.80016 8.82919L4.796 11.8334H13.1668V14.1667H4.796L7.80016 17.1709L6.16683 18.8334ZM17.8335 11.8334L16.2002 10.1709L19.2043 7.16669H10.8335V4.83335H19.2043L16.2002 1.82919L17.8335 0.166687L23.6668 6.00002L17.8335 11.8334Z",
                    fill: "#888C93"
                  }
                )
              }
            ),
            /* @__PURE__ */ jsxs(
              "div",
              {
                tw: "flex items-center",
                style: {
                  color: NIGHT_100
                },
                children: [
                  /* @__PURE__ */ jsx("span", { children: formatAmount(
                    bigIntToNumber(BigInt(quoteToken.reserve), quoteToken.decimals) / bigIntToNumber(BigInt(baseToken.reserve), baseToken.decimals)
                  ) }),
                  /* @__PURE__ */ jsx(
                    "span",
                    {
                      tw: "ml-2",
                      style: {
                        color: NIGHT_400
                      },
                      children: quoteToken.symbol
                    }
                  )
                ]
              }
            )
          ]
        }
      )
    ] }),
    origin
  );
  return new Response(png, {
    status: 200,
    headers: {
      "Content-Type": "image/png",
      "cache-control": ENV.NODE_ENV === "development" ? "no-cache, no-store" : "public, immutable, no-transform, max-age=86400"
    }
  });
};

const route7 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  loader: loader$6
}, Symbol.toStringTag, { value: 'Module' }));

const loader$5 = async ({ request }) => {
  const url = new URL(request.url);
  const address = url.searchParams.get("address");
  invariant(address, "Missing address");
  try {
    const domain = await fetchDomain(address);
    return json({ domain, ok: true });
  } catch (e) {
    return json({
      ok: false,
      error: e instanceof Error ? e.message : "Unknown error",
      domain: null
    });
  }
};
const shouldRevalidate = () => {
  return false;
};

const route8 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  loader: loader$5,
  shouldRevalidate
}, Symbol.toStringTag, { value: 'Module' }));

const useFocusInterval = (callback, delay) => {
  const intervalIdRef = useRef(null);
  useEffect(() => {
    const setFocusInterval = () => {
      if (!intervalIdRef.current) {
        intervalIdRef.current = window.setInterval(callback, delay);
      }
    };
    const clearFocusInterval = () => {
      if (intervalIdRef.current !== null) {
        window.clearInterval(intervalIdRef.current);
        intervalIdRef.current = null;
      }
    };
    if (document.hasFocus()) {
      setFocusInterval();
    }
    window.addEventListener("focus", setFocusInterval);
    window.addEventListener("blur", clearFocusInterval);
    return () => {
      window.removeEventListener("focus", setFocusInterval);
      window.removeEventListener("blur", clearFocusInterval);
      clearFocusInterval();
    };
  }, [callback, delay]);
};

const handle = {
  tab: "pools"
};
function loader$4({ request }) {
  const url = new URL(request.url);
  url.searchParams.get("search")?.toLowerCase();
  url.searchParams.get("game");
  return {
    pools: [
      {
        id: "0x6210775833732f144058713c9b36de09afd1ca3b",
        version: "V1",
        token0: {
          id: "0x0caadd427a6feb5b5fc1137eb05aa7ddd9c08ce9",
          name: "VEE",
          symbol: "VEE",
          decimals: 18,
          derivedMAGIC: "0.001256102638234773389685845218283959",
          isNFT: false,
          isMAGIC: false,
          isETH: false,
          vaultCollections: [],
          vaultReserveItems: [],
          image: "/img/tokens/vee.png",
          collections: [],
          urlSlug: "",
          collectionId: "",
          collectionTokenIds: [],
          priceUSD: 4992978342960962e-19,
          reserve: "243721708413592700330494537"
        },
        token1: {
          id: "0x539bde0d7dbd336b79148aa742883198bbf60342",
          name: "MAGIC",
          symbol: "MAGIC",
          decimals: 18,
          derivedMAGIC: "1",
          isNFT: false,
          isMAGIC: true,
          isETH: false,
          vaultCollections: [],
          vaultReserveItems: [],
          image: "/img/tokens/magic.png",
          collections: [],
          urlSlug: "",
          collectionId: "",
          collectionTokenIds: [],
          priceUSD: 0.39749764,
          reserve: "306139480933399957566962"
        },
        reserve0: "243721708.413592700330494537",
        reserve1: "306139.480933399957566962",
        reserveUSD: 240271.6551774283,
        totalSupply: "6827270791664701315433460",
        txCount: "10654",
        volume0: 1678596309676119e-6,
        volume1: 1.7477998867158724e6,
        volumeUSD: 1073703514658393e-9,
        lpFee: "0.00375",
        protocolFee: "0.00125",
        royaltiesFee: "0",
        royaltiesBeneficiary: null,
        totalFee: "0.005",
        hourData: [
          {
            date: "1729594800",
            reserve0: "243721708.413592700330494537",
            reserve1: "306139.480933399957566962",
            reserveUSD: "240271.6551774283136126957565178801",
            volume0: "3099146.194042494593229323",
            volume1: "3855.455835891285396758",
            volumeUSD: "1512.96518882287133209946629746",
            txCount: "2"
          },
          {
            date: "1729591200",
            reserve0: "246820854.60763519492372386",
            reserve1: "302284.025097508672170204",
            reserveUSD: "237245.7247997825709484968239229601",
            volume0: "46220.894831390014104021",
            volume1: "56.766872815676435365",
            volumeUSD: "22.27656238437991208086743255",
            txCount: "1"
          },
          {
            date: "1729587600",
            reserve0: "246867075.502466584937827881",
            reserve1: "302227.258224692995734839",
            reserveUSD: "238434.3979131093419057112702038",
            volume0: "89791.044551903354448604",
            volume1: "110.228356296419511597",
            volumeUSD: "43.4809089042338630255269737",
            txCount: "1"
          },
          {
            date: "1729584000",
            reserve0: "246956866.547018488292276485",
            reserve1: "302117.029868396576223242",
            reserveUSD: "241217.70497990617322000065134224",
            volume0: "200000",
            volume1: "244.135600353311304639",
            volumeUSD: "97.6760469763979502501682825174873",
            txCount: "1"
          },
          {
            date: "1729580400",
            reserve0: "246756866.547018488292276485",
            reserve1: "302361.165468749887527881",
            reserveUSD: "244197.2361260913685386634008030601",
            volume0: "76409.193220668384010479",
            volume1: "93.357133276806586649",
            volumeUSD: "37.81034249748693002864852459203688",
            txCount: "2"
          },
          {
            date: "1729576800",
            reserve0: "246680457.353797819908266006",
            reserve1: "302454.52260202669411453",
            reserveUSD: "244272.6345453411036014347917978001",
            volume0: "40878.678633569171867412",
            volume1: "49.979202337434702356",
            volumeUSD: "20.23983300840217870540577320681396",
            txCount: "1"
          },
          {
            date: "1729569600",
            reserve0: "246639578.675164250736398594",
            reserve1: "302504.501804364128816886",
            reserveUSD: "244279.4275118260396165543021060801",
            volume0: "50189.928063909537377739",
            volume1: "61.385979437017106382",
            volumeUSD: "24.85482451796397278612783880026361",
            txCount: "1"
          },
          {
            date: "1729566000",
            reserve0: "246589388.747100341199020855",
            reserve1: "302565.887783801145923268",
            reserveUSD: "243058.9657026790155616572493183199",
            volume0: "40282.068814432247522914",
            volume1: "49.488909164371367652",
            volumeUSD: "19.90468253152687543040066769624069",
            txCount: "3"
          },
          {
            date: "1729562400",
            reserve0: "246592920.815914773446543769",
            reserve1: "302561.35129296551729092",
            reserveUSD: "244301.0935818621630524150841072",
            volume0: "46766.840740643019176771",
            volume1: "57.414619365951073581",
            volumeUSD: "23.21763278888539530756551134848474",
            txCount: "2"
          },
          {
            date: "1729558800",
            reserve0: "246586487.65665541646572054",
            reserve1: "302569.022509507791287019",
            reserveUSD: "243079.6864609211754601339176320999",
            volume0: "17374.000000000000524288",
            volume1: "21.424030197162342798",
            volumeUSD: "8.6058818907872231074398741",
            txCount: "1"
          },
          {
            date: "1729555200",
            reserve0: "246603861.656655416466244828",
            reserve1: "302547.598479310628944221",
            reserveUSD: "243062.4746971396010139190378839001",
            volume0: "259519.23829022024210785",
            volume1: "319.358771169774849002",
            volumeUSD: "127.9142582151515610786175686292905",
            txCount: "3"
          },
          {
            date: "1729551600",
            reserve0: "246847080.894945636708352678",
            reserve1: "302248.138141057516971327",
            reserveUSD: "243128.86173783664105916123521704",
            volume0: "106701.031454675089177512",
            volume1: "130.942706838395688319",
            volumeUSD: "52.77143584712535431315977814320012",
            txCount: "3"
          },
          {
            date: "1729537200",
            reserve0: "246945147.20764320540168327",
            reserve1: "302127.706670064080345538",
            reserveUSD: "244203.8492153748622757891306583601",
            volume0: "72077.419433573189883781",
            volume1: "88.423358439624209559",
            volumeUSD: "35.73542580635915640983731149",
            txCount: "1"
          },
          {
            date: "1729533600",
            reserve0: "247017224.627076778591567051",
            reserve1: "302039.283311624456135979",
            reserveUSD: "245446.1042673117207674220194154599",
            volume0: "8660",
            volume1: "10.536403449979736402",
            volumeUSD: "4.302459608158689532590854704222935",
            txCount: "1"
          },
          {
            date: "1729522800",
            reserve0: "247008564.627076778591567051",
            reserve1: "302049.819715074435872381",
            reserveUSD: "248330.66402550686565222210814054",
            volume0: "301200.000000000008388608",
            volume1: "369.707016690503010278",
            volumeUSD: "151.9572553344306655648082256929082",
            txCount: "2"
          },
          {
            date: "1729519200",
            reserve0: "247307364.627076778599955659",
            reserve1: "301683.032833864786172219",
            reserveUSD: "247988.76864447538693109637249878",
            volume0: "22320.45",
            volume1: "27.094370253009600845",
            volumeUSD: "11.19097467929701427663856951540565",
            txCount: "1"
          },
          {
            date: "1729515600",
            reserve0: "247285044.177076778599955659",
            reserve1: "301710.127204117795773064",
            reserveUSD: "244992.3222559031726519041457646401",
            volume0: "4317939.746024447808296125",
            volume1: "5276.947660128764256077",
            volumeUSD: "2126.971138502267690016088087095888",
            txCount: "2"
          },
          {
            date: "1729504800",
            reserve0: "244672103.193461621168628424",
            reserve1: "304907.752476848690321287",
            reserveUSD: "252698.84318555650527666089606902",
            volume0: "11730",
            volume1: "14.545408602220555075",
            volumeUSD: "6.057407836607400081479637497021326",
            txCount: "1"
          },
          {
            date: "1729501200",
            reserve0: "244660373.193461621168628424",
            reserve1: "304922.297885450910876362",
            reserveUSD: "250161.8024807713139315699856536799",
            volume0: "392315.283758872183005021",
            volume1: "489.650479770909249046",
            volumeUSD: "203.05572634776813986451476817",
            txCount: "6"
          },
          {
            date: "1729497600",
            reserve0: "245052688.477220493351633445",
            reserve1: "304432.647405680001627316",
            reserveUSD: "254878.58060364980256722941027576",
            volume0: "123541.092696768747938745",
            volume1: "153.861034491048221697",
            volumeUSD: "64.40814153061150933175989371",
            txCount: "2"
          },
          {
            date: "1729494000",
            reserve0: "245176229.56991726209957219",
            reserve1: "304278.786371188953405619",
            reserveUSD: "256162.70720740610514882115476436",
            volume0: "34370.281779312509018356",
            volume1: "42.793912049258212347",
            volumeUSD: "18.00048560715373514901194877",
            txCount: "2"
          },
          {
            date: "1729490400",
            reserve0: "245210599.851696574608590546",
            reserve1: "304235.992459139695193272",
            reserveUSD: "257280.6961605840092606547087551999",
            volume0: "139658.219059218369172849",
            volume1: "173.69801182304379568",
            volumeUSD: "73.6031776634507207838141153",
            txCount: "2"
          },
          {
            date: "1729486800",
            reserve0: "245350258.070755792977763395",
            reserve1: "304062.294447316651397592",
            reserveUSD: "258354.20909072033207857834597392",
            volume0: "250281.888412298710821339",
            volume1: "310.805958886648259129",
            volumeUSD: "132.37979466600737683185886045",
            txCount: "3"
          },
          {
            date: "1729483200",
            reserve0: "245600539.959168091688584734",
            reserve1: "303751.488488430003138463",
            reserveUSD: "259471.2465247720425211445801708201",
            volume0: "105631.517569899061374138",
            volume1: "130.978582811957193007",
            volumeUSD: "55.94240265189864549941628749",
            txCount: "2"
          },
          {
            date: "1729479600",
            reserve0: "245706171.476737990749958872",
            reserve1: "303620.509905618045945456",
            reserveUSD: "262013.3450310144412439204919465601",
            volume0: "328132.632169553508602125",
            volume1: "404.799137573682929071",
            volumeUSD: "175.0668339083072141852368457990639",
            txCount: "2"
          },
          {
            date: "1729476000",
            reserve0: "245378038.844568437241356747",
            reserve1: "304025.309043191728874527",
            reserveUSD: "259612.58655944530091572510693736",
            volume0: "130423.768253521808439245",
            volume1: "162.004102260387069388",
            volumeUSD: "69.16908357633624109689998992",
            txCount: "3"
          },
          {
            date: "1729472400",
            reserve0: "245508462.612821959049795992",
            reserve1: "303863.304940931341805139",
            reserveUSD: "260680.3122359336790222900841624201",
            volume0: "113059.556057530709721085",
            volume1: "140.288962995420315548",
            volumeUSD: "60.17602336684014462602882772",
            txCount: "2"
          },
          {
            date: "1729468800",
            reserve0: "245621522.168879489759517077",
            reserve1: "303723.015977935921489591",
            reserveUSD: "263675.6541529270979138915574459201",
            volume0: "646774.236341923451290084",
            volume1: "799.471070387749616469",
            volumeUSD: "346.4852663614738919309852667758194",
            txCount: "9"
          }
        ],
        dayData: [
          {
            date: "1729555200",
            reserve0: "243721708.413592700330494537",
            reserve1: "306139.480933399957566962",
            reserveUSD: "240271.6551774283136126957565178801",
            volume0: "3966578.081189230564369401",
            volume1: "4918.995310305210676779",
            volumeUSD: "1938.946162538087193900234744600618",
            txCount: "18"
          },
          {
            date: "1729468800",
            reserve0: "246847080.894945636708352678",
            reserve1: "302248.138141057516971327",
            reserveUSD: "243128.86173783664105916123521704",
            volume0: "7104817.123011595155129013",
            volume1: "8726.548177452601917937",
            volumeUSD: "3587.273033294093589494129268243529",
            txCount: "44"
          },
          {
            date: "1729382400",
            reserve0: "244974747.932537566308226993",
            reserve1: "304522.48704832367110606",
            reserveUSD: "257914.4738330637389034718421532",
            volume0: "38310631.752399878833438246",
            volume1: "48878.875913957977807118",
            volumeUSD: "20735.29600417898496874968499019768",
            txCount: "345"
          },
          {
            date: "1729296000",
            reserve0: "231683535.403981257608288455",
            reserve1: "321820.402379620840857352",
            reserveUSD: "235855.36962071780907977755637872",
            volume0: "6836422.925312345519361905",
            volume1: "9597.048778486146923446",
            volumeUSD: "3555.825691181099608495517829585662",
            txCount: "62"
          },
          {
            date: "1729209600",
            reserve0: "226941457.59099310662280709",
            reserve1: "328511.177946656453247112",
            reserveUSD: "234205.6712002165532073355064272",
            volume0: "1938261.835388644990919027",
            volume1: "2813.966004476892037094",
            volumeUSD: "990.4086692396499972834907046745578",
            txCount: "44"
          },
          {
            date: "1729123200",
            reserve0: "225502599.554175553544213127",
            reserve1: "330598.491292044238470928",
            reserveUSD: "226843.3814413111645785947234572799",
            volume0: "8744661.060235175908649911",
            volume1: "12689.89646669647864366",
            volumeUSD: "4347.718316939113322132336154807679",
            txCount: "33"
          },
          {
            date: "1729036800",
            reserve0: "227088072.031447845903525514",
            reserve1: "328233.89010014397681812",
            reserveUSD: "231644.2144145513206331522276544",
            volume0: "10593055.77703565013161642",
            volume1: "15053.749108894983317146",
            volumeUSD: "5290.147788825684093969130356465269",
            txCount: "56"
          },
          {
            date: "1728950400",
            reserve0: "229846478.094683490266551328",
            reserve1: "324226.71665725746240259",
            reserveUSD: "230289.9885139782149147161551104",
            volume0: "5006710.6334015866136505",
            volume1: "7092.260593508784000087",
            volumeUSD: "2548.720127860248055419748013446247",
            txCount: "42"
          }
        ],
        name: "MAGIC / VEE",
        hasNFT: false,
        isNFTNFT: false,
        collections: [],
        volume24h0: 11071395204200827e-9,
        volume24h1: 13645.543487757814,
        volume24hUSD: 5526.219195832182,
        volume1wUSD: 42994.33579405697,
        apy: 0.06621183561510424
      },
      {
        id: "0x33f4668f5a9a36514d85657e699569dbda3d77f1",
        version: "V1",
        token0: {
          id: "0x539bde0d7dbd336b79148aa742883198bbf60342",
          name: "MAGIC",
          symbol: "MAGIC",
          decimals: 18,
          derivedMAGIC: "1",
          isNFT: false,
          isMAGIC: true,
          isETH: false,
          vaultCollections: [],
          vaultReserveItems: [],
          image: "/img/tokens/magic.png",
          collections: [],
          urlSlug: "",
          collectionId: "",
          collectionTokenIds: [],
          priceUSD: 0.39749764,
          reserve: "139488109227830414591577"
        },
        token1: {
          id: "0x9e64d3b9e8ec387a9a58ced80b71ed815f8d82b5",
          name: "Smolcoin",
          symbol: "SMOL",
          decimals: 18,
          derivedMAGIC: "0.000002324970753852755990947678754627225",
          isNFT: false,
          isMAGIC: false,
          isETH: false,
          vaultCollections: [],
          vaultReserveItems: [],
          image: "/img/tokens/smol.png",
          collections: [],
          urlSlug: "",
          collectionId: "",
          collectionTokenIds: [],
          priceUSD: 9241703877254913e-22,
          reserve: "59995640373833456489957010209"
        },
        reserve0: "139488.109227830414591577",
        reserve1: "59995640373.833456489957010209",
        reserveUSD: 109476.36933189894,
        totalSupply: "85812460278691370906882924",
        txCount: "14748",
        volume0: 5538921684116947e-9,
        volume1: 11034144900839192e-4,
        volumeUSD: 5670416445201307e-9,
        lpFee: "0.00375",
        protocolFee: "0.00125",
        royaltiesFee: "0",
        royaltiesBeneficiary: null,
        totalFee: "0.005",
        hourData: [
          {
            date: "1729591200",
            reserve0: "139488.109227830414591577",
            reserve1: "59995640373.833456489957010209",
            reserveUSD: "109476.36933189893467380386517798",
            volume0: "1144.880357152160082723",
            volume1: "494626857.860826383026402869",
            volumeUSD: "449.3586372607102052459930543423858",
            txCount: "4"
          },
          {
            date: "1729587600",
            reserve0: "139643.22887067825555743",
            reserve1: "59926955440.66313614782657402",
            reserveUSD: "110167.922622216746223041016806",
            volume0: "406.502927270184950612",
            volume1: "174431945.788478025948655467",
            volumeUSD: "160.45499761758637247687540184",
            txCount: "4"
          },
          {
            date: "1729576800",
            reserve0: "139236.725943408070606818",
            reserve1: "60101387386.451614173775229487",
            reserveUSD: "112452.35012212717898256520638468",
            volume0: "49.979202337434702356",
            volume1: "21516473.463643875593350232",
            volumeUSD: "20.18245804759217306780415828",
            txCount: "1"
          },
          {
            date: "1729558800",
            reserve0: "139186.746741070635904462",
            reserve1: "60122903859.915258049368579719",
            reserveUSD: "111820.6697986470997896785178858",
            volume0: "645.000000000000524288",
            volume1: "278715250.599014045341572388",
            volumeUSD: "259.1867990749062917801158467619276",
            txCount: "1"
          },
          {
            date: "1729548000",
            reserve0: "139831.74674107063642875",
            reserve1: "59844188609.316244004027007331",
            reserveUSD: "114250.59698933686527377250315",
            volume0: "1216.842531933392443476",
            volume1: "520083266.797114478415056722",
            volumeUSD: "497.3056766122630056487084863253972",
            txCount: "3"
          },
          {
            date: "1729522800",
            reserve0: "139147.085188589427444688",
            reserve1: "60136262511.339647004518902391",
            reserveUSD: "114399.96254489295048348301508192",
            volume0: "110.499450026160884333",
            volume1: "47860997.941689446820739166",
            volumeUSD: "45.5418067039275939054058895777996",
            txCount: "2"
          },
          {
            date: "1729519200",
            reserve0: "139257.584638615588329021",
            reserve1: "60088401513.397957557698163225",
            reserveUSD: "113889.35352259534819128816775872",
            volume0: "66.57960677310745141",
            volume1: "28801137.956508087251273631",
            volumeUSD: "27.29431054885369921515903239315526",
            txCount: "1"
          },
          {
            date: "1729508400",
            reserve0: "139324.164245388695780431",
            reserve1: "60059600375.441449470446889594",
            reserveUSD: "115428.21427943678587665928815908",
            volume0: "142.515404289042436795",
            volume1: "61556978.155025304679137249",
            volumeUSD: "59.15300818233794349954320581072367",
            txCount: "1"
          },
          {
            date: "1729501200",
            reserve0: "139466.679649677738217226",
            reserve1: "59998043397.286424165767752345",
            reserveUSD: "115094.59565820366111473455770348",
            volume0: "3356.248202954308906212",
            volume1: "1429473095.972291367561790353",
            volumeUSD: "1387.633566706534970243799356495598",
            txCount: "5"
          },
          {
            date: "1729497600",
            reserve0: "141539.927852632047123438",
            reserve1: "59114971005.828154441307828892",
            reserveUSD: "118500.74628082996628443378226868",
            volume0: "306.460181448242001209",
            volume1: "127928485.942853421946366623",
            volumeUSD: "128.7367441505832663073242560808715",
            txCount: "6"
          },
          {
            date: "1729494000",
            reserve0: "141272.789773580490084041",
            reserve1: "59234716718.883387224881553562",
            reserveUSD: "118933.10314113216040148706556604",
            volume0: "654.544309660508154339",
            volume1: "275108456.802029065195117879",
            volumeUSD: "275.8341507015639693130352613931858",
            txCount: "2"
          },
          {
            date: "1729490400",
            reserve0: "141601.859174007694381912",
            reserve1: "59095825175.685416290076671441",
            reserveUSD: "119747.2547920660252433187129792",
            volume0: "186.708494527744239477",
            volume1: "77789242.728906018839008728",
            volumeUSD: "79.094922731911531689012513",
            txCount: "3"
          },
          {
            date: "1729486800",
            reserve0: "141415.150679479950142435",
            reserve1: "59173614418.414322308915680169",
            reserveUSD: "120156.9549215263033020604956581",
            volume0: "222.876827045186274523",
            volume1: "93127243.382732253171203342",
            volumeUSD: "94.88855886736701740120594382",
            txCount: "2"
          },
          {
            date: "1729479600",
            reserve0: "141192.273852434763867912",
            reserve1: "59266741661.797054562086883511",
            reserveUSD: "121843.74493050986276478354891312",
            volume0: "132.196458348869482081",
            volume1: "55605419.891578164425524049",
            volumeUSD: "57.1583016718344431505145574395972",
            txCount: "1"
          },
          {
            date: "1729468800",
            reserve0: "141324.470310783633349993",
            reserve1: "59211136241.905476397661359462",
            reserveUSD: "123430.83926525873033807098929674",
            volume0: "381.800322319934650689",
            volume1: "160012257.440665434266074721",
            volumeUSD: "166.2207004783444741239395938484323",
            txCount: "5"
          }
        ],
        dayData: [
          {
            date: "1729555200",
            reserve0: "139488.109227830414591577",
            reserve1: "59995640373.833456489957010209",
            reserveUSD: "109476.36933189893467380386517798",
            volume0: "2246.362486759780259979",
            volume1: "969290527.711962329909980956",
            volumeUSD: "889.1828920007950425707884612243134",
            txCount: "10"
          },
          {
            date: "1729468800",
            reserve0: "139831.74674107063642875",
            reserve1: "59844188609.316244004027007331",
            reserveUSD: "114250.59698933686527377250315",
            volume0: "6777.271789326496924544",
            volume1: "2877346583.011393042571292463",
            volumeUSD: "2818.861747355521914497648096184761",
            txCount: "31"
          },
          {
            date: "1729382400",
            reserve0: "141706.270633103568000682",
            reserve1: "59051123984.464810963395284741",
            reserveUSD: "120018.49718313612564952578168684",
            volume0: "35436.725887134988025041",
            volume1: "16417519615.659747921265309748",
            volumeUSD: "15112.16079054464984089018734622131",
            txCount: "356"
          },
          {
            date: "1729296000",
            reserve0: "137947.615790718952152933",
            reserve1: "60612040795.894754222634989241",
            reserveUSD: "101098.89140042010423423608269638",
            volume0: "6973.680586721869576201",
            volume1: "3058061409.730537553678454093",
            volumeUSD: "2546.13191666723884230441544641793",
            txCount: "56"
          },
          {
            date: "1729209600",
            reserve0: "140316.26365907970657756",
            reserve1: "59578116940.490687138486657532",
            reserveUSD: "99531.3715862264163817118370576",
            volume0: "7503.764722635475312103",
            volume1: "3123688713.359266183121276979",
            volumeUSD: "2643.446064931470862558514651414755",
            txCount: "25"
          },
          {
            date: "1729123200",
            reserve0: "144774.909002134748179563",
            reserve1: "57730618976.057618703931992585",
            reserveUSD: "99338.71681492661829854938498488",
            volume0: "4575.143761582781456228",
            volume1: "1807492453.385331191001868172",
            volumeUSD: "1582.935538257772523184258364317222",
            txCount: "28"
          },
          {
            date: "1729036800",
            reserve0: "147284.875618961383742949",
            reserve1: "56977681128.908356266793016704",
            reserveUSD: "103417.07106161291977406574268524",
            volume0: "10347.423865326651087131",
            volume1: "4133403545.610007805450260971",
            volumeUSD: "3659.328717379891811617072038432811",
            txCount: "41"
          },
          {
            date: "1728950400",
            reserve0: "141367.158047190026834566",
            reserve1: "59348350354.654062688359720007",
            reserveUSD: "101974.89693162230487045675812876",
            volume0: "8101.473368632049600006",
            volume1: "3251400059.030900361056635435",
            volumeUSD: "2931.883395344515509892618344936935",
            txCount: "33"
          }
        ],
        name: "MAGIC / SMOL",
        hasNFT: false,
        isNFTNFT: false,
        collections: [],
        volume24h0: 9023.634276086275,
        volume24h1: 3846637110723356e-6,
        volume24hUSD: 3708.0446393563166,
        volume1wUSD: 32183.93106248186,
        apy: 0.11496088162326057
      },
      {
        id: "0x7bc27907ac638dbceb74b1fb02fc154da3e15334",
        version: "V1",
        token0: {
          id: "0x539bde0d7dbd336b79148aa742883198bbf60342",
          name: "MAGIC",
          symbol: "MAGIC",
          decimals: 18,
          derivedMAGIC: "1",
          isNFT: false,
          isMAGIC: true,
          isETH: false,
          vaultCollections: [],
          vaultReserveItems: [],
          image: "/img/tokens/magic.png",
          collections: [],
          urlSlug: "",
          collectionId: "",
          collectionTokenIds: [],
          priceUSD: 0.39749764,
          reserve: "68737066623870774147419"
        },
        token1: {
          id: "0xccd05a0fcfc1380e9da27862adb2198e58e0d66f",
          name: "Anima",
          symbol: "ANIMA",
          decimals: 18,
          derivedMAGIC: "0.01035657160732818821621681396728536",
          isNFT: false,
          isMAGIC: false,
          isETH: false,
          vaultCollections: [],
          vaultReserveItems: [],
          image: "/img/tokens/anima.png",
          collections: [],
          urlSlug: "",
          collectionId: "",
          collectionTokenIds: [],
          priceUSD: 0.004116712772403961,
          reserve: "6637048362146526805209913"
        },
        reserve0: "68737.066623870774147419",
        reserve1: "6637048.362146526805209913",
        reserveUSD: 54220.672488396725,
        totalSupply: "505493121384207630900757",
        txCount: "29670",
        volume0: 6923627634201265e-9,
        volume1: 8799577433684662e-8,
        volumeUSD: 5157927751707544e-9,
        lpFee: "0.00375",
        protocolFee: "0.00125",
        royaltiesFee: "0",
        royaltiesBeneficiary: null,
        totalFee: "0.005",
        hourData: [
          {
            date: "1729594800",
            reserve0: "68737.066623870774147419",
            reserve1: "6637048.362146526805209913",
            reserveUSD: "54220.67248839672228373126236968",
            volume0: "80",
            volume1: "7694.896907278884349151",
            volumeUSD: "31.5525088",
            txCount: "1"
          },
          {
            date: "1729587600",
            reserve0: "68657.066623870774147419",
            reserve1: "6644743.259053805689559064",
            reserveUSD: "54165.2213605839513976332166398",
            volume0: "134.200859081073276524",
            volume1: "12974.560812376449109775",
            volumeUSD: "52.9371526949242349115377404",
            txCount: "2"
          },
          {
            date: "1729584000",
            reserve0: "68522.865764789700870895",
            reserve1: "6657717.819866182138668839",
            reserveUSD: "54386.9192445253647970294372886",
            volume0: "41.900788578987241499",
            volume1: "4061.372908588826373298",
            volumeUSD: "16.62842599541636161902325766",
            txCount: "1"
          },
          {
            date: "1729580400",
            reserve0: "68480.964976210713629396",
            reserve1: "6661779.192774770965042137",
            reserveUSD: "55307.57347264785730614915270696",
            volume0: "1260",
            volume1: "124505.063639297336942099",
            volumeUSD: "508.8095838",
            txCount: "2"
          },
          {
            date: "1729573200",
            reserve0: "66920.964976210713629396",
            reserve1: "6757100.471423207079335894",
            reserveUSD: "54040.23713835479744115056233888",
            volume0: "26.508919436705331398",
            volume1: "2683.629340489188365409",
            volumeUSD: "10.73122758532380612035358317806218",
            txCount: "1"
          },
          {
            date: "1729569600",
            reserve0: "66947.473895647418960794",
            reserve1: "6754416.842082717890970485",
            reserveUSD: "54061.64370792758148275456228432",
            volume0: "280.307718622982445103",
            volume1: "28247.077942690119829839",
            volumeUSD: "113.0433240374974090980233466815641",
            txCount: "1"
          },
          {
            date: "1729562400",
            reserve0: "67227.781614270401405897",
            reserve1: "6726169.764140027771140646",
            reserveUSD: "54282.61242641639400564591631452",
            volume0: "24.871701411838538741",
            volume1: "2500",
            volumeUSD: "10.08795018745647873405801279363099",
            txCount: "1"
          },
          {
            date: "1729558800",
            reserve0: "67252.653315682239944638",
            reserve1: "6723669.764140027771140646",
            reserveUSD: "54029.8334114073604519389498042",
            volume0: "25.684897839005421331",
            volume1: "2574.6209830955728159",
            volumeUSD: "10.3445252141974921869049360754163",
            txCount: "1"
          },
          {
            date: "1729555200",
            reserve0: "67278.338213521245365969",
            reserve1: "6721095.143156932198324746",
            reserveUSD: "54050.4682961741578774598344371",
            volume0: "256.651684999008612276",
            volume1: "25618.635662856234197859",
            volumeUSD: "103.2420382051974552242480005905419",
            txCount: "2"
          },
          {
            date: "1729551600",
            reserve0: "67534.989898520253978245",
            reserve1: "6695476.507494075964126887",
            reserveUSD: "54325.2485275543380508863249324",
            volume0: "83.62777764714263651",
            volume1: "8276.297183943785433991",
            volumeUSD: "33.71976781554534116021459712",
            txCount: "2"
          },
          {
            date: "1729548000",
            reserve0: "67451.362120873111341735",
            reserve1: "6703752.804678019749560878",
            reserveUSD: "55111.6507492659790923352326054",
            volume0: "1276.758982154078759537",
            volume1: "127004.47855084238944526",
            volumeUSD: "518.0658420247514409411052217692973",
            txCount: "3"
          },
          {
            date: "1729537200",
            reserve0: "68076.107223133634009736",
            reserve1: "6641668.917756573663572556",
            reserveUSD: "55331.5519594478971333197195456",
            volume0: "4.174731507665151621",
            volume1: "406.099870080169291583",
            volumeUSD: "1.6965891761112777599859708",
            txCount: "1"
          },
          {
            date: "1729522800",
            reserve0: "68071.932491625968858115",
            reserve1: "6642075.017626653832864139",
            reserveUSD: "55965.4305143798290754975171241",
            volume0: "41.975787513284331884",
            volume1: "4105.545458955928056278",
            volumeUSD: "17.29644866228314268825297942923924",
            txCount: "2"
          },
          {
            date: "1729519200",
            reserve0: "68277.673659284453539701",
            reserve1: "6653929.055481385203330952",
            reserveUSD: "55752.67518566410207071488598192",
            volume0: "20.364731507665151622",
            volume1: "1990",
            volumeUSD: "8.337015821357065175986307076229301",
            txCount: "1"
          },
          {
            date: "1729508400",
            reserve0: "68298.038390792118691323",
            reserve1: "6651939.055481385203330952",
            reserveUSD: "56877.53955649201227323983593474",
            volume0: "1401.646161995073220266",
            volume1: "136552.520013510981395014",
            volumeUSD: "583.3755074001907664558224949814281",
            txCount: "2"
          },
          {
            date: "1729501200",
            reserve0: "67561.973859088086518959",
            reserve1: "6723787.915467874217086274",
            reserveUSD: "56564.56410549868296350333612074",
            volume0: "41.24473952269510987",
            volume1: "4094.87459837962296387",
            volumeUSD: "17.2655606363124400917976841",
            txCount: "1"
          },
          {
            date: "1729497600",
            reserve0: "67520.729119565391409089",
            reserve1: "6727882.790066253840050144",
            reserveUSD: "56530.03298422605808331974075254",
            volume0: "50.094312440393851235",
            volume1: "4980.204759016138728617",
            volumeUSD: "20.97010185985250022254185105",
            txCount: "1"
          },
          {
            date: "1729494000",
            reserve0: "67470.634807124997557854",
            reserve1: "6732862.994825269978778761",
            reserveUSD: "56758.75797909861572307774415684",
            volume0: "40.957973743913961486",
            volume1: "4077.390629729747461507",
            volumeUSD: "17.22767042055156375252948978",
            txCount: "1"
          },
          {
            date: "1729490400",
            reserve0: "67429.676833381083596368",
            reserve1: "6736940.385454999726240268",
            reserveUSD: "57022.6883983999805638383170688",
            volume0: "40.908506362503625526",
            volume1: "4077.406086173579475362",
            volumeUSD: "17.2973764720624979840590008",
            txCount: "1"
          },
          {
            date: "1729486800",
            reserve0: "67388.768327018579970842",
            reserve1: "6741017.79154117330571563",
            reserveUSD: "57258.56924933927696155596876892",
            volume0: "109.685552832493557323",
            volume1: "10956.507072706328101608",
            volumeUSD: "46.70106796770068053828824143",
            txCount: "3"
          },
          {
            date: "1729479600",
            reserve0: "67279.082774186086413519",
            reserve1: "6751974.298613879633817238",
            reserveUSD: "58529.76369016381293609909548196",
            volume0: "1492.277805258883085169",
            volume1: "146943.711999690328029645",
            volumeUSD: "638.2472451312008377408469477224161",
            txCount: "2"
          },
          {
            date: "1729472400",
            reserve0: "68771.360579444969498688",
            reserve1: "6605030.586614189305787593",
            reserveUSD: "59036.189932859608783907974752",
            volume0: "44.490836381065252556",
            volume1: "4262.986175891849232439",
            volumeUSD: "19.08523853014946124257680484",
            txCount: "2"
          },
          {
            date: "1729468800",
            reserve0: "68726.869743063904246132",
            reserve1: "6609293.572790081155020032",
            reserveUSD: "59724.14876379686743383353491832",
            volume0: "203.280100397971369502",
            volume1: "19550.024161978665161188",
            volumeUSD: "88.17858326544218523377992636554851",
            txCount: "6"
          }
        ],
        dayData: [
          {
            date: "1729555200",
            reserve0: "68737.066623870774147419",
            reserve1: "6637048.362146526805209913",
            reserveUSD: "54220.67248839672228373126236968",
            volume0: "2130.126569969600866872",
            volume1: "210859.85819667261198333",
            volumeUSD: "857.3767365200132378941488773792155",
            txCount: "12"
          },
          {
            date: "1729468800",
            reserve0: "67534.989898520253978245",
            reserve1: "6695476.507494075964126887",
            reserveUSD: "54325.2485275543380508863249324",
            volume0: "4851.487999264829064107",
            volume1: "477278.046560899512776362",
            volumeUSD: "2027.464015183511200987787517264158",
            txCount: "28"
          },
          {
            date: "1729382400",
            reserve0: "68929.484843461875615634",
            reserve1: "6589807.308492355943604322",
            reserveUSD: "58380.00778342032542277532926108",
            volume0: "14607.892292397526557008",
            volume1: "1479358.361698128173811342",
            volumeUSD: "6253.733791514043160493512843726055",
            txCount: "219"
          },
          {
            date: "1729296000",
            reserve0: "68109.761597102001773642",
            reserve1: "6664344.74180433447656626",
            reserveUSD: "50168.18467035576487138652842416",
            volume0: "1508.131181778568357697",
            volume1: "148029.944873077873957261",
            volumeUSD: "553.4224014556975325908558900424919",
            txCount: "34"
          },
          {
            date: "1729209600",
            reserve0: "68567.771943016972083025",
            reserve1: "6619351.851695010168429559",
            reserveUSD: "48884.062791998255717334263065",
            volume0: "4975.61722531281059144",
            volume1: "489475.851107584387574036",
            volumeUSD: "1753.21807912999992975144306470153",
            txCount: "24"
          },
          {
            date: "1729123200",
            reserve0: "66716.445788809607005249",
            reserve1: "6801023.030471059587717001",
            reserveUSD: "45778.14043050261062841597258024",
            volume0: "3729.223593651269511591",
            volume1: "368865.692174256660210948",
            volumeUSD: "1278.934332089142149524310049419181",
            txCount: "20"
          },
          {
            date: "1729036800",
            reserve0: "70376.189011118928972556",
            reserve1: "6710259.249750846514112856",
            reserveUSD: "49666.52593977063195914445003072",
            volume0: "5749.247159238231849712",
            volume1: "551290.768033304963878588",
            volumeUSD: "2026.273998822334627272441526375385",
            txCount: "33"
          },
          {
            date: "1728950400",
            reserve0: "71788.944055563578173125",
            reserve1: "6666603.634033571074174974",
            reserveUSD: "50989.8606519300360389419632",
            volume0: "5920.53219087929055663",
            volume1: "561366.990924156160569647",
            volumeUSD: "2126.921558776196203697407206864977",
            txCount: "41"
          }
        ],
        name: "MAGIC / ANIMA",
        hasNFT: false,
        isNFTNFT: false,
        collections: [],
        volume24h0: 6981.61456923443,
        volume24h1: 688137.9047575722,
        volume24hUSD: 2884.8407517035243,
        volume1wUSD: 16877.34491349094,
        apy: 0.12374163843695829
      },
      {
        id: "0x3e8fb78ec6fb60575967bb07ac64e5fa9f498a4a",
        version: "V1",
        token0: {
          id: "0x539bde0d7dbd336b79148aa742883198bbf60342",
          name: "MAGIC",
          symbol: "MAGIC",
          decimals: 18,
          derivedMAGIC: "1",
          isNFT: false,
          isMAGIC: true,
          isETH: false,
          vaultCollections: [],
          vaultReserveItems: [],
          image: "/img/tokens/magic.png",
          collections: [],
          urlSlug: "",
          collectionId: "",
          collectionTokenIds: [],
          priceUSD: 0.39749764,
          reserve: "47784698011401146819303"
        },
        token1: {
          id: "0xeeac5e75216571773c0064b3b591a86253791db6",
          name: "Ellerium",
          symbol: "ELM",
          decimals: 18,
          derivedMAGIC: "0.0424572118182195900431379223632869",
          isNFT: false,
          isMAGIC: false,
          isETH: false,
          vaultCollections: [],
          vaultReserveItems: [],
          image: "/img/tokens/elm.png",
          collections: [],
          urlSlug: "",
          collectionId: "",
          collectionTokenIds: [],
          priceUSD: 0.016876641498722394,
          reserve: "1125478946097336090713960"
        },
        reserve0: "47784.698011401146819303",
        reserve1: "1125478.94609733609071396",
        reserveUSD: 38383.58239794818,
        totalSupply: "215777221243437686039130",
        txCount: "7061",
        volume0: 1634583732943821e-9,
        volume1: 4878208419035796e-9,
        volumeUSD: 1.1669710346558797e6,
        lpFee: "0.00375",
        protocolFee: "0.00125",
        royaltiesFee: "0",
        royaltiesBeneficiary: null,
        totalFee: "0.005",
        hourData: [
          {
            date: "1729576800",
            reserve0: "47784.698011401146819303",
            reserve1: "1125478.94609733609071396",
            reserveUSD: "38383.58239794817613917427431088",
            volume0: "8.091876524982042691",
            volume1: "191.13",
            volumeUSD: "3.25916985349158419550615828438965",
            txCount: "1"
          },
          {
            date: "1729566000",
            reserve0: "47792.789887926128861994",
            reserve1: "1125287.81609733609071396",
            reserveUSD: "38393.17830338277453339668792556",
            volume0: "22.394808393850893968",
            volume1: "525.245249617142782021",
            volumeUSD: "8.997969691529686973962923866499555",
            txCount: "2"
          },
          {
            date: "1729562400",
            reserve0: "47775.117538640798914406",
            reserve1: "1125701.541346953233495981",
            reserveUSD: "38575.69187477154878037255016296",
            volume0: "155.592475047470815141",
            volume1: "3672.550890335580282757",
            volumeUSD: "62.92573401404746226351428684215444",
            txCount: "2"
          },
          {
            date: "1729555200",
            reserve0: "48081.235827974881732627",
            reserve1: "1125552.708911725745117997",
            reserveUSD: "38676.61918350145338754539239304",
            volume0: "18.3038262214544692",
            volume1: "430.47",
            volumeUSD: "7.395977162197749810564979895323705",
            txCount: "1"
          },
          {
            date: "1729530000",
            reserve0: "48099.539654196336201827",
            reserve1: "1125122.238911725745117997",
            reserveUSD: "39302.4753581753711044998746717",
            volume0: "8.680772459841142686",
            volume1: "204.04",
            volumeUSD: "3.563735918969456520469982647703735",
            txCount: "1"
          },
          {
            date: "1729494000",
            reserve0: "48108.220426656177344513",
            reserve1: "1124918.198911725745117997",
            reserveUSD: "40500.79248176517043738850186972",
            volume0: "24.49698037935775735",
            volume1: "575.398763916733127667",
            volumeUSD: "10.35813357549054566306629183942981",
            txCount: "1"
          },
          {
            date: "1729486800",
            reserve0: "48132.717407035535101863",
            reserve1: "1124342.80014780901199033",
            reserveUSD: "41333.10275906974284767161364148",
            volume0: "2.181419924878905106",
            volume1: "51.21",
            volumeUSD: "0.941291300132708128292299196326178",
            txCount: "1"
          }
        ],
        dayData: [
          {
            date: "1729555200",
            reserve0: "47784.698011401146819303",
            reserve1: "1125478.94609733609071396",
            reserveUSD: "38383.58239794817613917427431088",
            volume0: "204.382986187758221",
            volume1: "4819.396139952723064778",
            volumeUSD: "82.57885072126648324354834888836736",
            txCount: "6"
          },
          {
            date: "1729468800",
            reserve0: "48099.539654196336201827",
            reserve1: "1125122.238911725745117997",
            reserveUSD: "39302.4753581753711044998746717",
            volume0: "35.359172764077805142",
            volume1: "830.648763916733127667",
            volumeUSD: "14.86316079459271031182857368345973",
            txCount: "3"
          },
          {
            date: "1729382400",
            reserve0: "48134.898826960414006969",
            reserve1: "1124291.59014780901199033",
            reserveUSD: "41390.20888508540115927237967798",
            volume0: "36.182662208822743099",
            volume1: "847.720403318403644852",
            volumeUSD: "15.38750756086282366748499185389494",
            txCount: "3"
          },
          {
            date: "1729296000",
            reserve0: "48170.909189169236750068",
            reserve1: "1123447.870551127415635182",
            reserveUSD: "34575.71441583744086641404847424",
            volume0: "111.342818875384733763",
            volume1: "2603.755121789853344658",
            volumeUSD: "40.34568634953428250174311018837753",
            txCount: "2"
          },
          {
            date: "1729209600",
            reserve0: "48282.252008044621483831",
            reserve1: "1120844.115429337562290524",
            reserveUSD: "34248.33757908825930306988686276",
            volume0: "98.343222241874477937",
            volume1: "2286.03",
            volumeUSD: "34.98367554230224940319001234239278",
            txCount: "6"
          },
          {
            date: "1729123200",
            reserve0: "48378.895230286495961768",
            reserve1: "1118518.774697160969734064",
            reserveUSD: "32670.79818170419466297767137728",
            volume0: "59.467086616332288866",
            volume1: "1376.722009508366828215",
            volumeUSD: "20.40615980743899259876326196166647",
            txCount: "3"
          },
          {
            date: "1729036800",
            reserve0: "48388.362316902828250634",
            reserve1: "1118292.850215486069161183",
            reserveUSD: "33820.2038838949176965690732684",
            volume0: "32.603965592663364092",
            volume1: "755.26",
            volumeUSD: "11.42055373975990952345842872723764",
            txCount: "1"
          },
          {
            date: "1728950400",
            reserve0: "48420.966282495491614726",
            reserve1: "1117537.590215486069161183",
            reserveUSD: "35219.98632905918958318838716108",
            volume0: "33.93902951786909308",
            volume1: "785.77",
            volumeUSD: "12.47461880614835564290514792080864",
            txCount: "2"
          }
        ],
        name: "MAGIC / ELM",
        hasNFT: false,
        isNFTNFT: false,
        collections: [],
        volume24h0: 239.74215895183602,
        volume24h1: 5650.044903869457,
        volume24hUSD: 97.44201151585919,
        volume1wUSD: 232.4602133219058,
        apy: 0.002502791264658022
      }
    ]
  };
}
const RowSkeleton = () => /* @__PURE__ */ jsxs("tr", { children: [
  /* @__PURE__ */ jsx("td", { className: "px-4 py-3.5 sm:px-5", children: /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
    /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
      /* @__PURE__ */ jsx(Skeleton, { className: "h-9 w-9 rounded-full" }),
      /* @__PURE__ */ jsx(Skeleton, { className: "-translate-x-1/3 h-9 w-9 rounded-full" })
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "-ml-2 flex-1 space-y-1 sm:ml-0", children: [
      /* @__PURE__ */ jsx(Skeleton, { className: "h-4 w-1/2" }),
      /* @__PURE__ */ jsx(Skeleton, { className: "h-4 w-1/4" })
    ] })
  ] }) }),
  /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 sm:table-cell sm:px-5", children: /* @__PURE__ */ jsx(Skeleton, { className: "h-4" }) }),
  /* @__PURE__ */ jsx("td", { className: "px-4 py-3.5 sm:px-5", children: /* @__PURE__ */ jsx(Skeleton, { className: "h-4" }) }),
  /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 sm:table-cell sm:px-5", children: /* @__PURE__ */ jsx(Skeleton, { className: "h-4" }) }),
  /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 sm:table-cell sm:px-5", children: /* @__PURE__ */ jsx(Skeleton, { className: "h-4" }) })
] });
function PoolsListPage$1() {
  const { pools } = useLoaderData();
  const revalidator = useRevalidator();
  const navigate = useNavigate();
  const refetch = useCallback(() => {
    if (revalidator.state === "idle") ;
  }, [revalidator]);
  useFocusInterval(refetch, 5e3);
  return /* @__PURE__ */ jsxs("table", { className: "mt-4 w-full table-fixed rounded-md bg-night-1100 sm:mt-6", children: [
    /* @__PURE__ */ jsx("thead", { children: /* @__PURE__ */ jsxs("tr", { className: "text-night-100 text-sm", children: [
      /* @__PURE__ */ jsx("th", { className: "w-2/3 px-4 py-2.5 text-left font-normal text-sm sm:w-1/3 sm:px-5", children: "Name" }),
      /* @__PURE__ */ jsx("th", { className: "hidden px-4 py-2.5 text-right font-normal sm:table-cell sm:px-5", children: "Volume (24h)" }),
      /* @__PURE__ */ jsx("th", { className: "px-4 py-2.5 text-right font-normal sm:px-5", children: /* @__PURE__ */ jsx("abbr", { title: "Total Value Locked", className: "no-underline", children: "TVL" }) }),
      /* @__PURE__ */ jsx("th", { className: "hidden px-4 py-2.5 text-right font-normal sm:table-cell sm:px-5", children: "LP Fees" }),
      /* @__PURE__ */ jsx("th", { className: "hidden px-4 py-2.5 text-right font-normal sm:table-cell sm:px-5", children: /* @__PURE__ */ jsx("abbr", { title: "Annual Percentage Yield", className: "no-underline", children: "APY" }) })
    ] }) }),
    /* @__PURE__ */ jsx("tbody", { children: /* @__PURE__ */ jsx(
      Suspense$1,
      {
        fallback: Array.from({ length: 5 }).map((_, i) => (
          // biome-ignore lint/suspicious/noArrayIndexKey: skeleton rows are identical
          /* @__PURE__ */ jsx(RowSkeleton, {}, i)
        )),
        children: /* @__PURE__ */ jsx(Await, { resolve: pools, children: (pools2) => pools2.map((pool) => (
          // biome-ignore lint/a11y/useKeyWithClickEvents: it is only used for additional hit space
          /* @__PURE__ */ jsxs(
            "tr",
            {
              className: "cursor-pointer border-night-900 border-t transition-colors hover:bg-night-1000",
              onClick: () => navigate(`/pools/${pool.id}`),
              children: [
                /* @__PURE__ */ jsx("td", { className: "px-4 py-3.5 text-left font-medium text-white sm:px-5", children: /* @__PURE__ */ jsxs(
                  Link,
                  {
                    to: `/pools/${pool.id}`,
                    prefetch: "intent",
                    className: "flex items-center",
                    onClick: (e) => e.stopPropagation(),
                    children: [
                      /* @__PURE__ */ jsx(PoolImage, { pool }),
                      /* @__PURE__ */ jsxs("div", { className: "-ml-2 space-y-1 sm:ml-0", children: [
                        /* @__PURE__ */ jsx("span", { className: "block", children: pool.name }),
                        /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-1", children: [
                          /* @__PURE__ */ jsx(
                            Badge,
                            {
                              size: "xs",
                              color: pool.version === "V2" ? "primary" : "secondary",
                              children: pool.version
                            }
                          ),
                          /* @__PURE__ */ jsx(Badge, { size: "xs", children: formatPercent(pool.lpFee, 3) })
                        ] })
                      ] })
                    ]
                  }
                ) }),
                /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 text-right text-night-200 text-sm sm:table-cell sm:px-5", children: getPoolVolume24hDisplay(pool) }),
                /* @__PURE__ */ jsx("td", { className: "px-4 py-3.5 text-right text-night-200 text-sm sm:px-5", children: getPoolReserveDisplay(pool) }),
                /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 text-right text-night-200 text-sm sm:table-cell sm:px-5", children: getPoolFeesDisplay(pool) }),
                /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 text-right text-night-200 text-sm sm:table-cell sm:px-5", children: formatPercent(pool.apy) })
              ]
            },
            pool.id
          )
        )) })
      }
    ) })
  ] });
}

const route9 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: PoolsListPage$1,
  handle,
  loader: loader$4
}, Symbol.toStringTag, { value: 'Module' }));

const OG_IMAGE_WIDTH = 1200;
const OG_IMAGE_HEIGHT = 600;
const loader$3 = async ({ request }) => {
  const { origin } = new URL(request.url);
  const png = await generateOgImage(/* @__PURE__ */ jsx("div", { children: "helloworld" }), origin);
  return new Response(png, {
    status: 200,
    headers: {
      "Content-Type": "image/png",
      "cache-control": ENV.NODE_ENV === "development" ? "no-cache, no-store" : "public, immutable, no-transform, max-age=31536000"
    }
  });
};

const route10 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  OG_IMAGE_HEIGHT,
  OG_IMAGE_WIDTH,
  loader: loader$3
}, Symbol.toStringTag, { value: 'Module' }));

const loader$2 = async () => {
  try {
    await fetchTokens();
    return new Response("OK");
  } catch (err) {
    console.error("Healthcheck failed:", err);
    return new Response("ERROR", { status: 500 });
  }
};

const route11 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  loader: loader$2
}, Symbol.toStringTag, { value: 'Module' }));

const Dialog = DialogPrimitive.Root;
const DialogTrigger = DialogPrimitive.Trigger;
const DialogClose = DialogPrimitive.Close;
const DialogPortal = ({
  children,
  ...props
}) => /* @__PURE__ */ jsx(DialogPrimitive.Portal, { ...props, children: /* @__PURE__ */ jsx("div", { className: "fixed inset-0 z-50 flex items-end justify-center sm:items-center", children }) });
DialogPortal.displayName = DialogPrimitive.Portal.displayName;
const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  DialogPrimitive.Overlay,
  {
    ref,
    className: cn(
      "data-[state=closed]:fade-out data-[state=open]:fade-in fixed inset-0 z-50 bg-background/80 backdrop-blur-xl transition-all duration-100 data-[state=closed]:animate-out",
      className
    ),
    ...props
  }
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;
const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ jsxs(DialogPortal, { children: [
  /* @__PURE__ */ jsx(DialogOverlay, {}),
  /* @__PURE__ */ jsxs(
    DialogPrimitive.Content,
    {
      ref,
      className: cn(
        "data-[state=open]:fade-in-90 data-[state=open]:slide-in-from-bottom-10 sm:zoom-in-90 data-[state=open]:sm:slide-in-from-bottom-0 fixed z-50 grid w-full animate-in gap-4 rounded-none rounded-b-lg border border-none bg-background bg-transparent p-6 shadow-none sm:max-w-lg sm:rounded-lg",
        className
      ),
      ...props,
      children: [
        children,
        /* @__PURE__ */ jsx(DialogPrimitive.Close, { asChild: true, children: /* @__PURE__ */ jsxs(
          Button,
          {
            variant: "ghost",
            className: "absolute top-5 right-6 h-8 rounded-full px-2",
            children: [
              /* @__PURE__ */ jsx(XIcon, { className: "h-4 w-4" }),
              /* @__PURE__ */ jsx("span", { className: "sr-only", children: "Close" })
            ]
          }
        ) })
      ]
    }
  )
] }));
DialogContent.displayName = DialogPrimitive.Content.displayName;
const DialogHeader = ({
  className,
  ...props
}) => /* @__PURE__ */ jsx(
  "div",
  {
    className: cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    ),
    ...props
  }
);
DialogHeader.displayName = "DialogHeader";
const DialogTitle = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  DialogPrimitive.Title,
  {
    ref,
    className: cn(
      "font-semibold text-honey-25 text-lg leading-none tracking-tight",
      className
    ),
    ...props
  }
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;
const DialogDescription = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  DialogPrimitive.Description,
  {
    ref,
    className: cn("text-muted-foreground text-sm", className),
    ...props
  }
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

const createCollectionUrl = (url, slug) => `${url}/collection/${slug}`;
const useTrove = () => {
  const chainId = useChainId();
  const url = chainId === arbitrumSepolia$1.id ? "https://app-testnet.treasure.lol" : "https://app.treasure.lol";
  return {
    url,
    createCollectionUrl: (slug) => createCollectionUrl(url, slug),
    createTokenUrl: (slug, tokenId) => `${createCollectionUrl(url, slug)}/${tokenId}`
  };
};

const DEFAULT_STATE$2 = {
  results: [],
  page: 1,
  hasNextPage: false,
  isLoading: false,
  error: void 0
};
const useVaultItems = ({
  id,
  type,
  address,
  resultsPerPage = 25,
  enabled = true
}) => {
  const { load, state, data } = useFetcher();
  const [{ results, page, hasNextPage, isLoading, error }, setState] = useState(DEFAULT_STATE$2);
  useEffect(() => {
    if (data?.ok) {
      setState((curr) => ({
        ...curr,
        results: curr.page === 1 ? data.results : [...curr.results, ...data.results],
        hasNextPage: data.results.length === resultsPerPage,
        isLoading: false,
        error: void 0
      }));
    } else if (data?.error) {
      setState({ ...DEFAULT_STATE$2, error: data.error });
    }
  }, [data, resultsPerPage]);
  useEffect(() => {
    if (enabled) {
      const params = new URLSearchParams({
        type,
        page: page.toString(),
        resultsPerPage: resultsPerPage.toString()
      });
      if (type === "inventory" && address) {
        params.set("address", address);
      }
      setState((curr) => ({ ...curr, isLoading: true }));
      load(`/resources/vaults/${id}/items?${params.toString()}`);
    } else {
      setState(DEFAULT_STATE$2);
    }
  }, [enabled, id, type, address, page, resultsPerPage, load]);
  return {
    isLoading: isLoading || state === "loading",
    results,
    page,
    hasNextPage,
    loadNextPage: () => setState((curr) => ({ ...curr, isLoading: true, page: curr.page + 1 })),
    refetch: () => setState({ ...DEFAULT_STATE$2, isLoading: true }),
    error
  };
};

const IconToggle = ({ icons, onChange }) => {
  const [selected, setSelected] = useState(0);
  const handleSelect = (id, index) => {
    setSelected(index);
    onChange(id);
  };
  return /* @__PURE__ */ jsxs("div", { className: "relative flex h-9 items-center rounded-md bg-night-1000 p-1", children: [
    /* @__PURE__ */ jsx(
      "div",
      {
        className: "-translate-y-1/2 absolute top-1/2 z-5 h-7 w-7 rounded bg-night-700 transition-all",
        style: { left: selected * 28 + 4 }
      }
    ),
    icons.map(({ id, icon: Icon }, index) => /* @__PURE__ */ jsx(
      "button",
      {
        type: "button",
        className: cn(
          "relative z-10 flex h-7 w-7 items-center justify-center text-night-600 hover:text-night-100",
          index === selected && "text-night-100"
        ),
        onClick: () => handleSelect(id, index),
        children: /* @__PURE__ */ jsx(Icon, { className: "h-4 w-4" })
      },
      id
    ))
  ] });
};

const NumberSelect = ({
  max = 99,
  onChange,
  value
}) => {
  const updateNumber = (direction) => {
    if (direction === "add" && value < max) {
      onChange(value + 1);
    }
    if (direction === "sub" && value > 0) {
      onChange(value - 1);
    }
  };
  const overrideNumber = (stringValue) => {
    const newValue = Number(stringValue);
    if (Number.isNaN(newValue)) return;
    onChange(Math.min(newValue, max));
  };
  return /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2 rounded-md bg-night-1100 p-2", children: [
    /* @__PURE__ */ jsx(
      "button",
      {
        type: "button",
        className: cn(
          "flex h-6 w-6 items-center justify-center rounded-md text-night-400 opacity-50 transition-colors",
          value > 1 && "opacity-100 hover:bg-night-1000 hover:text-night-200"
        ),
        disabled: value <= 1,
        onClick: () => updateNumber("sub"),
        children: /* @__PURE__ */ jsx(Minus, { className: "w-4" })
      }
    ),
    /* @__PURE__ */ jsx(
      "input",
      {
        value,
        min: 0,
        max,
        onChange: (e) => {
          overrideNumber(e.target.value);
        },
        className: "center w-10 bg-transparent text-center font-medium text-night-100 text-sm"
      }
    ),
    /* @__PURE__ */ jsx(
      "button",
      {
        type: "button",
        className: cn(
          "flex h-6 w-6 items-center justify-center rounded-md text-night-400 opacity-50 transition-colors",
          value < max && "opacity-100 hover:bg-night-1000 hover:text-night-200"
        ),
        disabled: value >= max,
        onClick: () => updateNumber("add"),
        children: /* @__PURE__ */ jsx(Plus, { className: "w-4" })
      }
    )
  ] });
};

const ItemCard = ({
  selected,
  item,
  quantity,
  onClick,
  disabled,
  viewOnly,
  compact
}) => {
  const { createTokenUrl } = useTrove();
  const disableUnselected = !selected && disabled;
  const innerCard = /* @__PURE__ */ jsxs(
    "div",
    {
      className: cn(
        "w-full",
        disableUnselected && "cursor-not-allowed opacity-30"
      ),
      children: [
        selected && /* @__PURE__ */ jsx("div", { className: "absolute top-2 right-2 z-20 flex h-4 w-4 items-center justify-center rounded-[3px] border-2 border-night-1200 bg-night-100 text-night-1200", children: /* @__PURE__ */ jsx(CheckIcon, { className: "w-3" }) }),
        /* @__PURE__ */ jsxs("div", { className: "relative", children: [
          /* @__PURE__ */ jsx(
            "img",
            {
              src: item.image.uri,
              alt: item.tokenId,
              className: cn(
                "w-full",
                !viewOnly && !disableUnselected && "group-hover:opacity-75"
              )
            }
          ),
          quantity > 1 ? /* @__PURE__ */ jsxs("span", { className: "absolute right-1.5 bottom-1.5 rounded-lg bg-night-700/80 px-2 py-0.5 font-bold text-night-100 text-xs", children: [
            formatNumber(quantity),
            "x"
          ] }) : null
        ] }),
        !compact ? /* @__PURE__ */ jsxs("div", { className: "flex items-start justify-between gap-2 p-2.5", children: [
          /* @__PURE__ */ jsxs("div", { className: "text-left", children: [
            /* @__PURE__ */ jsx("p", { className: "font-medium text-honey-25 text-xs sm:text-sm", children: item.metadata.name }),
            /* @__PURE__ */ jsxs("p", { className: "text-night-400 text-sm", children: [
              "#",
              item.tokenId
            ] })
          ] }),
          /* @__PURE__ */ jsxs(
            "a",
            {
              target: "_blank",
              rel: "noopener noreferrer",
              title: `View ${item.metadata.name} in the marketplace`,
              className: "text-night-400 transition-colors hover:text-night-100",
              href: createTokenUrl(item.collectionUrlSlug, item.tokenId),
              onClick: (e) => e.stopPropagation(),
              children: [
                /* @__PURE__ */ jsx(ExternalLink, { className: "h-4 w-4" }),
                /* @__PURE__ */ jsxs("span", { className: "sr-only", children: [
                  "View ",
                  item.metadata.name,
                  " in the marketplace"
                ] })
              ]
            }
          )
        ] }) : null
      ]
    }
  );
  if (viewOnly) {
    return /* @__PURE__ */ jsx("div", { className: "overflow-hidden rounded-lg bg-night-900", children: innerCard });
  }
  return /* @__PURE__ */ jsxs(
    "button",
    {
      type: "button",
      className: cn(
        "group relative flex items-start overflow-hidden rounded-lg bg-night-900",
        selected && "ring-2 ring-night-100"
      ),
      onClick,
      disabled: disableUnselected,
      children: [
        !disableUnselected ? /* @__PURE__ */ jsxs("span", { className: "sr-only", children: [
          "Select ",
          item.metadata.name
        ] }) : null,
        innerCard
      ]
    }
  );
};
const SelectionPopup = ({ token, type, ...props }) => {
  const { address } = useAccount$1();
  const {
    results: vaultItems,
    isLoading,
    refetch
  } = useVaultItems({
    id: token.id,
    type: type === "vault" ? "reserves" : "inventory",
    address,
    enabled: token.isNFT
  });
  const [selectedItems, setSelectedItems] = useState(
    !props.viewOnly ? props.selectedTokens ?? [] : []
  );
  const [isCompactMode, setIsCompactMode] = useState(false);
  const selectedQuantity = selectedItems.reduce(
    (acc, curr) => acc + curr.quantity,
    0
  );
  const selectionDisabled = !props.viewOnly && props.requiredAmount ? selectedQuantity === props.requiredAmount : false;
  const buttonDisabled = !props.viewOnly && props.requiredAmount ? selectedQuantity !== props.requiredAmount : selectedItems.length === 0;
  const selectionHandler = (item) => {
    if (selectedItems.some((i) => i.tokenId === item.tokenId)) {
      const itemIndex = selectedItems.findIndex(
        (i) => i.tokenId === item.tokenId
      );
      setSelectedItems([
        ...selectedItems.slice(0, itemIndex),
        ...selectedItems.slice(itemIndex + 1)
      ]);
    } else {
      setSelectedItems([...selectedItems, item]);
    }
  };
  return /* @__PURE__ */ jsxs(
    DialogContent,
    {
      className: cn(
        "h-full [grid-template-rows:auto_auto_1fr_1fr_25%] sm:max-w-8xl",
        !props.viewOnly ? "grid-areas-nft-modal-mobile lg:grid-areas-nft-modal lg:[grid-template-columns:repeat(4,1fr)_25%]" : "grid-areas-nft-modal-viewonly"
      ),
      children: [
        /* @__PURE__ */ jsxs("div", { className: "grid-in-header flex items-center gap-2 text-xs sm:text-base", children: [
          /* @__PURE__ */ jsx("p", { className: "text-night-400", children: props.viewOnly ? "View" : "Select" }),
          /* @__PURE__ */ jsx(PoolTokenImage, { className: "h-6 w-6", token }),
          /* @__PURE__ */ jsxs("p", { className: "font-medium text-md text-night-100 capitalize", children: [
            token.name,
            " ",
            /* @__PURE__ */ jsxs("span", { className: "text-night-400 normal-case", children: [
              "from ",
              type === "vault" ? "the Vault" : "your Inventory"
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsx("div", { className: "grid-in-misc space-y-4", children: /* @__PURE__ */ jsxs("div", { className: "flex items-stretch gap-3", children: [
          /* @__PURE__ */ jsx(
            IconToggle,
            {
              icons: [
                {
                  id: "full",
                  icon: LayoutGridIcon
                },
                {
                  id: "compact",
                  icon: TableIcon
                }
              ],
              onChange: (id) => setIsCompactMode(id === "compact")
            }
          ),
          /* @__PURE__ */ jsx(
            "button",
            {
              type: "button",
              onClick: refetch,
              className: "group rounded-md px-2 text-night-600 transition-colors hover:bg-night-1000 hover:text-night-100",
              children: /* @__PURE__ */ jsx(RotateCwIcon, { className: "h-4 w-4 group-hover:animate-rotate-45" })
            }
          )
        ] }) }),
        /* @__PURE__ */ jsx("div", { className: "grid-in-nft flex flex-col overflow-hidden rounded-lg", children: /* @__PURE__ */ jsx("div", { className: "relative flex-1 overflow-auto bg-night-1100 p-4", children: isLoading ? /* @__PURE__ */ jsx("div", { className: "flex h-full items-center justify-center", children: /* @__PURE__ */ jsx(LoaderIcon, { className: "h-8 w-8" }) }) : /* @__PURE__ */ jsx(
          "div",
          {
            className: cn(
              "grid gap-3",
              isCompactMode ? "grid-cols-4 md:grid-cols-5 lg:grid-cols-6" : "grid-cols-3 md:grid-cols-4 lg:grid-cols-5"
            ),
            children: vaultItems.map((item) => /* @__PURE__ */ jsx(
              ItemCard,
              {
                disabled: selectionDisabled,
                selected: selectedItems.some(
                  (i) => i.tokenId === item.tokenId
                ),
                item,
                quantity: item.queryUserQuantityOwned ?? 1,
                viewOnly: props.viewOnly || false,
                compact: isCompactMode,
                onClick: () => {
                  selectionHandler({
                    ...item,
                    quantity: !props.viewOnly && props.requiredAmount ? Math.min(
                      props.requiredAmount - selectedQuantity,
                      item.queryUserQuantityOwned ?? 1
                    ) : 1
                  });
                }
              },
              item.tokenId
            ))
          }
        ) }) }),
        !props.viewOnly && /* @__PURE__ */ jsx("div", { className: "grid-in-selection flex flex-col gap-4 rounded-lg bg-night-1100 p-3", children: /* @__PURE__ */ jsxs("div", { className: "flex min-h-full flex-col", children: [
          /* @__PURE__ */ jsxs("p", { className: "flex items-center justify-between gap-2 text-night-400 text-sm leading-[160%]", children: [
            "Selected items",
            selectedItems.length > 0 ? /* @__PURE__ */ jsx(
              Button,
              {
                size: "xs",
                className: "p-0 text-[#28A0F0] hover:bg-transparent hover:text-[#28A0F0]/90",
                variant: "ghost",
                onClick: () => setSelectedItems([]),
                children: "Clear"
              }
            ) : null
          ] }),
          selectedItems.length > 0 ? /* @__PURE__ */ jsx("div", { className: "mt-2 flex flex-1 flex-col gap-2 overflow-auto pr-2", children: /* @__PURE__ */ jsx(AnimatePresence, { initial: false, mode: "popLayout", children: selectedItems.map((item) => /* @__PURE__ */ jsxs(
            motion.div,
            {
              layout: true,
              initial: { opacity: 0 },
              animate: { opacity: 1 },
              exit: { opacity: 0 },
              className: "flex w-full items-center justify-between space-x-2 rounded-lg bg-night-900 p-2",
              children: [
                /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-3", children: [
                  item.image ? /* @__PURE__ */ jsx(
                    "img",
                    {
                      src: item.image.uri,
                      alt: item.metadata.name,
                      className: "h-10 w-10 rounded"
                    }
                  ) : /* @__PURE__ */ jsx("div", { className: "h-10 w-10 rounded bg-night-800" }),
                  /* @__PURE__ */ jsxs("div", { className: "flex min-w-0 flex-1 flex-col", children: [
                    /* @__PURE__ */ jsx("p", { className: "truncate font-medium text-honey-25 text-sm", children: item.metadata.name }),
                    /* @__PURE__ */ jsxs("p", { className: "text-night-400 text-sm", children: [
                      "#",
                      item.tokenId
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2", children: [
                  item.contractType === "ERC1155" && /* @__PURE__ */ jsx(
                    NumberSelect,
                    {
                      onChange: (num) => {
                        setSelectedItems(
                          (prev) => prev.map(
                            (i) => i.tokenId === item.tokenId ? { ...i, quantity: num } : i
                          )
                        );
                      },
                      value: item.quantity,
                      max: item.queryUserQuantityOwned || 1
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    Button,
                    {
                      variant: "ghost",
                      size: "xs",
                      onClick: () => selectionHandler(item),
                      children: /* @__PURE__ */ jsx(XIcon, { className: "w-4 text-night-400" })
                    }
                  )
                ] })
              ]
            },
            item.tokenId
          )) }) }) : /* @__PURE__ */ jsx("p", { className: "flex grow items-center justify-center text-night-600 text-xs", children: "You haven't selected any items yet." }),
          /* @__PURE__ */ jsxs("div", { className: "sticky bottom-0 mt-2 space-y-3 bg-night-1100/50 backdrop-blur-sm", children: [
            !props.viewOnly && props.children && props.children({
              amount: String(countTokens(selectedItems))
            }),
            /* @__PURE__ */ jsx(DialogClose, { asChild: true, children: /* @__PURE__ */ jsx(
              Button,
              {
                disabled: buttonDisabled,
                size: "md",
                className: "w-full",
                onClick: () => props.onSubmit(selectedItems),
                children: props.requiredAmount && buttonDisabled ? `Select ${props.requiredAmount} ${props.requiredAmount === 1 ? "item" : "items"}` : "Save selections"
              }
            ) })
          ] })
        ] }) })
      ]
    }
  );
};

const Popover = PopoverPrimitive.Root;
const PopoverTrigger = PopoverPrimitive.Trigger;
const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => /* @__PURE__ */ jsx(
  PopoverPrimitive.Content,
  {
    ref,
    align,
    sideOffset,
    className: cn(
      "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 animate-in rounded-lg border bg-popover p-3.5 text-popover-foreground shadow-lg",
      className
    ),
    ...props
  }
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

const Input = React.forwardRef(
  ({ className, type, ...props }, ref) => {
    return /* @__PURE__ */ jsx(
      "input",
      {
        type,
        className: cn(
          "flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:font-medium file:text-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        ),
        ref,
        ...props
      }
    );
  }
);
Input.displayName = "Input";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
);
const Label = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  LabelPrimitive.Root,
  {
    ref,
    className: cn(labelVariants(), className),
    ...props
  }
));
Label.displayName = LabelPrimitive.Root.displayName;

const NumberInput = forwardRef(({ className, children, errorCondition, ...props }, ref) => {
  const { locale } = useLocale();
  const state = useNumberFieldState({ ...props, locale });
  const { labelProps, inputProps } = useNumberField(
    props,
    state,
    ref
  );
  const sanitizedValue = Number.parseFloat(
    state.inputValue.replace(/[^0-9.]/g, "")
  );
  return /* @__PURE__ */ jsxs("div", { className: "flex-1", children: [
    /* @__PURE__ */ jsx(Label, { htmlFor: props.id, ...labelProps, children: props.label }),
    /* @__PURE__ */ jsxs("div", { className: "relative mt-1 rounded-md shadow-sm", children: [
      /* @__PURE__ */ jsx(
        Input,
        {
          ...inputProps,
          ref,
          className: cn(
            sanitizedValue > 49 ? "focus:border-ruby-500 focus:ring-ruby-500" : "focus:border-night-500 focus:ring-night-500",
            "block w-full rounded-md bg-night-800/60 text-sm focus:border-night-500",
            className
          ),
          placeholder: props.placeholder
        }
      ),
      children
    ] }),
    props.errorMessage && errorCondition(sanitizedValue) ? /* @__PURE__ */ jsx("p", { className: "mt-2 text-ruby-600 text-sm", children: props.errorMessage.toString() }) : null
  ] });
});
NumberInput.displayName = "NumberInput";

const SettingsDropdownMenu = memo(() => {
  const state = useSettingsStore();
  const slippageRef = useRef(null);
  const deadlineRef = useRef(null);
  return /* @__PURE__ */ jsxs(
    Popover,
    {
      onOpenChange: (open) => {
        if (open) return;
        slippageRef.current?.blur();
        deadlineRef.current?.blur();
      },
      children: [
        /* @__PURE__ */ jsx(PopoverTrigger, { asChild: true, children: /* @__PURE__ */ jsx(Button, { variant: "ghost", className: "h-12 w-12", children: /* @__PURE__ */ jsx(SettingsIcon, { className: "h-6 w-6 text-night-400" }) }) }),
        /* @__PURE__ */ jsx(PopoverContent, { className: "w-80", align: "end", children: /* @__PURE__ */ jsxs("div", { className: "grid gap-4", children: [
          /* @__PURE__ */ jsx("h4", { className: "font-medium leading-none", children: "Transaction Settings" }),
          /* @__PURE__ */ jsx(
            NumberInput,
            {
              id: "settingsSlippage",
              ref: slippageRef,
              label: "Slippage tolerance",
              value: state.slippage,
              onChange: (value) => state.updateSlippage(value),
              minValue: 1e-3,
              maxValue: 0.49,
              placeholder: "0.5%",
              formatOptions: {
                style: "percent",
                minimumFractionDigits: 1,
                maximumFractionDigits: 2
              },
              errorMessage: "Slippage must be between 0.1% and 49%",
              errorCondition: (value) => value > 49,
              autoFocus: true
            }
          ),
          /* @__PURE__ */ jsx(
            NumberInput,
            {
              id: "settingsDeadline",
              ref: deadlineRef,
              label: "Transaction Deadline",
              value: state.deadline,
              onChange: (value) => state.updateDeadline(value),
              minValue: 1,
              maxValue: 60,
              placeholder: "20",
              errorMessage: "Deadline must be between 1 and 60",
              errorCondition: (value) => value > 60,
              children: /* @__PURE__ */ jsx("div", { className: "pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3", children: /* @__PURE__ */ jsx("span", { className: "text-night-400 text-sm", children: "Minutes" }) })
            }
          )
        ] }) })
      ]
    }
  );
});
SettingsDropdownMenu.displayName = "SettingsDropdownMenu";

const Table = ({ children, items }) => {
  return /* @__PURE__ */ jsxs("div", { className: "rounded-md border border-night-800", children: [
    /* @__PURE__ */ jsx("div", { className: cn("p-3", children && "border-night-800 border-b"), children: /* @__PURE__ */ jsx("table", { className: "w-full space-y-3 text-night-400 text-sm", children: /* @__PURE__ */ jsx("tbody", { children: items.map((item) => /* @__PURE__ */ jsxs(
      "tr",
      {
        className: "flex w-full items-center justify-between",
        children: [
          /* @__PURE__ */ jsx("td", { children: item.label }),
          /* @__PURE__ */ jsx("td", { className: "font-medium", children: item.value })
        ]
      },
      item.label
    )) }) }) }),
    children && /* @__PURE__ */ jsx("div", { className: "p-3", children })
  ] });
};

const CONTRACT_ADDRESSES = {
  [arbitrumSepolia.id]: {
    magicswapV1Router: "0xf9e197aa9fa7c3b27a1a1313cad5851b55f2fd71",
    magicswapV2Router: "0xa8654a8097b78daf740c1e2ada8a6bf3cd60da50"
  },
  [arbitrum.id]: {
    magicswapV1Router: "0xf3573bf4ca41b039bc596354870973d34fdb618b",
    magicswapV2Router: "0xf7c8f888720d5af7c54dfc04afe876673d7f5f43"
  }
};
const useContractAddress = (contract) => {
  const chainId = useChainId();
  const addresses = CONTRACT_ADDRESSES[chainId === arbitrumSepolia.id ? arbitrumSepolia.id : arbitrum.id];
  return addresses[contract];
};
const useRouterAddress = (version) => useContractAddress(
  version === "V2" ? "magicswapV2Router" : "magicswapV1Router"
);

const useToast = ({
  title,
  isLoading,
  loadingDescription = "Transaction in progress...",
  isSuccess,
  successDescription = "Transaction successful",
  isError,
  errorDescription = "Transaction failed"
}) => {
  const toastRef = useRef();
  useEffect(() => {
    if (isSuccess && toastRef.current) {
      showSuccessToast({
        id: toastRef.current,
        title,
        description: successDescription,
        duration: 3500
      });
      toastRef.current = void 0;
    } else if (isError && toastRef.current) {
      if (errorDescription.startsWith("User rejected the request")) {
        dismissToasts();
      } else {
        showErrorToast({
          id: toastRef.current,
          title,
          description: errorDescription,
          duration: 3500
        });
      }
      toastRef.current = void 0;
    } else if (isLoading) {
      toastRef.current = showLoadingToast({
        title,
        description: loadingDescription,
        duration: Number.POSITIVE_INFINITY
      });
    } else if (toastRef.current) {
      dismissToasts();
    }
  }, [
    title,
    isLoading,
    loadingDescription,
    isSuccess,
    successDescription,
    isError,
    errorDescription
  ]);
  return toastRef;
};

const useAddLiquidity = ({
  pool,
  amount0,
  amount1,
  amount0Min,
  amount1Min,
  nfts0,
  nfts1,
  isExact1,
  enabled = true,
  onSuccess
}) => {
  const { address, addressArg } = useAccount();
  const routerAddress = useRouterAddress(pool.version);
  const deadlineMinutes = useSettingsStore((state) => state.deadline);
  const isEnabled = enabled && !!address;
  const deadline = BigInt(Math.floor(Date.now() / 1e3) + deadlineMinutes * 60);
  const addLiquidity = useWriteMagicSwapV2RouterAddLiquidity();
  const addLiquidityReceipt = useWaitForTransactionReceipt({
    hash: addLiquidity.data
  });
  const addLiquidityETH = useWriteMagicSwapV2RouterAddLiquidityEth();
  const addLiquidityETHReceipt = useWaitForTransactionReceipt({
    hash: addLiquidityETH.data
  });
  const addLiquidityNFT = useWriteMagicSwapV2RouterAddLiquidityNft();
  const addLiquidityNFTReceipt = useWaitForTransactionReceipt({
    hash: addLiquidityNFT.data
  });
  const addLiquidityNFTETH = useWriteMagicSwapV2RouterAddLiquidityNfteth();
  const addLiquidityNFTETHReceipt = useWaitForTransactionReceipt({
    hash: addLiquidityNFTETH.data
  });
  const addLiquidityNFTNFT = useWriteMagicSwapV2RouterAddLiquidityNftnft();
  const addLiquidityNFTNFTReceipt = useWaitForTransactionReceipt({
    hash: addLiquidityNFTNFT.data
  });
  const isSuccess = addLiquidityReceipt.isSuccess || addLiquidityETHReceipt.isSuccess || addLiquidityNFTReceipt.isSuccess || addLiquidityNFTETHReceipt.isSuccess || addLiquidityNFTNFTReceipt.isSuccess;
  useToast({
    title: `Add liquidity to ${pool.name}`,
    isLoading: addLiquidity.isPending || addLiquidityReceipt.isLoading || addLiquidityETH.isPending || addLiquidityETHReceipt.isLoading || addLiquidityNFT.isPending || addLiquidityNFTReceipt.isLoading || addLiquidityNFTETH.isPending || addLiquidityNFTETHReceipt.isLoading || addLiquidityNFTNFT.isPending || addLiquidityNFTNFTReceipt.isLoading,
    isSuccess,
    isError: addLiquidity.isError || addLiquidityReceipt.isError || addLiquidityETH.isError || addLiquidityETHReceipt.isError || addLiquidityNFT.isError || addLiquidityNFTReceipt.isError || addLiquidityNFTETH.isError || addLiquidityNFTETHReceipt.isError || addLiquidityNFTNFT.isError || addLiquidityNFTNFTReceipt.isError,
    errorDescription: (addLiquidity.error || addLiquidityReceipt.error || addLiquidityETH.error || addLiquidityETHReceipt.error || addLiquidityNFT.error || addLiquidityNFTReceipt.error || addLiquidityNFTETH.error || addLiquidityNFTETHReceipt.error || addLiquidityNFTNFT.error || addLiquidityNFTNFTReceipt.error)?.message
  });
  useEffect(() => {
    if (isSuccess) {
      onSuccess?.();
    }
  }, [isSuccess, onSuccess]);
  const isTokenAToken1 = isExact1 || pool.token1.isETH || pool.token1.isNFT && !pool.isNFTNFT && !pool.token0.isETH;
  const tokenA = isTokenAToken1 ? pool.token1.id : pool.token0.id;
  const tokenB = isTokenAToken1 ? pool.token0.id : pool.token1.id;
  const amountA = isTokenAToken1 ? amount1 : amount0;
  const amountB = isTokenAToken1 ? amount0 : amount1;
  const amountAMin = isTokenAToken1 ? amount1Min : amount0Min;
  const amountBMin = isTokenAToken1 ? amount0Min : amount1Min;
  const nftsA = isTokenAToken1 ? nfts1 : nfts0;
  const nftsB = isTokenAToken1 ? nfts0 : nfts1;
  return {
    addLiquidity: () => {
      if (!isEnabled) {
        return;
      }
      if (pool.isNFTNFT) {
        return addLiquidityNFTNFT.writeContractAsync({
          address: routerAddress,
          args: [
            {
              token: tokenA,
              collection: nftsA.map(
                ({ collectionAddr }) => collectionAddr
              ),
              tokenId: nftsA.map(({ tokenId }) => BigInt(tokenId)),
              amount: nftsA.map(({ quantity }) => BigInt(quantity))
            },
            {
              token: tokenB,
              collection: nftsB.map(
                ({ collectionAddr }) => collectionAddr
              ),
              tokenId: nftsB.map(({ tokenId }) => BigInt(tokenId)),
              amount: nftsB.map(({ quantity }) => BigInt(quantity))
            },
            amountAMin,
            amountBMin,
            addressArg,
            deadline
          ]
        });
      }
      if (pool.hasNFT) {
        if (pool.token0.isETH || pool.token1.isETH) {
          return addLiquidityNFTETH.writeContractAsync({
            address: routerAddress,
            args: [
              {
                token: tokenB,
                collection: nftsB.map(
                  ({ collectionAddr }) => collectionAddr
                ),
                tokenId: nftsB.map(({ tokenId }) => BigInt(tokenId)),
                amount: nftsB.map(({ quantity }) => BigInt(quantity))
              },
              amountA,
              addressArg,
              deadline
            ],
            value: amountA
          });
        }
        return addLiquidityNFT.writeContractAsync({
          address: routerAddress,
          args: [
            {
              token: tokenA,
              collection: nftsA.map(
                ({ collectionAddr }) => collectionAddr
              ),
              tokenId: nftsA.map(({ tokenId }) => BigInt(tokenId)),
              amount: nftsA.map(({ quantity }) => BigInt(quantity))
            },
            tokenB,
            amountB,
            amountBMin,
            addressArg,
            deadline
          ]
        });
      }
      if (pool.token0.isETH || pool.token1.isETH) {
        return addLiquidityETH.writeContractAsync({
          address: routerAddress,
          args: [tokenB, amountB, amountBMin, amountA, addressArg, deadline],
          value: amountA
        });
      }
      return addLiquidity.writeContractAsync({
        address: routerAddress,
        args: [
          tokenA,
          tokenB,
          amountA,
          amountB,
          amountAMin,
          amountBMin,
          addressArg,
          deadline
        ]
      });
    }
  };
};

const useApprove = ({
  operator,
  token,
  amount = 0n,
  enabled = true,
  onSuccess
}) => {
  const erc20Approve = useWriteErc20Approve();
  const erc20ApproveReceipt = useWaitForTransactionReceipt({
    hash: erc20Approve.data
  });
  const erc721Approve = useWriteErc721SetApprovalForAll();
  const erc721ApproveReceipt = useWaitForTransactionReceipt({
    hash: erc721Approve.data
  });
  const erc1155Approve = useWriteErc1155SetApprovalForAll();
  const erc1155ApproveReceipt = useWaitForTransactionReceipt({
    hash: erc1155Approve.data
  });
  const isSuccess = erc20Approve.isSuccess || erc721Approve.isSuccess || erc1155Approve.isSuccess;
  useToast({
    title: typeof token === "string" ? "Approve token" : `Approve ${token.symbol}`,
    isLoading: erc20Approve.isPending || erc20ApproveReceipt.isLoading || erc721Approve.isPending || erc721ApproveReceipt.isLoading || erc1155Approve.isPending || erc1155ApproveReceipt.isLoading,
    isSuccess,
    isError: erc20ApproveReceipt.isError || erc721ApproveReceipt.isError || erc1155ApproveReceipt.isError,
    errorDescription: (erc20ApproveReceipt.error || erc721ApproveReceipt.error || erc1155ApproveReceipt.error)?.message
  });
  useEffect(() => {
    if (isSuccess) {
      onSuccess?.();
    }
  }, [isSuccess, onSuccess]);
  return {
    approve: () => {
      if (!enabled) {
        return;
      }
      if (typeof token !== "string" && token.type === "ERC721") {
        return erc721Approve.writeContractAsync({
          address: token.collectionId,
          args: [operator, true]
        });
      }
      if (typeof token !== "string" && token.type === "ERC1155") {
        return erc1155Approve.writeContractAsync({
          address: token.collectionId,
          args: [operator, true]
        });
      }
      return erc20Approve.writeContractAsync({
        address: typeof token === "string" ? token : token.id,
        args: [operator, amount]
      });
    }
  };
};

const useIsApproved = ({
  operator,
  token,
  amount = 0n,
  enabled = true
}) => {
  const { address, addressArg } = useAccount();
  const isFullToken = typeof token !== "string";
  const tokenAddress = isFullToken ? token.id : token;
  const collectionAddress = isFullToken ? token.collectionId : void 0;
  const isERC721 = isFullToken && token.type === "ERC721";
  const isERC1155 = isFullToken && token.type === "ERC1155";
  const isEnabled = !!address && enabled;
  const { data: allowance, refetch: refetchAllowance } = useReadErc20Allowance({
    address: tokenAddress,
    args: [addressArg, operator],
    query: {
      enabled: isEnabled && !isERC721 && !isERC1155
    }
  });
  const {
    data: erc721IsApprovedForAll,
    refetch: refetchERC721IsApprovedForAll
  } = useReadErc721IsApprovedForAll({
    address: collectionAddress,
    args: [addressArg, operator],
    query: {
      enabled: isEnabled && !!collectionAddress && isERC721
    }
  });
  const {
    data: erc1155IsApprovedForAll,
    refetch: refetchERC1155IsApprovedForAll
  } = useReadErc1155IsApprovedForAll({
    address: collectionAddress,
    args: [addressArg, operator],
    query: {
      enabled: isEnabled && !!collectionAddress && isERC1155
    }
  });
  const refetch = useCallback(() => {
    refetchAllowance();
    refetchERC721IsApprovedForAll();
    refetchERC1155IsApprovedForAll();
  }, [
    refetchAllowance,
    refetchERC721IsApprovedForAll,
    refetchERC1155IsApprovedForAll
  ]);
  return {
    isApproved: !!erc721IsApprovedForAll || !!erc1155IsApprovedForAll || !!allowance && allowance >= amount,
    allowance: allowance ?? 0n,
    refetch
  };
};

const useApproval = ({
  operator,
  token,
  amount,
  enabled,
  onSuccess
}) => {
  const isETH = typeof token !== "string" && !!token.isETH;
  const { isApproved, allowance, refetch } = useIsApproved({
    operator,
    token,
    amount,
    enabled: enabled && !isETH
  });
  const { approve } = useApprove({
    operator,
    token,
    amount,
    enabled: enabled && !isApproved && !isETH,
    onSuccess: () => {
      refetch();
      onSuccess?.();
    }
  });
  return {
    isApproved: isApproved || isETH,
    allowance,
    approve,
    refetch
  };
};

const useTokenBalance = ({
  id,
  address,
  isETH = false,
  enabled = true
}) => {
  const {
    data = 0n,
    isLoading,
    refetch
  } = useReadErc20BalanceOf({
    address: id,
    args: [address],
    query: {
      enabled: enabled && !!id && !!address && !isETH
    }
  });
  const {
    data: ethData,
    isLoading: isLoadingEthBalance,
    refetch: refetchEthBalance
  } = useBalance({ address: isETH ? address : void 0 });
  return {
    data: isETH ? ethData?.value ?? 0n : data,
    isLoading: isETH ? isLoadingEthBalance : isLoading,
    refetch: isETH ? refetchEthBalance : refetch
  };
};

const Checkbox = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  CheckboxPrimitive.Root,
  {
    ref,
    className: cn(
      "h-4 w-4 shrink-0 rounded border-[1.5px] border-input ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:border-none data-[state=checked]:bg-night-100",
      className
    ),
    ...props,
    children: /* @__PURE__ */ jsx(CheckboxPrimitive.Indicator, { className: "flex items-center justify-center text-background", children: /* @__PURE__ */ jsx(CheckIcon, { className: "h-3 w-3" }) })
  }
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;
const LabeledCheckbox = ({
  children,
  className,
  checkboxClassName,
  description,
  ...props
}) => /* @__PURE__ */ jsxs(
  "div",
  {
    className: cn(
      "flex items-center space-x-2",
      {
        "items-start": description
      },
      className
    ),
    children: [
      /* @__PURE__ */ jsx(
        Checkbox,
        {
          className: cn(description && "mt-[1px]", checkboxClassName),
          ...props
        }
      ),
      /* @__PURE__ */ jsxs("div", { className: "mt-px grid gap-1.5 leading-none", children: [
        /* @__PURE__ */ jsx(Label, { htmlFor: props.id, children }),
        description && /* @__PURE__ */ jsx("p", { className: "text-muted-foreground text-xs leading-[140%] sm:text-sm", children: description })
      ] })
    ]
  }
);

const PoolNftTokenInput = ({
  token,
  amount,
  balance,
  reserve,
  selectedNfts,
  onOpenSelect
}) => {
  const isVault = typeof reserve !== "undefined";
  return /* @__PURE__ */ jsxs("div", { className: "overflow-hidden rounded-lg bg-night-1100", children: [
    /* @__PURE__ */ jsxs("div", { className: "flex gap-3 p-4", children: [
      /* @__PURE__ */ jsx(PoolTokenImage, { className: "h-10 w-10 shrink-0", token }),
      /* @__PURE__ */ jsxs(
        "div",
        {
          className: cn(
            "flex flex-1 justify-between gap-3",
            selectedNfts.length > 0 ? "items-start" : "items-center"
          ),
          children: [
            /* @__PURE__ */ jsxs("div", { className: "flex-1", children: [
              /* @__PURE__ */ jsx("p", { className: "truncate font-medium text-sm sm:text-xl", children: token.symbol }),
              token.name.toUpperCase() !== token.collections[0]?.name.toUpperCase() && /* @__PURE__ */ jsx("p", { className: "text-night-400 text-xs sm:text-sm", children: token.collections[0]?.name })
            ] }),
            selectedNfts.length > 0 ? /* @__PURE__ */ jsxs("div", { className: "flex grow flex-wrap items-center justify-end space-x-2", children: [
              selectedNfts.length > 5 ? /* @__PURE__ */ jsx("div", { className: "flex items-center rounded-md bg-night-900 px-2 py-1.5", children: /* @__PURE__ */ jsxs("p", { className: "font-semibold text-night-500 text-xs", children: [
                "+",
                selectedNfts.length - 5
              ] }) }) : null,
              /* @__PURE__ */ jsx(
                "ul",
                {
                  className: cn("flex items-center", {
                    "-space-x-5": token.type === "ERC721"
                  }),
                  children: selectedNfts.slice(0, Math.min(selectedNfts.length, 5)).map((nft) => {
                    return /* @__PURE__ */ jsxs("li", { className: "text-center", children: [
                      /* @__PURE__ */ jsx(
                        "img",
                        {
                          className: "h-10 w-10 rounded border-2 border-night-1100 sm:h-12 sm:w-12",
                          src: nft.image.uri,
                          alt: nft.metadata.name
                        }
                      ),
                      token.type === "ERC1155" ? /* @__PURE__ */ jsxs("p", { className: "text-night-600 text-xs", children: [
                        nft.quantity,
                        "x"
                      ] }) : null
                    ] }, nft.tokenId);
                  })
                }
              )
            ] }) : /* @__PURE__ */ jsx(DialogTrigger, { asChild: true, children: /* @__PURE__ */ jsx(
              Button,
              {
                variant: "dark",
                size: "md",
                onClick: () => onOpenSelect?.(token),
                children: amount ? `Select ${formatNumber(amount)} ${amount === 1 ? "item" : "items"}` : "Select items"
              }
            ) })
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "flex h-12 items-center justify-between bg-night-900 p-2 pr-4", children: [
      /* @__PURE__ */ jsxs("p", { className: "pl-2 text-night-400 text-sm", children: [
        isVault ? "Vault" : "Inventory",
        ":",
        /* @__PURE__ */ jsx("span", { className: "pl-1 font-medium text-night-100", children: isVault ? formatAmount(reserve, { decimals: token.decimals }) : /* @__PURE__ */ jsx(
          Suspense$1,
          {
            fallback: /* @__PURE__ */ jsx(LoaderIcon, { className: "inline-block h-3.5 w-3.5" }),
            children: /* @__PURE__ */ jsx(Await, { resolve: balance, children: (balance2) => formatNumber(balance2 ?? 0) })
          }
        ) })
      ] }),
      selectedNfts.length > 0 ? /* @__PURE__ */ jsx(DialogTrigger, { asChild: true, children: /* @__PURE__ */ jsx(Button, { variant: "ghost", onClick: () => onOpenSelect?.(token), children: "Edit Selection" }) }) : null
    ] })
  ] });
};

const CurrencyInput = ({
  className,
  value,
  onChange,
  ...inputProps
}) => {
  const handleChange = (e) => {
    let periodMatches = 0;
    const nextValue = e.target.value.replace(/,/g, ".").replace(/[^0-9.]/g, "").replace(/\./g, (match) => ++periodMatches > 1 ? "" : match);
    onChange(nextValue || "0");
  };
  return /* @__PURE__ */ jsx(
    Input,
    {
      type: "text",
      className: cn(
        "h-auto border-none p-0 text-right text-base focus-visible:ring-0 focus-visible:ring-offset-0",
        className
      ),
      placeholder: "0.00",
      value: value === "0" ? "" : value,
      onChange: handleChange,
      ...inputProps
    }
  );
};

const InfoPopover = ({ buttonClassName, children }) => /* @__PURE__ */ jsxs(Popover, { children: [
  /* @__PURE__ */ jsx(PopoverTrigger, { asChild: true, children: /* @__PURE__ */ jsx("button", { type: "button", className: "group", children: /* @__PURE__ */ jsx(
    HelpCircle,
    {
      className: cn(
        "h-4 w-4 text-night-200 transition-colors group-hover:text-night-500",
        buttonClassName
      )
    }
  ) }) }),
  /* @__PURE__ */ jsx(PopoverContent, { align: "end", className: "w-72", children: /* @__PURE__ */ jsx("p", { className: "text-night-300 text-xs", children: /* @__PURE__ */ jsx(Balancer, { children }) }) })
] });

const PoolTokenInput = ({
  token,
  balance = 0n,
  amount,
  disabled = false,
  onUpdateAmount
}) => {
  const parsedAmount = Number(amount);
  return /* @__PURE__ */ jsxs("div", { className: "overflow-hidden rounded-lg bg-night-1100", children: [
    /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between gap-3 p-4", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-4", children: [
        /* @__PURE__ */ jsx(PoolTokenImage, { className: "h-10 w-10", token }),
        /* @__PURE__ */ jsxs("div", { className: "flex-1", children: [
          /* @__PURE__ */ jsx("p", { className: "font-medium text-sm sm:text-xl", children: token.symbol }),
          token.name.toUpperCase() !== token.symbol.toUpperCase() ? /* @__PURE__ */ jsx("p", { className: "text-night-400 text-xs sm:text-sm", children: token.name }) : null
        ] })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "space-y-1 text-right", children: [
        /* @__PURE__ */ jsx(
          CurrencyInput,
          {
            value: amount,
            disabled,
            onChange: onUpdateAmount
          }
        ),
        token.priceUSD ? /* @__PURE__ */ jsx("span", { className: "block text-[0.6rem] text-night-400 sm:text-sm", children: formatUSD(
          token.priceUSD * (Number.isNaN(parsedAmount) || parsedAmount === 0 ? 1 : Number(amount.replace(/,/g, "")))
        ) }) : null
      ] })
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between bg-night-900 p-3", children: [
      /* @__PURE__ */ jsxs("p", { className: "flex items-center text-night-400 text-sm", children: [
        "Balance:",
        /* @__PURE__ */ jsx("span", { className: "inline-block pl-1 font-medium text-night-100", children: /* @__PURE__ */ jsx(VisibleOnClient, { children: formatAmount(balance, { decimals: token.decimals }) }) })
      ] }),
      disabled ? /* @__PURE__ */ jsx(InfoPopover, { children: "Input is disabled because the amount will be auto-calculated based on the selected NFTs." }) : null
    ] })
  ] });
};

const PoolDepositTab = ({
  pool,
  nftBalances: { nftBalance0, nftBalance1 },
  onSuccess
}) => {
  const { address } = useAccount();
  const slippage = useSettingsStore((state) => state.slippage);
  const [{ amount: rawAmount, nfts0, nfts1, isExact1 }, setTransaction] = useState({
    amount: "0",
    nfts0: [],
    nfts1: [],
    isExact1: false
  });
  const [selectingToken, setSelectingToken] = useState();
  const [checkedTerms, setCheckedTerms] = useState(false);
  const routerAddress = useRouterAddress(pool.version);
  const isSelectingToken1 = selectingToken?.id === pool.token1.id;
  const amount = parseUnits(
    rawAmount,
    isExact1 ? pool.token1.decimals : pool.token0.decimals
  );
  const amount0 = isExact1 ? quote(amount, BigInt(pool.token1.reserve), BigInt(pool.token0.reserve)) : amount;
  const amount1 = isExact1 ? amount : quote(amount, BigInt(pool.token0.reserve), BigInt(pool.token1.reserve));
  const hasAmount = amount > 0;
  const requiredNfts0 = isExact1 && hasAmount ? Math.ceil(bigIntToNumber(amount0, pool.token0.decimals)) : void 0;
  const requiredNfts1 = !isExact1 && hasAmount ? Math.ceil(bigIntToNumber(amount1, pool.token1.decimals)) : void 0;
  const { data: balance0, refetch: refetchBalance0 } = useTokenBalance({
    id: pool.token0.id,
    address,
    isETH: pool.token0.isETH,
    enabled: !pool.token0.isNFT
  });
  const { data: balance1, refetch: refetchBalance1 } = useTokenBalance({
    id: pool.token1.id,
    address,
    isETH: pool.token1.isETH,
    enabled: !pool.token1.isNFT
  });
  const {
    isApproved: isApproved0,
    allowance: allowance0,
    approve: approve0
  } = useApproval({
    operator: routerAddress,
    token: pool.token0,
    amount: amount0,
    enabled: hasAmount
  });
  const {
    isApproved: isApproved1,
    allowance: allowance1,
    approve: approve1
  } = useApproval({
    operator: routerAddress,
    token: pool.token1,
    amount: amount1,
    enabled: hasAmount
  });
  const { addLiquidity } = useAddLiquidity({
    pool,
    amount0,
    amount1,
    amount0Min: isExact1 ? getAmountMin(amount0, slippage || DEFAULT_SLIPPAGE) : amount0,
    amount1Min: isExact1 ? amount1 : getAmountMin(amount1, slippage || DEFAULT_SLIPPAGE),
    nfts0,
    nfts1,
    isExact1,
    enabled: isApproved0 && isApproved1 && hasAmount,
    onSuccess: useCallback(() => {
      setTransaction({
        amount: "0",
        nfts0: [],
        nfts1: [],
        isExact1: false
      });
      refetchBalance0();
      refetchBalance1();
      setCheckedTerms(false);
      onSuccess?.();
    }, [onSuccess, refetchBalance0, refetchBalance1])
  });
  const estimatedLp = getLpCountForTokens(
    amount0,
    BigInt(pool.token0.reserve),
    BigInt(pool.totalSupply)
  );
  const insufficientBalanceA = !pool.token0.isNFT ? Number.parseFloat(
    isExact1 ? formatUnits(amount0, pool.token0.decimals) : rawAmount
  ) > Number.parseFloat(formatEther(balance0 ?? 0n)) : false;
  const insufficientBalanceB = !pool.token1.isNFT ? Number.parseFloat(
    !isExact1 ? formatUnits(amount1, pool.token1.decimals) : rawAmount
  ) > Number.parseFloat(formatEther(balance1 ?? 0n)) : false;
  return /* @__PURE__ */ jsxs("div", { className: "space-y-6", children: [
    /* @__PURE__ */ jsxs(
      Dialog,
      {
        open: !!selectingToken,
        onOpenChange: (open) => {
          if (!open) {
            setSelectingToken(void 0);
          }
        },
        children: [
          selectingToken ? /* @__PURE__ */ jsx(
            SelectionPopup,
            {
              type: "inventory",
              token: selectingToken,
              selectedTokens: isSelectingToken1 ? nfts1 : nfts0,
              requiredAmount: isSelectingToken1 ? requiredNfts1 : requiredNfts0,
              onSubmit: (tokens) => {
                const amountTokens = countTokens(tokens);
                setTransaction((curr) => {
                  const amountNFTs0 = countTokens(curr.nfts0);
                  const amountNFTs1 = countTokens(curr.nfts1);
                  if (amountNFTs0 === 0 && amountNFTs1 === 0 || // user hasn't selecting anything previously
                  isSelectingToken1 && amountNFTs1 > 0 && amountNFTs1 !== amountTokens || // user previously selected NFTs B, but changed the amount
                  !isSelectingToken1 && amountNFTs0 > 0 && amountNFTs0 !== amountTokens) {
                    return {
                      amount: amountTokens.toString(),
                      nfts0: isSelectingToken1 ? [] : tokens,
                      nfts1: isSelectingToken1 ? tokens : [],
                      isExact1: isSelectingToken1
                    };
                  }
                  const next = { ...curr };
                  if (isSelectingToken1) {
                    next.nfts1 = tokens;
                  } else {
                    next.nfts0 = tokens;
                  }
                  return next;
                });
              },
              children: ({ amount: selectingAmount }) => {
                if (isSelectingToken1 && requiredNfts1 !== void 0 || !isSelectingToken1 && requiredNfts0 !== void 0) {
                  return null;
                }
                const amount2 = parseUnits(
                  selectingAmount,
                  isSelectingToken1 ? pool.token1.decimals : pool.token0.decimals
                );
                const amount02 = isSelectingToken1 ? quote(
                  amount2,
                  BigInt(pool.token1.reserve),
                  BigInt(pool.token0.reserve)
                ) : amount2;
                const amount12 = isSelectingToken1 ? amount2 : quote(
                  amount2,
                  BigInt(pool.token0.reserve),
                  BigInt(pool.token1.reserve)
                );
                const otherAmount = isSelectingToken1 ? amount02 : amount12;
                const otherToken = isSelectingToken1 ? pool.token0 : pool.token1;
                return /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2 rounded-lg bg-night-800 p-4", children: [
                  /* @__PURE__ */ jsx("span", { className: "text-night-400 text-sm", children: "Requires:" }),
                  /* @__PURE__ */ jsxs("span", { className: "flex items-center gap-1", children: [
                    /* @__PURE__ */ jsx(
                      PoolTokenImage,
                      {
                        token: otherToken,
                        className: "h-4 w-4 flex-shrink-0"
                      }
                    ),
                    /* @__PURE__ */ jsx("span", { className: "truncate font-medium text-honey-25 text-sm", children: formatAmount(otherAmount, {
                      decimals: otherToken.decimals
                    }) })
                  ] })
                ] });
              }
            }
          ) : null,
          pool.token0.isNFT ? /* @__PURE__ */ jsx(
            PoolNftTokenInput,
            {
              token: pool.token0,
              amount: requiredNfts0,
              balance: nftBalance0,
              selectedNfts: nfts0,
              onOpenSelect: setSelectingToken
            }
          ) : /* @__PURE__ */ jsx(
            PoolTokenInput,
            {
              token: pool.token0,
              balance: balance0,
              amount: isExact1 ? formatAmount(amount0, { decimals: pool.token0.decimals }) : rawAmount,
              disabled: pool.token1.isNFT,
              onUpdateAmount: (amount2) => setTransaction({
                amount: amount2,
                nfts0: [],
                nfts1: [],
                isExact1: false
              })
            }
          ),
          pool.token1.isNFT ? /* @__PURE__ */ jsx(
            PoolNftTokenInput,
            {
              token: pool.token1,
              amount: requiredNfts1,
              balance: nftBalance1,
              selectedNfts: nfts1,
              onOpenSelect: setSelectingToken
            }
          ) : /* @__PURE__ */ jsx(
            PoolTokenInput,
            {
              token: pool.token1,
              balance: balance1,
              amount: isExact1 ? rawAmount : formatAmount(amount1, { decimals: pool.token1.decimals }),
              disabled: pool.token0.isNFT,
              onUpdateAmount: (amount2) => setTransaction({
                amount: amount2,
                nfts0: [],
                nfts1: [],
                isExact1: true
              })
            }
          )
        ]
      }
    ),
    /* @__PURE__ */ jsx(
      Table,
      {
        items: [
          {
            label: "Estimated MLP tokens",
            value: /* @__PURE__ */ jsxs("div", { className: "-space-x-1 flex items-center", children: [
              /* @__PURE__ */ jsx(PoolImage, { className: "h-5 w-5", pool }),
              /* @__PURE__ */ jsx("span", { children: formatAmount(estimatedLp) })
            ] })
          },
          {
            label: "Share of pool",
            value: formatPercent(
              BigInt(pool.totalSupply) > 0 ? bigIntToNumber(estimatedLp) / (bigIntToNumber(BigInt(pool.totalSupply)) + bigIntToNumber(estimatedLp)) : 0
            )
          }
        ]
      }
    ),
    pool.hasNFT && /* @__PURE__ */ jsx(
      LabeledCheckbox,
      {
        onCheckedChange: (checked) => setCheckedTerms(Boolean(checked)),
        checked: checkedTerms,
        className: "rounded-md border border-night-800 bg-night-1100/50 p-4",
        id: "terms",
        description: "I hereby acknowledge and accept the potential uncertainty regarding the retrievability of the specific asset deposited. Should the original asset become unavailable, I willingly consent to receive an alternative asset from the existing collection.",
        children: "Accept terms and conditions"
      }
    ),
    /* @__PURE__ */ jsx("div", { className: "space-y-1.5", children: /* @__PURE__ */ jsx(
      TransactionButton,
      {
        className: "w-full",
        size: "lg",
        disabled: !hasAmount || insufficientBalanceA || insufficientBalanceB || pool.hasNFT && !checkedTerms,
        onClick: () => {
          if (!isApproved0) {
            return approve0?.();
          }
          if (!isApproved1) {
            return approve1?.();
          }
          return addLiquidity?.();
        },
        children: !hasAmount ? "Enter amount" : insufficientBalanceA || insufficientBalanceB ? "Insufficient balance" : !isApproved0 ? /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
          /* @__PURE__ */ jsxs("span", { children: [
            "Approve ",
            pool.token0.name
          ] }),
          allowance0 > 0n ? /* @__PURE__ */ jsx(ApproveAgainInfoPopover, {}) : null
        ] }) : !isApproved1 ? /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
          /* @__PURE__ */ jsxs("span", { children: [
            "Approve ",
            pool.token1.name
          ] }),
          allowance1 > 0n ? /* @__PURE__ */ jsx(ApproveAgainInfoPopover, {}) : null
        ] }) : "Add liquidity"
      }
    ) })
  ] });
};
const ApproveAgainInfoPopover = () => /* @__PURE__ */ jsxs(Popover, { children: [
  /* @__PURE__ */ jsx(PopoverTrigger, { asChild: true, children: /* @__PURE__ */ jsx(
    "button",
    {
      type: "button",
      className: "group ml-1",
      onClick: (e) => e.stopPropagation(),
      children: /* @__PURE__ */ jsx(HelpCircle, { className: "h-4 w-4 transition-colors group-hover:text-night-100" })
    }
  ) }),
  /* @__PURE__ */ jsx(PopoverContent, { align: "center", className: "w-72 text-left", children: /* @__PURE__ */ jsx("p", { className: "text-night-300 text-xs", children: /* @__PURE__ */ jsx(Balancer, { children: "You will need to approve again because the amount you entered exceeds the amount you previously approved." }) }) })
] });

const PoolTransactionImage = ({ token, items }) => {
  if (items.length > 1) {
    return /* @__PURE__ */ jsx("div", { className: "grid grid-cols-2 gap-0.5", children: items.slice(0, 4).map((item) => /* @__PURE__ */ jsx(
      "div",
      {
        className: "h-4 w-4 overflow-hidden rounded-sm",
        children: /* @__PURE__ */ jsx("img", { src: item.image, title: item.name, alt: "" })
      },
      item.tokenId
    )) });
  }
  if (items[0]) {
    return /* @__PURE__ */ jsx("div", { className: "h-9 w-9 overflow-hidden rounded", children: /* @__PURE__ */ jsx("img", { src: items[0].image, title: items[0].name, alt: "" }) });
  }
  return /* @__PURE__ */ jsx(PoolTokenImage, { className: "h-9 w-9", token });
};

const useRemoveLiquidity = ({
  pool,
  amountLP,
  amount0Min,
  amount1Min,
  nfts0,
  nfts1,
  enabled = true,
  onSuccess
}) => {
  const { address, addressArg } = useAccount();
  const routerAddress = useRouterAddress(pool.version);
  const deadlineMinutes = useSettingsStore((state) => state.deadline);
  const isEnabled = enabled && !!address;
  const deadline = BigInt(Math.floor(Date.now() / 1e3) + deadlineMinutes * 60);
  const removeLiquidity = useWriteMagicSwapV2RouterRemoveLiquidity();
  const removeLiquidityReceipt = useWaitForTransactionReceipt({
    hash: removeLiquidity.data
  });
  const removeLiquidityETH = useWriteMagicSwapV2RouterRemoveLiquidityEth();
  const removeLiquidityETHReceipt = useWaitForTransactionReceipt({
    hash: removeLiquidityETH.data
  });
  const removeLiquidityNFT = useWriteMagicSwapV2RouterRemoveLiquidityNft();
  const removeLiquidityNFTReceipt = useWaitForTransactionReceipt({
    hash: removeLiquidityNFT.data
  });
  const removeLiquidityNFTETH = useWriteMagicSwapV2RouterRemoveLiquidityNfteth();
  const removeLiquidityNFTETHReceipt = useWaitForTransactionReceipt({
    hash: removeLiquidityNFTETH.data
  });
  const removeLiquidityNFTNFT = useWriteMagicSwapV2RouterRemoveLiquidityNftnft();
  const removeLiquidityNFTNFTReceipt = useWaitForTransactionReceipt({
    hash: removeLiquidityNFTNFT.data
  });
  const isSuccess = removeLiquidityReceipt.isSuccess || removeLiquidityETHReceipt.isSuccess || removeLiquidityNFTReceipt.isSuccess || removeLiquidityNFTETHReceipt.isSuccess || removeLiquidityNFTNFTReceipt.isSuccess;
  useToast({
    title: `Remove liquidity from ${pool.name}`,
    isLoading: removeLiquidity.isPending || removeLiquidityReceipt.isLoading || removeLiquidityETH.isPending || removeLiquidityETHReceipt.isLoading || removeLiquidityNFT.isPending || removeLiquidityNFTReceipt.isLoading || removeLiquidityNFTETH.isPending || removeLiquidityNFTETHReceipt.isLoading || removeLiquidityNFTNFT.isPending || removeLiquidityNFTNFTReceipt.isLoading,
    isSuccess,
    isError: removeLiquidity.isError || removeLiquidityReceipt.isError || removeLiquidityETH.isError || removeLiquidityETHReceipt.isError || removeLiquidityNFT.isError || removeLiquidityNFTReceipt.isError || removeLiquidityNFTETH.isError || removeLiquidityNFTETHReceipt.isError || removeLiquidityNFTNFT.isError || removeLiquidityNFTNFTReceipt.isError,
    errorDescription: (removeLiquidity.error || removeLiquidityReceipt.error || removeLiquidityETH.error || removeLiquidityETHReceipt.error || removeLiquidityNFT.error || removeLiquidityNFTReceipt.error || removeLiquidityNFTETH.error || removeLiquidityNFTETHReceipt.error || removeLiquidityNFTNFT.error || removeLiquidityNFTNFTReceipt.error)?.message
  });
  useEffect(() => {
    if (isSuccess) {
      onSuccess?.();
    }
  }, [isSuccess, onSuccess]);
  const isTokenAToken1 = pool.token1.isETH || pool.token1.isNFT && !pool.isNFTNFT && !pool.token0.isETH;
  const tokenA = isTokenAToken1 ? pool.token1.id : pool.token0.id;
  const tokenB = isTokenAToken1 ? pool.token0.id : pool.token1.id;
  const amountAMin = isTokenAToken1 ? amount1Min : amount0Min;
  const amountBMin = isTokenAToken1 ? amount0Min : amount1Min;
  const nftsA = isTokenAToken1 ? nfts1 : nfts0;
  const nftsB = isTokenAToken1 ? nfts0 : nfts1;
  return {
    removeLiquidity: () => {
      if (!isEnabled) {
        return;
      }
      if (pool.isNFTNFT) {
        return removeLiquidityNFTNFT.writeContractAsync({
          address: routerAddress,
          args: [
            {
              token: tokenA,
              collection: nftsA.map(
                ({ collectionAddr }) => collectionAddr
              ),
              tokenId: nftsA.map(({ tokenId }) => BigInt(tokenId)),
              amount: nftsA.map(({ quantity }) => BigInt(quantity))
            },
            {
              token: tokenB,
              collection: nftsB.map(
                ({ collectionAddr }) => collectionAddr
              ),
              tokenId: nftsB.map(({ tokenId }) => BigInt(tokenId)),
              amount: nftsB.map(({ quantity }) => BigInt(quantity))
            },
            amountLP,
            amountAMin,
            amountBMin,
            addressArg,
            deadline
          ]
        });
      }
      if (pool.hasNFT) {
        if (pool.token0.isETH || pool.token1.isETH) {
          return removeLiquidityNFTETH.writeContractAsync({
            address: routerAddress,
            args: [
              {
                token: tokenB,
                collection: nftsB.map(
                  ({ collectionAddr }) => collectionAddr
                ),
                tokenId: nftsB.map(({ tokenId }) => BigInt(tokenId)),
                amount: nftsB.map(({ quantity }) => BigInt(quantity))
              },
              amountLP,
              amountBMin,
              amountAMin,
              addressArg,
              deadline,
              true
              // swapLeftover
            ]
          });
        }
        return removeLiquidityNFT.writeContractAsync({
          address: routerAddress,
          args: [
            {
              token: tokenA,
              collection: nftsA.map(
                ({ collectionAddr }) => collectionAddr
              ),
              tokenId: nftsA.map(({ tokenId }) => BigInt(tokenId)),
              amount: nftsA.map(({ quantity }) => BigInt(quantity))
            },
            tokenB,
            amountLP,
            amountAMin,
            amountBMin,
            addressArg,
            deadline,
            true
            // swapLeftover
          ]
        });
      }
      if (pool.token0.isETH || pool.token1.isETH) {
        return removeLiquidityETH.writeContractAsync({
          address: routerAddress,
          args: [
            tokenB,
            amountLP,
            amountBMin,
            amountAMin,
            addressArg,
            deadline
          ]
        });
      }
      return removeLiquidity.writeContractAsync({
        address: routerAddress,
        args: [
          tokenA,
          tokenB,
          amountLP,
          amountAMin,
          amountBMin,
          addressArg,
          deadline
        ]
      });
    }
  };
};

const PoolInput = ({
  pool,
  balance,
  amount,
  onUpdateAmount
}) => {
  const { isConnected } = useAccount();
  const parsedAmount = Number(amount);
  return /* @__PURE__ */ jsxs("div", { className: "relative overflow-hidden rounded-lg bg-night-1100", children: [
    /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between gap-3 p-4", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
        /* @__PURE__ */ jsx(PoolImage, { pool }),
        /* @__PURE__ */ jsx("p", { className: "-ml-2 font-medium text-sm sm:text-xl", children: pool.name })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "space-y-1 text-right", children: [
        /* @__PURE__ */ jsx(
          CurrencyInput,
          {
            value: amount,
            onChange: onUpdateAmount,
            disabled: !isConnected
          }
        ),
        pool.reserveUSD ? /* @__PURE__ */ jsx("span", { className: "block text-night-400 text-sm", children: formatUSD(
          pool.reserveUSD / bigIntToNumber(BigInt(pool.totalSupply)) * (Number.isNaN(parsedAmount) || parsedAmount === 0 ? 1 : Number(amount.replace(/,/g, "")))
        ) }) : null
      ] })
    ] }),
    /* @__PURE__ */ jsx("div", { className: "flex h-12 items-center justify-end bg-night-900 p-2", children: [0.25, 0.5, 0.75, 1].map((percent) => /* @__PURE__ */ jsx(
      "button",
      {
        type: "button",
        className: "rounded-lg px-3 py-1.5 text-night-400 text-sm transition-colors hover:bg-night-800 hover:text-night-100",
        onClick: () => onUpdateAmount(
          percent === 1 ? formatEther(balance) : formatAmount(bigIntToNumber(balance) * percent, {
            type: "raw"
          })
        ),
        children: formatPercent(percent)
      },
      percent
    )) })
  ] });
};

const PoolWithdrawTab = ({ pool, balance, onSuccess }) => {
  const { address } = useAccount();
  const slippage = useSettingsStore((state) => state.slippage);
  const [{ amount: rawAmount, nfts0, nfts1 }, setTransaction] = useState({
    amount: "0",
    nfts0: [],
    nfts1: []
  });
  const routerAddress = useRouterAddress(pool.version);
  const amount = parseEther(rawAmount);
  const hasAmount = amount > 0;
  const rawAmount0 = getTokenCountForLp(
    amount,
    BigInt(pool.token0.reserve),
    BigInt(pool.totalSupply)
  );
  const rawAmount1 = getTokenCountForLp(
    amount,
    BigInt(pool.token1.reserve),
    BigInt(pool.totalSupply)
  );
  const amount0 = pool.token0.isNFT ? floorBigInt(rawAmount0) : rawAmount0;
  const amount1 = pool.token1.isNFT ? floorBigInt(rawAmount1) : rawAmount1;
  const amount0Min = pool.token0.isNFT ? amount0 : getAmountMin(amount0, slippage || DEFAULT_SLIPPAGE);
  const amount1Min = pool.token1.isNFT ? amount1 : getAmountMin(amount1, slippage || DEFAULT_SLIPPAGE);
  const amount0Leftover = pool.token0.isNFT ? rawAmount0 - amount0 : 0n;
  const amount1Leftover = pool.token1.isNFT ? rawAmount1 - amount1 : 0n;
  const amountNFTs0 = pool.token0.isNFT ? bigIntToNumber(amount0Min, pool.token0.decimals) : 0;
  const amountNFTs1 = pool.token1.isNFT ? bigIntToNumber(amount1Min, pool.token1.decimals) : 0;
  const { isApproved, approve } = useApproval({
    operator: routerAddress,
    token: pool.id,
    amount,
    enabled: hasAmount
  });
  const { removeLiquidity } = useRemoveLiquidity({
    pool,
    amountLP: amount,
    amount0Min,
    amount1Min,
    nfts0,
    nfts1,
    enabled: !!address && isApproved && hasAmount,
    onSuccess: useCallback(() => {
      setTransaction({ amount: "0", nfts0: [], nfts1: [] });
      onSuccess?.();
    }, [onSuccess])
  });
  return /* @__PURE__ */ jsxs("div", { className: "space-y-4", children: [
    /* @__PURE__ */ jsx(
      PoolInput,
      {
        pool,
        balance,
        amount: rawAmount,
        onUpdateAmount: (amount2) => setTransaction({
          amount: amount2,
          nfts0: [],
          nfts1: []
        })
      }
    ),
    hasAmount && /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsxs("div", { className: "space-y-1.5 rounded-md border border-night-800 p-3 text-night-400", children: [
        /* @__PURE__ */ jsx("p", { children: "You'll receive at least:" }),
        /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between gap-3", children: [
          /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-1", children: [
            /* @__PURE__ */ jsx(PoolTokenImage, { className: "h-6 w-6", token: pool.token0 }),
            /* @__PURE__ */ jsx("span", { className: "text-honey-25", children: formatAmount(amount0Min) }),
            pool.token0.symbol
          ] }),
          pool.token0.priceUSD ? formatUSD(
            bigIntToNumber(amount0Min, pool.token0.decimals) * pool.token0.priceUSD
          ) : null
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between gap-3", children: [
          /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-1", children: [
            /* @__PURE__ */ jsx(PoolTokenImage, { className: "h-6 w-6", token: pool.token1 }),
            /* @__PURE__ */ jsx("span", { className: "text-honey-25", children: formatAmount(amount1Min) }),
            pool.token1.symbol
          ] }),
          pool.token1.priceUSD ? formatUSD(
            bigIntToNumber(amount1Min, pool.token1.decimals) * pool.token1.priceUSD
          ) : null
        ] }),
        pool.isNFTNFT && (amount0Leftover > 0 || amount1Leftover > 0) ? /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx("p", { children: "And leftover vault tokens:" }),
          /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-1", children: [
              /* @__PURE__ */ jsx("span", { className: "text-honey-25", children: formatAmount(amount0Leftover, {
                decimals: pool.token0.decimals
              }) }),
              "v",
              pool.token0.symbol
            ] }),
            "and",
            /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-1", children: [
              /* @__PURE__ */ jsx("span", { className: "text-honey-25", children: formatAmount(amount1Leftover, {
                decimals: pool.token1.decimals
              }) }),
              "v",
              pool.token1.symbol
            ] })
          ] })
        ] }) : pool.hasNFT && amount0Leftover > 0 ? /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx("p", { children: "And swap leftover tokens:" }),
          /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between gap-3", children: [
            /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-1", children: [
                /* @__PURE__ */ jsx(
                  PoolTokenImage,
                  {
                    className: "h-6 w-6",
                    token: pool.token0.isNFT ? pool.token0 : pool.token1
                  }
                ),
                /* @__PURE__ */ jsx("span", { className: "text-honey-25", children: formatAmount(amount0Leftover) }),
                pool.token0.isNFT ? pool.token0.symbol : pool.token1.symbol
              ] }),
              "to",
              /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-1", children: [
                /* @__PURE__ */ jsx(
                  PoolTokenImage,
                  {
                    className: "h-6 w-6",
                    token: pool.token0.isNFT ? pool.token1 : pool.token0
                  }
                ),
                /* @__PURE__ */ jsx("span", { className: "text-honey-25", children: formatAmount(
                  quote(
                    amount0Leftover,
                    pool.token0.isNFT ? BigInt(pool.token0.reserve) : BigInt(pool.token1.reserve),
                    pool.token0.isNFT ? BigInt(pool.token1.reserve) : BigInt(pool.token0.reserve)
                  )
                ) }),
                pool.token0.isNFT ? pool.token1.symbol : pool.token0.symbol
              ] })
            ] }),
            formatUSD(
              bigIntToNumber(
                amount0Leftover,
                pool.token0.isNFT ? pool.token0.decimals : pool.token1.decimals
              ) * (pool.token0.isNFT ? pool.token0.priceUSD : pool.token1.priceUSD)
            )
          ] })
        ] }) : null
      ] }),
      amountNFTs0 > 0 ? /* @__PURE__ */ jsxs(Dialog, { children: [
        /* @__PURE__ */ jsx(
          SelectionPopup,
          {
            type: "vault",
            requiredAmount: amountNFTs0,
            token: pool.token0,
            selectedTokens: nfts0,
            onSubmit: (nfts02) => setTransaction((transaction) => ({
              ...transaction,
              nfts0: nfts02
            }))
          }
        ),
        /* @__PURE__ */ jsx(
          PoolNftTokenInput,
          {
            token: pool.token0,
            amount: amountNFTs0,
            reserve: BigInt(pool.token0.reserve),
            selectedNfts: nfts0
          }
        )
      ] }) : null,
      amountNFTs1 > 0 ? /* @__PURE__ */ jsxs(Dialog, { children: [
        /* @__PURE__ */ jsx(
          SelectionPopup,
          {
            type: "vault",
            requiredAmount: amountNFTs1,
            token: pool.token1,
            selectedTokens: nfts1,
            onSubmit: (nfts12) => setTransaction((transaction) => ({
              ...transaction,
              nfts1: nfts12
            }))
          }
        ),
        /* @__PURE__ */ jsx(
          PoolNftTokenInput,
          {
            token: pool.token1,
            amount: amountNFTs1,
            reserve: BigInt(pool.token1.reserve),
            selectedNfts: nfts1
          }
        )
      ] }) : null
    ] }),
    /* @__PURE__ */ jsx("div", { className: "space-y-1.5", children: hasAmount && !isApproved ? /* @__PURE__ */ jsx(
      TransactionButton,
      {
        className: "w-full",
        size: "lg",
        onClick: () => approve?.(),
        children: "Approve MLP token"
      }
    ) : /* @__PURE__ */ jsx(
      TransactionButton,
      {
        className: "w-full",
        size: "lg",
        disabled: !address || !isApproved || !hasAmount || Number(amountNFTs0) !== countTokens(nfts0) || Number(amountNFTs1) !== countTokens(nfts1),
        onClick: () => removeLiquidity?.(),
        children: "Remove liquidity"
      }
    ) })
  ] });
};

const MultiSelect = ({
  activeTab,
  setActiveTab,
  tabs,
  className
}) => {
  return /* @__PURE__ */ jsx(
    "div",
    {
      className: cn(
        "flex h-max w-full items-center justify-between rounded-full bg-night-1100 p-1",
        className
      ),
      children: tabs.map((tab) => /* @__PURE__ */ jsxs(
        "button",
        {
          type: "button",
          className: cn(
            "flex w-full items-center justify-center gap-3 rounded-full py-2 font-medium text-night-400 text-sm leading-[160%] transition-colors sm:text-base",
            activeTab === tab.id && "bg-night-800 text-night-100"
          ),
          onClick: () => setActiveTab(tab.id),
          children: [
            tab.icon && /* @__PURE__ */ jsx(tab.icon, { className: "w-5" }),
            tab.name,
            !!tab.amount && tab.amount > 0 && /* @__PURE__ */ jsx("p", { className: "rounded-full bg-night-700 px-3 py-1 font-medium text-xs", children: tab.amount })
          ]
        },
        tab.id
      ))
    }
  );
};

const Sheet = DialogPrimitive.Root;
const SheetTrigger = DialogPrimitive.Trigger;
const portalVariants = cva("fixed inset-0 z-50 flex", {
  variants: {
    position: {
      top: "items-start",
      bottom: "items-end",
      left: "justify-start",
      right: "justify-end"
    }
  },
  defaultVariants: { position: "right" }
});
const SheetPortal = ({ position, children, ...props }) => /* @__PURE__ */ jsx(DialogPrimitive.Portal, { ...props, children: /* @__PURE__ */ jsx("div", { className: portalVariants({ position }), children }) });
SheetPortal.displayName = DialogPrimitive.Portal.displayName;
const SheetOverlay = React.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ jsx(
  DialogPrimitive.Overlay,
  {
    className: cn(
      "data-[state=closed]:fade-out data-[state=open]:fade-in fixed inset-0 z-50 bg-background/80 backdrop-blur-sm transition-all duration-100 data-[state=closed]:animate-out",
      className
    ),
    ...props,
    ref
  }
));
SheetOverlay.displayName = DialogPrimitive.Overlay.displayName;
const sheetVariants = cva(
  "fixed z-50 scale-100 gap-4 bg-night-1100 rounded-t-xl p-4 opacity-100 shadow-lg",
  {
    variants: {
      position: {
        top: "animate-in slide-in-from-top w-full duration-300",
        bottom: "animate-in slide-in-from-bottom w-full duration-300",
        left: "animate-in slide-in-from-left h-full duration-300",
        right: "animate-in slide-in-from-right h-full duration-300"
      },
      size: {
        content: "",
        default: "",
        sm: "",
        lg: "",
        xl: "",
        full: ""
      }
    },
    compoundVariants: [
      {
        position: ["top", "bottom"],
        size: "content",
        class: "max-h-screen"
      },
      {
        position: ["top", "bottom"],
        size: "default",
        class: "h-1/3"
      },
      {
        position: ["top", "bottom"],
        size: "sm",
        class: "h-1/4"
      },
      {
        position: ["top", "bottom"],
        size: "lg",
        class: "h-1/2"
      },
      {
        position: ["top", "bottom"],
        size: "xl",
        class: "h-5/6"
      },
      {
        position: ["top", "bottom"],
        size: "full",
        class: "h-screen"
      },
      {
        position: ["right", "left"],
        size: "content",
        class: "max-w-screen"
      },
      {
        position: ["right", "left"],
        size: "default",
        class: "w-1/3"
      },
      {
        position: ["right", "left"],
        size: "sm",
        class: "w-1/4"
      },
      {
        position: ["right", "left"],
        size: "lg",
        class: "w-1/2"
      },
      {
        position: ["right", "left"],
        size: "xl",
        class: "w-5/6"
      },
      {
        position: ["right", "left"],
        size: "full",
        class: "w-screen"
      }
    ],
    defaultVariants: {
      position: "right",
      size: "default"
    }
  }
);
const SheetContent = React.forwardRef(({ position, size, className, children, ...props }, ref) => /* @__PURE__ */ jsxs(SheetPortal, { position, children: [
  /* @__PURE__ */ jsx(SheetOverlay, {}),
  /* @__PURE__ */ jsxs(
    DialogPrimitive.Content,
    {
      ref,
      className: cn(sheetVariants({ position, size }), className),
      ...props,
      children: [
        children,
        /* @__PURE__ */ jsxs(DialogPrimitive.Close, { className: "-top-12 absolute right-4 flex h-10 w-10 items-center justify-center rounded-full border border-night-700 opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary", children: [
          /* @__PURE__ */ jsx(X, { className: "h-6 w-6" }),
          /* @__PURE__ */ jsx("span", { className: "sr-only", children: "Close" })
        ] })
      ]
    }
  )
] }));
SheetContent.displayName = DialogPrimitive.Content.displayName;
const SheetTitle = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  DialogPrimitive.Title,
  {
    ref,
    className: cn("font-semibold text-foreground text-lg", className),
    ...props
  }
));
SheetTitle.displayName = DialogPrimitive.Title.displayName;
const SheetDescription = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  DialogPrimitive.Description,
  {
    ref,
    className: cn("text-muted-foreground text-sm", className),
    ...props
  }
));
SheetDescription.displayName = DialogPrimitive.Description.displayName;

const useBlockExplorer = () => {
  const { chain } = useAccount$1();
  return chain?.blockExplorers?.default ?? arbitrum$1.blockExplorers.default;
};

function useIsMounted() {
  const [mounted, setMounted] = useState(false);
  useEffect(() => setMounted(true), []);
  return mounted;
}

const DEFAULT_STATE$1 = {
  page: 1,
  isLoading: false
};
const usePoolTransactions = ({
  id,
  type,
  resultsPerPage = 25,
  enabled = true
}) => {
  const { load, state, data } = useFetcher();
  const [{ page, isLoading }, setState] = useState(DEFAULT_STATE$1);
  const lastType = useRef();
  const results = data?.ok ? data.results : [];
  const hasPreviousPage = page > 1;
  const hasNextPage = results.length === resultsPerPage;
  useEffect(() => {
    if (enabled) {
      if (type !== lastType.current) {
        lastType.current = type;
        setState(DEFAULT_STATE$1);
      }
      const params = new URLSearchParams({
        page: page.toString(),
        resultsPerPage: resultsPerPage.toString()
      });
      if (type) {
        params.set("type", type);
      }
      setState((curr) => ({ ...curr, isLoading: true }));
      load(`/resources/pools/${id}/transactions?${params.toString()}`);
      setState((curr) => ({ ...curr, isLoading: false }));
    } else {
      setState(DEFAULT_STATE$1);
    }
  }, [enabled, id, type, page, resultsPerPage, load]);
  return {
    isLoading: isLoading || state === "loading",
    results,
    page,
    resultsPerPage,
    hasPreviousPage,
    hasNextPage,
    goToPreviousPage: () => setState(
      (curr) => hasPreviousPage ? { ...curr, page: curr.page - 1 } : curr
    ),
    goToNextPage: () => setState(
      (curr) => hasNextPage ? { ...curr, page: curr.page + 1 } : curr
    ),
    refetch: () => setState({ ...DEFAULT_STATE$1, isLoading: true }),
    error: !data?.ok ? data?.error : void 0
  };
};

const Suspense = ({ children }) => /* @__PURE__ */ jsx(
  Suspense$1,
  {
    fallback: /* @__PURE__ */ jsx("div", { className: "flex h-96 items-center justify-center", children: /* @__PURE__ */ jsx(LoaderIcon, { className: "h-10 w-auto" }) }),
    children
  }
);
const meta$4 = ({ data, matches, location }) => {
  const requestInfo = matches.find((match) => match.id === "root")?.data.requestInfo;
  const pool = data?.pool;
  const url = generateUrl(requestInfo?.origin, location.pathname);
  return getSocialMetas({
    url,
    title: generateTitle(
      `${pool?.token0.symbol}/${pool?.token1.symbol} Liquidity Pool`
    ),
    description: `Provide liquidity for ${pool?.token0.symbol}/${pool?.token1.symbol} on Magicswap`,
    image: `${url}.png`
  });
};
async function loader$1({ params, request }) {
  invariant(params.id, "Pool ID required");
  const [pool, session] = await Promise.all([
    fetchPool(params.id),
    getSession(request.headers.get("Cookie"))
  ]);
  if (!pool) {
    throw new Response("Pool not found", {
      status: 404
    });
  }
  const address = session.get("address");
  return defer({
    pool,
    vaultItems0: pool.token0.isNFT ? fetchVaultReserveItems({
      id: pool.token0.id
    }) : void 0,
    vaultItems1: pool.token1.isNFT ? fetchVaultReserveItems({
      id: pool.token1.id
    }) : void 0,
    nftBalance0: pool.token0.isNFT && address ? fetchPoolTokenBalance(pool.token0, address) : void 0,
    nftBalance1: pool.token1.isNFT && address ? fetchPoolTokenBalance(pool.token1, address) : void 0
  });
}
function PoolDetailsPage() {
  const { pool, vaultItems0, vaultItems1 } = useLoaderData();
  const revalidator = useRevalidator();
  const { address } = useAccount();
  const [poolActivityFilter, setPoolActivityFilter] = useState();
  const blockExplorer = useBlockExplorer();
  const { data: lpBalance = 0n, refetch: refetchLpBalance } = useTokenBalance({
    id: pool.id,
    address
  });
  const refetch = useCallback(() => {
    if (revalidator.state === "idle") ;
    refetchLpBalance();
  }, [revalidator, refetchLpBalance]);
  useFocusInterval(refetch, 5e3);
  const baseToken = pool.token1.isNFT && !pool.isNFTNFT || pool.token1.isMAGIC ? pool.token1 : pool.token0;
  const quoteToken = baseToken.id === pool.token1.id ? pool.token0 : pool.token1;
  const lpShare = bigIntToNumber(lpBalance) / bigIntToNumber(BigInt(pool.totalSupply));
  return /* @__PURE__ */ jsxs("main", { className: "container py-5 md:py-7", children: [
    /* @__PURE__ */ jsxs(
      Link,
      {
        to: "/pools",
        className: "inline-flex items-center text-night-400 text-xs transition-colors hover:text-night-100",
        prefetch: "intent",
        children: [
          /* @__PURE__ */ jsx(ChevronLeftIcon, { className: "h-4" }),
          "All Pools"
        ]
      }
    ),
    /* @__PURE__ */ jsxs("div", { className: "mt-6", children: [
      /* @__PURE__ */ jsxs("div", { className: "relative grid grid-cols-1 items-start gap-10 lg:grid-cols-7", children: [
        /* @__PURE__ */ jsxs("div", { className: "space-y-6 md:flex-row lg:col-span-4", children: [
          /* @__PURE__ */ jsxs("div", { className: "-space-x-2 flex items-center", children: [
            /* @__PURE__ */ jsx(PoolImage, { pool, className: "h-auto w-14" }),
            /* @__PURE__ */ jsxs("div", { className: "flex flex-col text-2xl", children: [
              /* @__PURE__ */ jsx(
                "a",
                {
                  href: `${blockExplorer.url}/address/${pool.id}`,
                  target: "_blank",
                  rel: "noopener noreferrer",
                  className: "font-medium hover:underline",
                  children: pool.name
                }
              ),
              /* @__PURE__ */ jsxs("span", { className: "text-night-400 text-sm", children: [
                "LP Fees: ",
                formatPercent(pool.lpFee, 3)
              ] })
            ] })
          ] }),
          /* @__PURE__ */ jsxs("ul", { className: "flex flex-wrap items-center gap-5 text-night-100 text-sm", children: [
            [pool.token0, pool.token1].map(({ id, name, isNFT }) => /* @__PURE__ */ jsxs("li", { className: "flex items-center gap-1.5", children: [
              /* @__PURE__ */ jsx("span", { className: "font-medium", children: isNFT ? `${name} Vault` : name }),
              " ",
              /* @__PURE__ */ jsxs(
                "a",
                {
                  href: `${blockExplorer.url}/address/${id}`,
                  target: "_blank",
                  rel: "noopener noreferrer",
                  className: "flex items-center gap-1 hover:underline",
                  children: [
                    truncateEthAddress(id),
                    " ",
                    /* @__PURE__ */ jsx(ExternalLinkIcon, { className: "h-2.5 w-2.5" })
                  ]
                }
              )
            ] }, id)),
            pool.collections.map(({ id, name }) => /* @__PURE__ */ jsxs("li", { className: "flex items-center gap-1.5", children: [
              /* @__PURE__ */ jsx("span", { className: "font-medium", children: name }),
              " ",
              /* @__PURE__ */ jsxs(
                "a",
                {
                  href: `${blockExplorer.url}/address/${id}`,
                  target: "_blank",
                  rel: "noopener noreferrer",
                  className: "flex items-center gap-1 hover:underline",
                  children: [
                    truncateEthAddress(id),
                    " ",
                    /* @__PURE__ */ jsx(ExternalLinkIcon, { className: "h-2.5 w-2.5" })
                  ]
                }
              )
            ] }, id))
          ] }),
          /* @__PURE__ */ jsx("div", { className: "h-[1px] bg-night-900" }),
          /* @__PURE__ */ jsx(
            ClientOnly,
            {
              fallback: /* @__PURE__ */ jsx("div", { className: "flex h-52 items-center justify-center", children: /* @__PURE__ */ jsx(LoaderIcon, { className: "h-10 w-10" }) }),
              children: () => /* @__PURE__ */ jsx(Fragment, { children: address && lpBalance > 0 ? /* @__PURE__ */ jsxs("div", { className: "space-y-4 rounded-md bg-night-900 p-4", children: [
                /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between gap-3", children: [
                  /* @__PURE__ */ jsx("h3", { className: "font-medium", children: "Your Position" }),
                  pool.reserveUSD > 0 ? /* @__PURE__ */ jsx("span", { className: "text-night-200", children: formatUSD(lpShare * pool.reserveUSD) }) : null
                ] }),
                /* @__PURE__ */ jsxs("div", { className: "-space-x-1 flex items-center py-1.5", children: [
                  /* @__PURE__ */ jsx(PoolImage, { pool, className: "h-10 w-10" }),
                  /* @__PURE__ */ jsxs("p", { className: "flex items-center gap-1.5 text-2xl text-night-400", children: [
                    /* @__PURE__ */ jsx("span", { className: "text-3xl text-night-100", children: formatAmount(lpBalance) }),
                    " ",
                    "MLP"
                  ] })
                ] }),
                /* @__PURE__ */ jsx("div", { className: "grid grid-cols-1 gap-4 sm:grid-cols-2", children: [pool.token0, pool.token1].map((token) => /* @__PURE__ */ jsxs("div", { className: "space-y-2", children: [
                  /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2 text-sm", children: [
                    /* @__PURE__ */ jsx("p", { className: "font-medium text-night-100", children: token.name }),
                    token.name.toUpperCase() !== token.symbol.toUpperCase() ? /* @__PURE__ */ jsxs(Fragment, { children: [
                      /* @__PURE__ */ jsx("div", { className: "h-3 w-[1px] bg-night-400" }),
                      /* @__PURE__ */ jsx("p", { className: "font-regular text-night-300 uppercase", children: token.symbol })
                    ] }) : null
                  ] }),
                  /* @__PURE__ */ jsxs("div", { className: "space-y-1.5", children: [
                    /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-1.5", children: [
                      /* @__PURE__ */ jsx(
                        PoolTokenImage,
                        {
                          className: "h-6 w-6",
                          token
                        }
                      ),
                      /* @__PURE__ */ jsx("p", { className: "text-night-100", children: formatAmount(
                        lpShare * bigIntToNumber(
                          BigInt(token.reserve),
                          token.decimals
                        )
                      ) })
                    ] }),
                    token.priceUSD > 0 ? /* @__PURE__ */ jsx("p", { className: "text-night-500 text-xs", children: formatUSD(
                      lpShare * bigIntToNumber(
                        BigInt(token.reserve),
                        token.decimals
                      ) * token.priceUSD
                    ) }) : null
                  ] })
                ] }, token.id)) }),
                /* @__PURE__ */ jsx(
                  Table,
                  {
                    items: [
                      // { label: "Initial LP Tokens", value: 0.0 },
                      // { label: "Rewards Earned", value: 0.0 },
                      {
                        label: "Current share of pool",
                        value: formatPercent(lpShare)
                      }
                    ]
                  }
                )
              ] }) : null })
            }
          ),
          /* @__PURE__ */ jsxs("div", { className: "rounded-md bg-night-1100 p-4", children: [
            /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between gap-3", children: [
              /* @__PURE__ */ jsx("h3", { className: "font-medium", children: "Pool Reserves" }),
              pool.reserveUSD > 0 ? /* @__PURE__ */ jsx("span", { className: "text-night-200", children: formatUSD(pool.reserveUSD) }) : null
            ] }),
            /* @__PURE__ */ jsxs("div", { className: "mt-4 grid grid-cols-[1fr,max-content,1fr] items-center gap-4", children: [
              /* @__PURE__ */ jsxs("p", { className: "justify-self-end text-night-400", children: [
                /* @__PURE__ */ jsx("span", { className: "text-night-100", children: "1" }),
                " ",
                baseToken.symbol
              ] }),
              /* @__PURE__ */ jsx(ArrowLeftRightIcon, { className: "h-4 w-4 text-night-600" }),
              /* @__PURE__ */ jsxs("p", { className: "text-night-400", children: [
                /* @__PURE__ */ jsx("span", { className: "text-night-100", children: BigInt(baseToken.reserve) > 0 ? formatAmount(
                  bigIntToNumber(
                    BigInt(quoteToken.reserve),
                    quoteToken.decimals
                  ) / bigIntToNumber(
                    BigInt(baseToken.reserve),
                    baseToken.decimals
                  )
                ) : 0 }),
                " ",
                quoteToken.symbol
              ] }),
              [baseToken, null, quoteToken].map((token) => {
                if (!token) {
                  return /* @__PURE__ */ jsx("div", { className: "hidden sm:block" }, "empty");
                }
                return /* @__PURE__ */ jsxs(
                  "div",
                  {
                    className: "col-span-3 flex flex-1 items-center justify-between gap-3 rounded-md bg-night-1200 p-3 sm:col-span-1",
                    children: [
                      /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2 font-medium", children: [
                        /* @__PURE__ */ jsx(PoolTokenImage, { className: "h-6 w-6", token }),
                        /* @__PURE__ */ jsx("span", { className: "text-night-100", children: token.symbol })
                      ] }),
                      /* @__PURE__ */ jsxs("div", { className: "space-y-0.5 text-right", children: [
                        /* @__PURE__ */ jsx("p", { className: "text-night-100", children: formatTokenReserve(token) }),
                        token.priceUSD > 0 ? /* @__PURE__ */ jsx("p", { className: "text-night-400 text-xs", children: formatUSD(
                          bigIntToNumber(
                            BigInt(token.reserve),
                            token.decimals
                          ) * token.priceUSD
                        ) }) : null
                      ] })
                    ]
                  },
                  token.id
                );
              })
            ] })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "flex w-full flex-col gap-3 sm:flex-row", children: [
            /* @__PURE__ */ jsxs("div", { className: "flex w-full flex-col gap-0.5 rounded-lg bg-night-1100 px-4 py-3", children: [
              /* @__PURE__ */ jsx("p", { className: "text-night-500", children: "Volume (24h)" }),
              /* @__PURE__ */ jsx("p", { className: "font-medium text-night-100", children: getPoolVolume24hDisplay(pool) })
            ] }),
            /* @__PURE__ */ jsxs("div", { className: "flex w-full flex-col gap-0.5 rounded-lg bg-night-1100 px-4 py-3", children: [
              /* @__PURE__ */ jsx("p", { className: "text-night-500", children: "Fees (24h)" }),
              /* @__PURE__ */ jsx("p", { className: "font-medium text-night-100", children: getPoolFees24hDisplay(pool) })
            ] }),
            /* @__PURE__ */ jsxs("div", { className: "flex w-full flex-col gap-0.5 rounded-lg bg-night-1100 px-4 py-3", children: [
              /* @__PURE__ */ jsx("p", { className: "text-night-500", children: "APY" }),
              /* @__PURE__ */ jsx("p", { className: "font-medium text-night-100", children: formatPercent(pool.apy) })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsx(
          PoolManagementView,
          {
            className: "sticky top-4 col-span-3 hidden space-y-4 p-4 lg:block",
            pool,
            lpBalance,
            onSuccess: refetch
          }
        )
      ] }),
      pool.hasNFT ? /* @__PURE__ */ jsxs("div", { className: "mt-12 space-y-3.5", children: [
        vaultItems0 ? /* @__PURE__ */ jsx(Suspense, { children: /* @__PURE__ */ jsx(Await, { resolve: vaultItems0, children: (vaultItems02) => /* @__PURE__ */ jsx(
          PoolTokenCollectionInventory,
          {
            token: pool.token0,
            items: vaultItems02
          }
        ) }) }) : null,
        vaultItems1 ? /* @__PURE__ */ jsx(Suspense, { children: /* @__PURE__ */ jsx(Await, { resolve: vaultItems1, children: (vaultItems12) => /* @__PURE__ */ jsx(
          PoolTokenCollectionInventory,
          {
            token: pool.token1,
            items: vaultItems12
          }
        ) }) }) : null
      ] }) : null,
      /* @__PURE__ */ jsxs("div", { className: "mt-6 flex w-full items-center justify-between", children: [
        /* @__PURE__ */ jsxs("h3", { className: "flex items-center gap-3", children: [
          /* @__PURE__ */ jsx(ArrowLeftRightIcon, { className: "h-4 w-4" }),
          "Pool Activity"
        ] }),
        /* @__PURE__ */ jsx("div", { className: "flex items-center gap-3", children: [
          {
            label: "All",
            value: void 0
          },
          {
            label: "Swaps",
            value: "Swap"
          },
          {
            label: "Deposits",
            value: "Deposit"
          },
          {
            label: "Withdrawals",
            value: "Withdrawal"
          }
        ].map(({ label, value }) => /* @__PURE__ */ jsx(
          "button",
          {
            type: "button",
            className: cn(
              "text-night-400 text-sm capitalize hover:text-night-200",
              value === poolActivityFilter && "text-night-100"
            ),
            onClick: () => setPoolActivityFilter(value),
            children: label
          },
          label
        )) })
      ] }),
      /* @__PURE__ */ jsx(PoolActivityTable, { pool, type: poolActivityFilter })
    ] }),
    /* @__PURE__ */ jsxs(Sheet, { children: [
      /* @__PURE__ */ jsx(SheetTrigger, { asChild: true, children: /* @__PURE__ */ jsx("div", { className: "fixed right-0 bottom-12 left-0 flex justify-center lg:hidden", children: /* @__PURE__ */ jsx(Button, { size: "lg", className: "rounded-full", children: "My Positions" }) }) }),
      /* @__PURE__ */ jsx(SheetContent, { position: "bottom", size: "xl", children: /* @__PURE__ */ jsx(
        PoolManagementView,
        {
          className: "mt-4 space-y-6",
          pool,
          lpBalance,
          onSuccess: refetch
        }
      ) })
    ] })
  ] });
}
const PoolManagementView = ({
  pool,
  lpBalance,
  onSuccess,
  className
}) => {
  const [activeTab, setActiveTab] = useState("deposit");
  const nftBalances = useRouteLoaderData("routes/pools_.$id");
  return /* @__PURE__ */ jsxs("div", { className, children: [
    /* @__PURE__ */ jsxs("div", { className: "flex w-full items-center justify-between", children: [
      /* @__PURE__ */ jsx("h1", { className: "font-semibold text-lg text-night-100", children: "Manage Liquidity" }),
      /* @__PURE__ */ jsx(SettingsDropdownMenu, {})
    ] }),
    /* @__PURE__ */ jsx(
      MultiSelect,
      {
        className: "bg-night-1200 sm:bg-night-1100",
        tabs: [
          {
            id: "deposit",
            icon: ArrowDownToLineIcon,
            name: "Add"
          },
          {
            id: "withdraw",
            icon: ArrowUpToLineIcon,
            name: "Remove"
          }
        ],
        activeTab,
        setActiveTab
      }
    ),
    activeTab === "withdraw" && /* @__PURE__ */ jsx(
      PoolWithdrawTab,
      {
        pool,
        balance: lpBalance,
        onSuccess
      }
    ),
    activeTab === "deposit" && /* @__PURE__ */ jsx(
      PoolDepositTab,
      {
        pool,
        nftBalances,
        onSuccess
      }
    )
  ] });
};
const PoolActivityTable = ({
  pool,
  type
}) => {
  const {
    isLoading,
    results: transactions,
    page,
    resultsPerPage,
    hasPreviousPage,
    hasNextPage,
    goToPreviousPage,
    goToNextPage
  } = usePoolTransactions({ id: pool.id, type });
  const blockExplorer = useBlockExplorer();
  const isMounted = useIsMounted();
  if (!isMounted || isLoading)
    return /* @__PURE__ */ jsx("div", { className: "flex h-96 items-center justify-center", children: /* @__PURE__ */ jsx(LoaderIcon, { className: "h-10 w-10" }) });
  return /* @__PURE__ */ jsxs("div", { children: [
    /* @__PURE__ */ jsxs("table", { className: "mt-3.5 w-full rounded-md bg-night-1100 text-night-100", children: [
      /* @__PURE__ */ jsx("thead", { className: "border-b border-b-night-900", children: /* @__PURE__ */ jsxs("tr", { className: "text-night-200 text-sm", children: [
        /* @__PURE__ */ jsx("th", { className: "px-4 py-2.5 text-left font-normal sm:px-5", children: "Tokens" }),
        /* @__PURE__ */ jsx("th", { className: "hidden px-4 py-2.5 text-center font-normal sm:table-cell sm:px-5", children: "Action" }),
        /* @__PURE__ */ jsx("th", { className: "hidden px-4 py-2.5 text-center font-normal sm:table-cell sm:px-5", children: "Value" }),
        /* @__PURE__ */ jsx("th", { className: "hidden px-4 py-2.5 text-center font-normal sm:table-cell sm:px-5", children: "User" }),
        /* @__PURE__ */ jsx("th", { className: "hidden px-4 py-2.5 text-right font-normal sm:table-cell sm:px-5", children: "Date" }),
        /* @__PURE__ */ jsx("th", { className: "hidden px-4 py-2.5 sm:table-cell sm:px-5" })
      ] }) }),
      /* @__PURE__ */ jsx("tbody", { children: transactions.map((tx) => {
        let tokenA;
        let amountA;
        let itemsA;
        let tokenB;
        let amountB;
        let itemsB;
        const isSwap = tx.type === "Swap";
        if (isSwap) {
          if (tx.isAmount1Out) {
            tokenA = pool.token0;
            amountA = tx.amount0;
            itemsA = tx.items0 ?? [];
            tokenB = pool.token1;
            amountB = tx.amount1;
            itemsB = tx.items1;
          } else {
            tokenA = pool.token1;
            amountA = tx.amount1;
            itemsA = tx.items1;
            tokenB = pool.token0;
            amountB = tx.amount0;
            itemsB = tx.items0;
          }
        } else {
          tokenA = pool.token0;
          tokenB = pool.token1;
          if (tokenA.id === pool.token0.id) {
            amountA = tx.amount0;
            itemsA = tx.items0;
            amountB = tx.amount1;
            itemsB = tx.items1;
          } else {
            amountA = tx.amount1;
            itemsA = tx.items1;
            amountB = tx.amount0;
            itemsB = tx.items0;
          }
        }
        return /* @__PURE__ */ jsx(Fragment$1, { children: /* @__PURE__ */ jsxs("tr", { className: "border-b border-b-night-900 transition-colors", children: [
          /* @__PURE__ */ jsx("td", { className: "px-4 py-3.5 text-left sm:px-5", children: /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-[1fr,max-content,1fr] items-center gap-3 text-night-400 text-sm", children: [
            /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2.5", children: [
              /* @__PURE__ */ jsx(PoolTransactionImage, { token: tokenA, items: itemsA }),
              /* @__PURE__ */ jsxs("span", { children: [
                /* @__PURE__ */ jsx("span", { className: "text-honey-25", children: formatAmount(amountA) }),
                " ",
                tokenA.symbol
              ] })
            ] }),
            isSwap ? /* @__PURE__ */ jsx(ArrowRightIcon, { className: "h-6 w-6" }) : /* @__PURE__ */ jsx(PlusIcon, { className: "h-6 w-6" }),
            /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2.5", children: [
              /* @__PURE__ */ jsx(PoolTransactionImage, { token: tokenB, items: itemsB }),
              /* @__PURE__ */ jsxs("span", { children: [
                /* @__PURE__ */ jsx("span", { className: "text-honey-25", children: formatAmount(amountB) }),
                " ",
                tokenB.symbol
              ] })
            ] })
          ] }) }),
          /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 text-center sm:table-cell sm:px-5", children: tx.type }),
          /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 text-center sm:table-cell sm:px-5", children: Number(tx.amountUSD) > 0 ? formatUSD(tx.amountUSD) : "-" }),
          /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 text-center text-night-400 text-sm sm:table-cell sm:px-5", children: tx.userDomain?.treasuretag ? /* @__PURE__ */ jsxs("span", { className: "flex items-center justify-center gap-1 font-medium text-honey-25", children: [
            /* @__PURE__ */ jsx(MagicLogo, { className: "h-3 w-3" }),
            tx.userDomain.treasuretag.name
          ] }) : /* @__PURE__ */ jsx("span", { className: "font-mono", children: tx.user ? truncateEthAddress(tx.user.id) : "-" }) }),
          /* @__PURE__ */ jsx("td", { className: "hidden px-4 py-3.5 text-right text-night-400 text-sm sm:table-cell sm:px-5", children: new Date(Number(tx.timestamp) * 1e3).toLocaleString() }),
          /* @__PURE__ */ jsx("td", { className: "flex items-center justify-end gap-2 px-4 py-3.5 text-end sm:px-5", children: /* @__PURE__ */ jsx(
            "a",
            {
              className: "cursor-pointer rounded-md p-1.5 text-night-400 transition-colors hover:text-night-100",
              href: `${blockExplorer.url}/tx/${tx.hash}`,
              target: "_blank",
              rel: "noopener noreferrer",
              title: `View on ${blockExplorer.name}`,
              children: /* @__PURE__ */ jsx(ExternalLinkIcon, { className: "h-4 w-4" })
            }
          ) })
        ] }) }, tx.id);
      }) })
    ] }),
    /* @__PURE__ */ jsxs("nav", { className: "flex w-full items-center justify-between rounded-b-lg bg-night-1100 px-3 py-2", children: [
      /* @__PURE__ */ jsxs(
        Button,
        {
          variant: "ghost",
          className: "pr-3.5 pl-2",
          disabled: !hasPreviousPage,
          onClick: () => goToPreviousPage(),
          children: [
            /* @__PURE__ */ jsx(ChevronLeftIcon, { className: "w-4" }),
            /* @__PURE__ */ jsx("p", { className: "text-sm", children: "Previous" })
          ]
        }
      ),
      /* @__PURE__ */ jsxs("p", { className: "text-night-500", children: [
        "Showing",
        " ",
        /* @__PURE__ */ jsx("span", { className: "text-night-200", children: formatNumber((page - 1) * resultsPerPage + 1) }),
        " ",
        "to",
        " ",
        /* @__PURE__ */ jsx("span", { className: "text-night-200", children: formatNumber((page - 1) * resultsPerPage + transactions.length) }),
        " ",
        !type ? /* @__PURE__ */ jsxs(Fragment, { children: [
          "of",
          " ",
          /* @__PURE__ */ jsx("span", { className: "text-night-200", children: formatNumber(pool.txCount) })
        ] }) : null
      ] }),
      /* @__PURE__ */ jsxs(
        Button,
        {
          variant: "ghost",
          className: "pr-2 pl-3.5",
          disabled: !hasNextPage,
          onClick: () => goToNextPage(),
          children: [
            /* @__PURE__ */ jsx("p", { className: "text-sm", children: "Next" }),
            /* @__PURE__ */ jsx(ChevronRightIcon, { className: "w-4" })
          ]
        }
      )
    ] })
  ] });
};
const PoolTokenCollectionInventory = ({
  token,
  items
}) => {
  const numVaultItems = sumArray(
    items.map(({ queryUserQuantityOwned }) => queryUserQuantityOwned ?? 1)
  );
  return /* @__PURE__ */ jsx("div", { className: "rounded-lg bg-night-1100", children: /* @__PURE__ */ jsxs(Dialog, { children: [
    /* @__PURE__ */ jsxs("div", { className: "space-y-5 p-6", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-3", children: [
        /* @__PURE__ */ jsxs("span", { className: "font-medium", children: [
          token.name,
          " Vault"
        ] }),
        token.name !== token.symbol ? /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx("span", { className: "h-3 w-[1px] bg-night-400" }),
          /* @__PURE__ */ jsx("span", { className: "text-night-400 uppercase", children: token.symbol })
        ] }) : null
      ] }),
      /* @__PURE__ */ jsx("div", { className: "grid grid-cols-5 items-center gap-2 lg:grid-cols-10", children: items.map((item) => /* @__PURE__ */ jsxs(
        "div",
        {
          className: "relative overflow-hidden rounded",
          children: [
            /* @__PURE__ */ jsx(
              "img",
              {
                src: item.image.uri,
                alt: item.metadata.name,
                title: item.metadata.name
              }
            ),
            (item.queryUserQuantityOwned ?? 1) > 1 ? /* @__PURE__ */ jsxs("span", { className: "absolute right-1.5 bottom-1.5 rounded-lg bg-night-700/80 px-2 py-0.5 font-bold text-night-100 text-xs", children: [
              formatNumber(item.queryUserQuantityOwned ?? 1),
              "x"
            ] }) : null
          ]
        },
        item.tokenId
      )) })
    ] }),
    /* @__PURE__ */ jsx("div", { className: "h-[1px] bg-night-800" }),
    /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between px-6 py-3", children: [
      /* @__PURE__ */ jsxs("span", { className: "text-night-400 text-sm", children: [
        formatNumber(numVaultItems),
        " ",
        numVaultItems === 1 ? "item" : "items"
      ] }),
      /* @__PURE__ */ jsx(DialogTrigger, { asChild: true, children: /* @__PURE__ */ jsx(Button, { variant: "ghost", children: "View All" }) })
    ] }),
    /* @__PURE__ */ jsx(SelectionPopup, { type: "vault", viewOnly: true, token })
  ] }) }, token.id);
};

const route12 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: PoolDetailsPage,
  loader: loader$1,
  meta: meta$4
}, Symbol.toStringTag, { value: 'Module' }));

const meta$3 = ({ matches, location }) => {
  const requestInfo = matches.find((match) => match.id === "root")?.data.requestInfo;
  return getSocialMetas({
    url: generateUrl(requestInfo?.origin, location.pathname),
    image: generateUrl(requestInfo?.origin, "/img/seo-banner.png")
  });
};
function Homepage() {
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx("div", { className: "h-auto bg-[url(/img/home/hero.png)] bg-bottom bg-cover bg-night-1100 py-24 md:h-[548px] md:py-0", children: /* @__PURE__ */ jsxs("div", { className: "mx-auto flex h-full w-full max-w-[90%] flex-col items-center justify-center space-y-8 text-center md:max-w-lg", children: [
      /* @__PURE__ */ jsxs("div", { className: "space-y-3", children: [
        /* @__PURE__ */ jsx(
          motion.h1,
          {
            initial: {
              opacity: 0,
              y: -30
            },
            animate: {
              opacity: 100,
              y: 0
            },
            className: "font-bold text-3xl text-honey-25 md:text-4xl",
            children: "Magicswap Protocol"
          }
        ),
        /* @__PURE__ */ jsx(
          motion.p,
          {
            className: "text-night-300",
            initial: {
              opacity: 0,
              y: -30
            },
            animate: {
              opacity: 100,
              y: 0
            },
            transition: {
              delay: 0.1
            },
            children: "A decentralized trading protocol with universal token compatibility"
          }
        )
      ] }),
      /* @__PURE__ */ jsxs(
        motion.div,
        {
          className: "flex items-center justify-center gap-3",
          initial: {
            opacity: 0,
            y: -30
          },
          animate: {
            opacity: 100,
            y: 0
          },
          transition: {
            delay: 0.2
          },
          children: [
            /* @__PURE__ */ jsx(Link, { to: "/swap", prefetch: "render", children: /* @__PURE__ */ jsx(Button, { className: "w-full", size: "lg", children: "Start Trading" }) }),
            /* @__PURE__ */ jsx(Link, { to: "/pools", prefetch: "render", children: /* @__PURE__ */ jsx(Button, { className: "w-full", variant: "secondary", size: "lg", children: "Add Liquidity" }) })
          ]
        }
      )
    ] }) }),
    /* @__PURE__ */ jsxs(
      motion.div,
      {
        className: "container mt-12 flex flex-col items-center justify-between gap-8 md:mt-0 md:mb-0 md:h-[556px] md:flex-row",
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        children: [
          /* @__PURE__ */ jsxs("div", { className: "max-w-[90%] gap-6 space-y-6 md:max-w-md md:space-y-10", children: [
            /* @__PURE__ */ jsxs("div", { className: "space-y-5 text-center md:text-left", children: [
              /* @__PURE__ */ jsx("h1", { className: "font-semibold text-2xl text-honey-25 md:text-4xl", children: "Universal Token Compatibility" }),
              /* @__PURE__ */ jsx("p", { className: "text-night-500 md:text-xl", children: "Support pools for both ERC-20s and NFTs through a single router and enable trading of all items within game economies." })
            ] }),
            /* @__PURE__ */ jsxs(
              Link,
              {
                to: DOCS_URL,
                className: "mx-auto flex items-center gap-1 text-night-500 transition-colors hover:text-night-100 md:mx-0 md:text-xl",
                target: "_blank",
                rel: "noopener noreferrer",
                children: [
                  "Learn more",
                  /* @__PURE__ */ jsx(ChevronRight, { className: "w-6" })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ jsx(
            "img",
            {
              src: "/img/home/universal-token.png",
              alt: "",
              className: "w-full md:h-full md:w-auto"
            }
          )
        ]
      }
    ),
    /* @__PURE__ */ jsx(motion.div, { initial: { opacity: 0 }, animate: { opacity: 1 }, children: /* @__PURE__ */ jsxs("div", { className: "container grid grid-cols-1 gap-4 md:grid-cols-3 md:gap-6", children: [
      /* @__PURE__ */ jsxs("div", { className: "space-y-6 rounded-xl bg-night-1100 p-6 md:p-8", children: [
        /* @__PURE__ */ jsx("img", { src: "/img/home/lp-rewards.svg", className: "w-[42px]", alt: "" }),
        /* @__PURE__ */ jsxs("div", { className: "space-y-1", children: [
          /* @__PURE__ */ jsx("h2", { className: "font-semibold text-honey-25 text-xl md:text-2xl", children: "Diverse LP rewards" }),
          /* @__PURE__ */ jsx("p", { className: "text-night-400", children: "Issue NFTs, ERC20s, or both as liquidity incentives to your pool." })
        ] })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "space-y-6 rounded-xl bg-night-1100 p-6 md:p-8", children: [
        /* @__PURE__ */ jsx(
          "img",
          {
            src: "/img/home/automated-royalties.svg",
            className: "w-[42px]",
            alt: ""
          }
        ),
        /* @__PURE__ */ jsxs("div", { className: "space-y-1", children: [
          /* @__PURE__ */ jsx("h2", { className: "font-semibold text-honey-25 text-xl md:text-2xl", children: "Automated royalties" }),
          /* @__PURE__ */ jsx("p", { className: "text-night-400", children: "Magicswap pools utilize a three-tiered royalty system that includes fees for LPs, project creators, and the protocol." })
        ] })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "space-y-6 rounded-xl bg-night-1100 p-6 md:p-8", children: [
        /* @__PURE__ */ jsx(
          "img",
          {
            src: "/img/home/cheaper-trading.svg",
            className: "w-[42px]",
            alt: ""
          }
        ),
        /* @__PURE__ */ jsxs("div", { className: "space-y-1", children: [
          /* @__PURE__ */ jsx("h2", { className: "font-semibold text-honey-25 text-xl md:text-2xl", children: "Cheaper trading" }),
          /* @__PURE__ */ jsx("p", { className: "text-night-400", children: "Create ERC-721 collections that can be bought from the pool in any quantity with only one transaction cost." })
        ] })
      ] })
    ] }) }),
    /* @__PURE__ */ jsx(
      motion.div,
      {
        className: "container",
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        children: /* @__PURE__ */ jsxs("div", { className: "relative mt-4 flex flex-col gap-2 overflow-hidden rounded-xl bg-night-1100 p-6 md:mt-6 md:p-8", children: [
          /* @__PURE__ */ jsxs("h1", { className: "relative z-10 font-semibold text-honey-25 text-xl md:text-2xl", children: [
            /* @__PURE__ */ jsx("span", { className: "text-ruby-900 uppercase", children: "$MAGIC" }),
            " and Fee Structure"
          ] }),
          /* @__PURE__ */ jsx("p", { className: "relative z-10 max-w-3xl text-night-400 md:text-lg", children: "Magicswap utilizes $MAGIC as the governance and fee token. The protocol collects a 0.3% baseline fee for transactions that can be overridden by pool. Additional fees may be set by the pool creator and collected for projects and liquidity providers." }),
          /* @__PURE__ */ jsx(
            "img",
            {
              src: "/img/home/magic.png",
              alt: "Magic Illustration",
              className: "absolute top-0 right-10 hidden h-full opacity-20 md:block xl:opacity-100"
            }
          ),
          /* @__PURE__ */ jsx("div", { className: "absolute right-0 bottom-0 hidden h-72 w-96 translate-y-3/4 rounded-full bg-ruby-900 opacity-20 blur-[999px] md:block" })
        ] })
      }
    ),
    /* @__PURE__ */ jsx("div", { className: "relative mt-8 overflow-hidden border-t border-t-night-1000 py-8 md:mt-16 md:py-16", children: /* @__PURE__ */ jsx("div", { className: "container", children: /* @__PURE__ */ jsxs("div", { className: "relative flex w-full flex-col justify-between gap-6 overflow-hidden rounded-lg border border-night-800 bg-night-1100 p-8 sm:flex-row sm:items-center", children: [
      /* @__PURE__ */ jsxs("div", { className: "relative space-y-1", children: [
        /* @__PURE__ */ jsx("h1", { className: "font-semibold text-2xl text-honey-25", children: "Start trading today" }),
        /* @__PURE__ */ jsx("p", { className: "max-w-80 text-lg text-night-400", children: "Explore our pools to trade your NFTs, tokens, and game assets!" })
      ] }),
      /* @__PURE__ */ jsx(Link, { to: "/pools", children: /* @__PURE__ */ jsx(Button, { size: "md", className: "relative z-10", children: "Explore Pools" }) }),
      /* @__PURE__ */ jsx(
        "img",
        {
          src: "/img/home/collections.png",
          alt: "",
          className: "absolute top-0 right-28 hidden h-full opacity-20 md:block xl:opacity-100"
        }
      )
    ] }) }) })
  ] });
}

const route13 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: Homepage,
  meta: meta$3
}, Symbol.toStringTag, { value: 'Module' }));

function useTimeoutFn(fn, ms) {
    var ready = useRef(false);
    var timeout = useRef();
    var callback = useRef(fn);
    var isReady = useCallback(function () { return ready.current; }, []);
    var set = useCallback(function () {
        ready.current = false;
        timeout.current && clearTimeout(timeout.current);
        timeout.current = setTimeout(function () {
            ready.current = true;
            callback.current();
        }, ms);
    }, [ms]);
    var clear = useCallback(function () {
        ready.current = null;
        timeout.current && clearTimeout(timeout.current);
    }, []);
    // update ref when function changes
    useEffect(function () {
        callback.current = fn;
    }, [fn]);
    // set on mount, clear on unmount
    useEffect(function () {
        set();
        return clear;
    }, [ms]);
    return [isReady, clear, set];
}

function useDebounce(fn, ms, deps) {
    if (deps === void 0) { deps = []; }
    var _a = useTimeoutFn(fn, ms), isReady = _a[0], cancel = _a[1], reset = _a[2];
    useEffect(reset, deps);
    return [isReady, cancel];
}

const meta$2 = ({ matches, location }) => {
  const requestInfo = matches.find((match) => match.id === "root")?.data.requestInfo;
  return getSocialMetas({
    url: generateUrl(requestInfo?.origin, location.pathname),
    title: generateTitle("Liquidity Pools"),
    image: generateUrl(requestInfo?.origin, "/img/seo-banner-pools.png")
  });
};
function PoolsListPage() {
  const [searchParams, setSearchParams] = useSearchParams();
  const matches = useMatches();
  const match = matches[matches.length - 1];
  const tab = match?.handle?.tab ?? "pools";
  const [search, setSearch] = useState("");
  const [debouncedSearch, setDebouncedSearch] = useState("");
  const chainId = useChainId();
  useDebounce(
    () => {
      setDebouncedSearch(search);
    },
    500,
    [search]
  );
  useEffect(() => {
    setSearchParams((curr) => {
      const currSearch = curr.get("search");
      if (debouncedSearch || currSearch !== null) {
        if (debouncedSearch) {
          curr.set("search", debouncedSearch);
        } else {
          curr.delete("search");
        }
      }
      return curr;
    });
  }, [debouncedSearch, setSearchParams]);
  const handleSelectGame = (id) => {
    setSearchParams((curr) => {
      if (curr.get("game") === id) {
        curr.delete("game");
      } else {
        curr.set("game", id);
      }
      return curr;
    });
  };
  return /* @__PURE__ */ jsxs("main", { className: "container space-y-8 py-5 md:py-7", children: [
    /* @__PURE__ */ jsxs("div", { className: "space-y-1", children: [
      /* @__PURE__ */ jsx("h1", { className: "font-bold text-3xl", children: "Pools" }),
      /* @__PURE__ */ jsx("p", { className: "text-night-200", children: "Use your game assets to earn rewards by providing liquidity." })
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "space-y-3.5", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ jsx(
          Link,
          {
            to: "/pools",
            className: cn(
              "rounded-lg px-3 py-1 text-white hover:bg-night-800",
              tab === "pools" && "bg-night-900"
            ),
            children: "All Pools"
          }
        ),
        /* @__PURE__ */ jsx(
          Link,
          {
            to: "/pools/my-positions",
            className: cn(
              "rounded-lg px-3 py-1 text-white hover:bg-night-800",
              tab === "user" && "bg-night-900"
            ),
            children: "My Positions"
          }
        )
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "flex flex-wrap items-center gap-2", children: [
        /* @__PURE__ */ jsxs("div", { className: "flex items-center rounded-md border border-night-800 pl-2", children: [
          /* @__PURE__ */ jsx(SearchIcon, { className: "h-5 w-5 text-night-400" }),
          /* @__PURE__ */ jsx(
            Input,
            {
              type: "search",
              placeholder: "Search",
              className: "w-auto border-none ring-offset-transparent focus-visible:ring-0 focus-visible:ring-transparent",
              value: search,
              onChange: (e) => setSearch(e.target.value)
            }
          )
        ] }),
        Object.entries(GAME_METADATA).map(
          ([id, { name, image, tokens, collections }]) => chainId in tokens || chainId in collections ? /* @__PURE__ */ jsxs(
            "button",
            {
              type: "button",
              className: cn(
                "flex items-center gap-1 rounded-full border border-night-800 px-3 py-2 text-sm transition-colors hover:bg-night-800 active:bg-night-900",
                searchParams.get("game") === id && "bg-night-900"
              ),
              onClick: () => handleSelectGame(id),
              children: [
                /* @__PURE__ */ jsx("img", { src: image, alt: "", className: "h-5 w-5 rounded" }),
                name
              ]
            },
            id
          ) : null
        )
      ] }),
      /* @__PURE__ */ jsx(Outlet, {})
    ] })
  ] });
}

const route14 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: PoolsListPage,
  meta: meta$2
}, Symbol.toStringTag, { value: 'Module' }));

const SwapRoutePanel = ({
  swapRoute: {
    tokenIn,
    tokenOut,
    amountIn,
    amountOut,
    priceImpact,
    derivedValue,
    lpFee,
    protocolFee,
    royaltiesFee
  },
  isExactOut,
  amountInMax,
  amountOutMin,
  className
}) => {
  const isNFTNFT = tokenIn.isNFT && !!tokenOut?.isNFT;
  return /* @__PURE__ */ jsxs(
    "div",
    {
      className: cn(
        "overflow-hidden rounded-lg border border-night-800 text-night-400 text-sm",
        className
      ),
      children: [
        /* @__PURE__ */ jsx("div", { className: "flex items-center justify-between border border-night-1000 border-b p-4", children: /* @__PURE__ */ jsxs("span", { children: [
          /* @__PURE__ */ jsx("span", { className: "font-medium text-honey-25", children: "1" }),
          " ",
          tokenOut?.symbol,
          " =",
          " ",
          /* @__PURE__ */ jsx("span", { className: "font-medium text-honey-25", children: formatAmount(derivedValue) }),
          " ",
          tokenIn.symbol
        ] }) }),
        amountIn > 0 && amountOut > 0 ? /* @__PURE__ */ jsxs("ul", { className: "mt-2.5 space-y-1 p-4 pt-0", children: [
          /* @__PURE__ */ jsxs("li", { className: "flex items-center justify-between", children: [
            "Price impact",
            /* @__PURE__ */ jsx("span", { children: formatPercent(priceImpact * -1) })
          ] }),
          lpFee > 0 && /* @__PURE__ */ jsxs("li", { className: "flex items-center justify-between", children: [
            "Liquidity provider fee",
            /* @__PURE__ */ jsx("span", { children: formatPercent(lpFee, 3) })
          ] }),
          royaltiesFee > 0 && /* @__PURE__ */ jsxs("li", { className: "flex items-center justify-between", children: [
            "Royalties fee",
            /* @__PURE__ */ jsx("span", { children: formatPercent(royaltiesFee, 3) })
          ] }),
          protocolFee > 0 && /* @__PURE__ */ jsxs("li", { className: "flex items-center justify-between", children: [
            "Protocol fee",
            /* @__PURE__ */ jsx("span", { children: formatPercent(protocolFee, 3) })
          ] }),
          isNFTNFT ? /* @__PURE__ */ jsxs("li", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ jsxs("span", { className: "flex items-center gap-1", children: [
              "NFT dust sent to pool",
              /* @__PURE__ */ jsxs(InfoPopover, { buttonClassName: "h-3 w-3", children: [
                "NFTs can only be traded in whole amounts so any fractional amounts are sent to the pool to reward liquidity providers. Minimize this amount to get the best trade value by adjusting the ",
                isExactOut ? "output" : "input",
                " amount selected."
              ] })
            ] }),
            /* @__PURE__ */ jsxs("span", { children: [
              formatAmount(
                isExactOut ? ceilBigInt(amountIn) - amountIn : amountOut - floorBigInt(amountOut),
                {
                  decimals: isExactOut ? tokenIn.decimals : tokenOut.decimals
                }
              ),
              " ",
              isExactOut ? tokenIn.symbol : tokenOut.symbol
            ] })
          ] }) : isExactOut ? /* @__PURE__ */ jsxs("li", { className: "flex items-center justify-between", children: [
            "Maximum spent",
            /* @__PURE__ */ jsxs("span", { children: [
              formatAmount(amountInMax, { decimals: tokenIn.decimals }),
              " ",
              tokenIn.symbol
            ] })
          ] }) : /* @__PURE__ */ jsxs("li", { className: "flex items-center justify-between", children: [
            "Minimum received",
            /* @__PURE__ */ jsxs("span", { children: [
              formatAmount(amountOutMin, { decimals: tokenOut?.decimals }),
              " ",
              tokenOut?.symbol
            ] })
          ] })
        ] }) : null
      ]
    }
  );
};

const usePoolTokenBalance = ({ token, address }) => {
  const {
    load: loadNFTBalance,
    state: nftBalanceStatus,
    data: nftBalance
  } = useFetcher();
  const { data: erc20Balance = 0n, isLoading } = useTokenBalance({
    id: token.id,
    address,
    isETH: token.isETH,
    enabled: !!address && !token.isNFT
  });
  useEffect(() => {
    if (!token.isNFT || !address) {
      return;
    }
    const params = new URLSearchParams({
      address
    });
    loadNFTBalance(
      `/resources/vaults/${token.id}/balance?${params.toString()}`
    );
  }, [token.isNFT, token.id, address, loadNFTBalance]);
  return {
    data: token.isNFT ? nftBalance?.ok ? nftBalance.balance : 0 : erc20Balance,
    isLoading: isLoading || nftBalanceStatus === "loading"
  };
};

const useSwap = ({
  version,
  tokenIn,
  tokenOut,
  amountIn,
  amountOut,
  nftsIn,
  nftsOut,
  isExactOut,
  path,
  enabled = true,
  onSuccess
}) => {
  const { address, addressArg } = useAccount();
  const routerAddress = useRouterAddress(version);
  const state = useSettingsStore();
  const isEnabled = enabled && !!address && !!tokenOut;
  const amountInMax = isExactOut ? getAmountMax(amountIn, state?.slippage || DEFAULT_SLIPPAGE) : amountIn;
  const amountOutMin = isExactOut ? amountOut : getAmountMin(amountOut, state?.slippage || DEFAULT_SLIPPAGE);
  const collectionsIn = nftsIn.map(
    ({ collectionAddr }) => collectionAddr
  );
  const tokenIdsIn = nftsIn.map(({ tokenId }) => BigInt(tokenId));
  const quantitiesIn = nftsIn.map(({ quantity }) => BigInt(quantity));
  const collectionsOut = nftsOut.map(
    ({ collectionAddr }) => collectionAddr
  );
  const tokenIdsOut = nftsOut.map(({ tokenId }) => BigInt(tokenId));
  const quantitiesOut = nftsOut.map(({ quantity }) => BigInt(quantity));
  const deadline = BigInt(
    Math.floor(Date.now() / 1e3) + (state?.deadline || 30) * 60
  );
  const swapExactTokensForTokens = useWriteMagicSwapV2RouterSwapExactTokensForTokens();
  const swapExactTokensForTokensReceipt = useWaitForTransactionReceipt({
    hash: swapExactTokensForTokens.data
  });
  const swapTokensForExactTokens = useWriteMagicSwapV2RouterSwapTokensForExactTokens();
  const swapTokensForExactTokensReceipt = useWaitForTransactionReceipt({
    hash: swapTokensForExactTokens.data
  });
  const swapExactTokensForETH = useWriteMagicSwapV2RouterSwapExactTokensForEth();
  const swapExactTokensForETHReceipt = useWaitForTransactionReceipt({
    hash: swapExactTokensForETH.data
  });
  const swapTokensForExactETH = useWriteMagicSwapV2RouterSwapTokensForExactEth();
  const swapTokensForExactETHReceipt = useWaitForTransactionReceipt({
    hash: swapTokensForExactETH.data
  });
  const swapETHForExactTokens = useWriteMagicSwapV2RouterSwapEthForExactTokens();
  const swapETHForExactTokensReceipt = useWaitForTransactionReceipt({
    hash: swapETHForExactTokens.data
  });
  const swapExactETHForTokens = useWriteMagicSwapV2RouterSwapExactEthForTokens();
  const swapExactETHForTokensReceipt = useWaitForTransactionReceipt({
    hash: swapExactETHForTokens.data
  });
  const swapTokensForNFT = useWriteMagicSwapV2RouterSwapTokensForNft();
  const swapTokensForNFTReceipt = useWaitForTransactionReceipt({
    hash: swapTokensForNFT.data
  });
  const swapNFTForTokens = useWriteMagicSwapV2RouterSwapNftForTokens();
  const swapNFTForTokensReceipt = useWaitForTransactionReceipt({
    hash: swapNFTForTokens.data
  });
  const swapETHForNFT = useWriteMagicSwapV2RouterSwapEthForNft();
  const swapETHForNFTReceipt = useWaitForTransactionReceipt({
    hash: swapETHForNFT.data
  });
  const swapNFTForETH = useWriteMagicSwapV2RouterSwapNftForEth();
  const swapNFTForETHReceipt = useWaitForTransactionReceipt({
    hash: swapNFTForETH.data
  });
  const swapNFTForNFT = useWriteMagicSwapV2RouterSwapNftForNft();
  const swapNFTForNFTReceipt = useWaitForTransactionReceipt({
    hash: swapNFTForNFT.data
  });
  const isSuccess = swapExactTokensForTokensReceipt.isSuccess || swapTokensForExactTokensReceipt.isSuccess || swapExactTokensForETHReceipt.isSuccess || swapTokensForExactETHReceipt.isSuccess || swapETHForExactTokensReceipt.isSuccess || swapExactETHForTokensReceipt.isSuccess || swapTokensForNFTReceipt.isSuccess || swapNFTForTokensReceipt.isSuccess || swapETHForNFTReceipt.isSuccess || swapNFTForETHReceipt.isSuccess || swapNFTForNFTReceipt.isSuccess;
  useToast({
    title: `Swap ${formatAmount(bigIntToNumber(amountIn))} ${tokenIn.symbol} for ${formatAmount(bigIntToNumber(amountOut))} ${tokenOut?.symbol}`,
    isLoading: swapExactTokensForTokens.isPending || swapExactTokensForTokensReceipt.isLoading || swapTokensForExactTokens.isPending || swapTokensForExactTokensReceipt.isLoading || swapExactTokensForETH.isPending || swapExactTokensForETHReceipt.isLoading || swapTokensForExactETH.isPending || swapTokensForExactETHReceipt.isLoading || swapETHForExactTokens.isPending || swapETHForExactTokensReceipt.isLoading || swapExactETHForTokens.isPending || swapExactETHForTokensReceipt.isLoading || swapTokensForNFT.isPending || swapTokensForNFTReceipt.isLoading || swapNFTForTokens.isPending || swapNFTForTokensReceipt.isLoading || swapETHForNFT.isPending || swapETHForNFTReceipt.isLoading || swapNFTForETH.isPending || swapNFTForETHReceipt.isLoading || swapNFTForNFT.isPending || swapNFTForNFTReceipt.isLoading,
    isSuccess,
    isError: swapExactTokensForTokens.isError || swapExactTokensForTokensReceipt.isError || swapTokensForExactTokens.isError || swapTokensForExactTokensReceipt.isError || swapExactTokensForETH.isError || swapExactTokensForETHReceipt.isError || swapTokensForExactETH.isError || swapTokensForExactETHReceipt.isError || swapETHForExactTokens.isError || swapETHForExactTokensReceipt.isError || swapExactETHForTokens.isError || swapExactETHForTokensReceipt.isError || swapTokensForNFT.isError || swapTokensForNFTReceipt.isError || swapNFTForTokens.isError || swapNFTForTokensReceipt.isError || swapETHForNFT.isError || swapETHForNFTReceipt.isError || swapNFTForETH.isError || swapNFTForETHReceipt.isError || swapNFTForNFT.isError || swapNFTForNFTReceipt.isError,
    errorDescription: (swapExactTokensForTokens.error || swapExactTokensForTokensReceipt.error || swapTokensForExactTokens.error || swapTokensForExactTokensReceipt.error || swapExactTokensForETH.error || swapExactTokensForETHReceipt.error || swapTokensForExactETH.error || swapTokensForExactETHReceipt.error || swapETHForExactTokens.error || swapETHForExactTokensReceipt.error || swapExactETHForTokens.error || swapExactETHForTokensReceipt.error || swapTokensForNFT.error || swapTokensForNFTReceipt.error || swapNFTForTokens.error || swapNFTForTokensReceipt.error || swapETHForNFT.error || swapETHForNFTReceipt.error || swapNFTForETH.error || swapNFTForETHReceipt.error || swapNFTForNFT.error || swapNFTForNFTReceipt.error)?.message
  });
  useEffect(() => {
    if (isSuccess) {
      onSuccess?.();
    }
  }, [isSuccess, onSuccess]);
  return {
    amountInMax,
    amountOutMin,
    swap: () => {
      if (!isEnabled) {
        return;
      }
      if (tokenIn.isNFT && tokenOut.isNFT) {
        return swapNFTForNFT.writeContractAsync({
          address: routerAddress,
          args: [
            collectionsIn,
            tokenIdsIn,
            quantitiesIn,
            collectionsOut,
            tokenIdsOut,
            quantitiesOut,
            path,
            addressArg,
            deadline
          ]
        });
      }
      if (tokenIn.isNFT) {
        if (tokenOut.isETH) {
          return swapNFTForETH.writeContractAsync({
            address: routerAddress,
            args: [
              collectionsIn,
              tokenIdsIn,
              quantitiesIn,
              amountOutMin,
              path,
              addressArg,
              deadline
            ]
          });
        }
        return swapNFTForTokens.writeContractAsync({
          address: routerAddress,
          args: [
            collectionsIn,
            tokenIdsIn,
            quantitiesIn,
            amountOutMin,
            path,
            addressArg,
            deadline
          ]
        });
      }
      if (tokenOut.isNFT) {
        if (tokenIn.isETH) {
          return swapETHForNFT.writeContractAsync({
            address: routerAddress,
            args: [
              collectionsOut,
              tokenIdsOut,
              quantitiesOut,
              path,
              addressArg,
              deadline
            ],
            value: amountInMax
          });
        }
        return swapTokensForNFT.writeContractAsync({
          address: routerAddress,
          args: [
            collectionsOut,
            tokenIdsOut,
            quantitiesOut,
            amountInMax,
            path,
            addressArg,
            deadline
          ]
        });
      }
      if (tokenIn.isETH) {
        if (isExactOut) {
          return swapETHForExactTokens.writeContractAsync({
            address: routerAddress,
            args: [amountOut, path, addressArg, deadline],
            value: amountInMax
          });
        }
        return swapExactETHForTokens.writeContractAsync({
          address: routerAddress,
          args: [amountOutMin, path, addressArg, deadline],
          value: amountIn
        });
      }
      if (tokenOut.isETH) {
        if (isExactOut) {
          return swapTokensForExactETH.writeContractAsync({
            address: routerAddress,
            args: [amountOut, amountInMax, path, addressArg, deadline]
          });
        }
        return swapExactTokensForETH.writeContractAsync({
          address: routerAddress,
          args: [amountIn, amountOutMin, path, addressArg, deadline]
        });
      }
      if (isExactOut) {
        return swapTokensForExactTokens.writeContractAsync({
          address: routerAddress,
          args: [amountOut, amountInMax, path, addressArg, deadline]
        });
      }
      return swapExactTokensForTokens.writeContractAsync({
        address: routerAddress,
        args: [amountIn, amountOutMin, path, addressArg, deadline]
      });
    }
  };
};

const useSwapRoute = ({
  tokenIn,
  tokenOut,
  pools,
  amount,
  isExactOut
}) => {
  const amountBI = parseUnits(
    amount,
    isExactOut ? tokenOut?.decimals ?? 18 : tokenIn.decimals
  );
  const isSampleRoute = amountBI <= 0;
  const {
    amountInBI = 0n,
    amountOutBI = 0n,
    legs = [],
    priceImpact = 0
  } = createSwapRoute(
    tokenIn,
    tokenOut,
    pools,
    isSampleRoute ? 1n : amountBI,
    isExactOut
  ) ?? {};
  const poolLegs = legs.map(({ poolAddress, tokenFrom, tokenTo }) => {
    const pool = pools.find((pool2) => pool2.id === poolAddress);
    if (!pool) {
      return void 0;
    }
    return {
      ...pool,
      tokenFrom: pool.token0.id === tokenFrom.address ? pool.token0 : pool.token1,
      tokenTo: pool.token0.id === tokenTo.address ? pool.token0 : pool.token1
    };
  }).filter((leg) => !!leg);
  const isValid = poolLegs.length > 0 && new Set(poolLegs.map(({ version }) => version)).size === 1;
  return {
    isValid,
    version: isValid ? poolLegs[0]?.version : void 0,
    amountIn: isSampleRoute ? 0n : amountInBI,
    amountOut: isSampleRoute ? 0n : amountOutBI,
    tokenIn: poolLegs[0]?.tokenFrom ?? tokenIn,
    tokenOut: poolLegs[poolLegs.length - 1]?.tokenTo ?? tokenOut ?? void 0,
    path: poolLegs.flatMap(
      ({ tokenFrom, tokenTo }, i) => i === poolLegs.length - 1 ? [tokenFrom.id, tokenTo.id] : tokenFrom.id
    ),
    priceImpact,
    derivedValue: multiplyArray(
      poolLegs.map(
        ({ tokenFrom, tokenTo }) => bigIntToNumber(BigInt(tokenFrom.reserve), tokenFrom.decimals) / bigIntToNumber(BigInt(tokenTo.reserve), tokenTo.decimals)
      )
    ),
    lpFee: sumArray(poolLegs.map(({ lpFee }) => Number(lpFee))),
    protocolFee: sumArray(
      poolLegs.map(({ protocolFee }) => Number(protocolFee))
    ),
    royaltiesFee: sumArray(
      poolLegs.map(({ royaltiesFee }) => Number(royaltiesFee))
    )
  };
};

const meta$1 = ({ matches, data, location }) => {
  const requestInfo = matches.find((match) => match.id === "root")?.data.requestInfo;
  const url = generateUrl(requestInfo?.origin, location.pathname);
  return getSocialMetas({
    url,
    title: generateTitle(
      data?.tokenOut ? `Swap ${data?.tokenIn.symbol} to ${data?.tokenOut.symbol}` : "Swap"
    ),
    image: data?.tokenOut ? `${url}/${data?.tokenIn.id}/${data?.tokenOut.id}.png` : generateUrl(requestInfo?.origin, "/img/seo-banner.png")
  });
};
async function loader({ request }) {
  const url = new URL(request.url);
  url.searchParams.get("in") ?? ENV.PUBLIC_DEFAULT_TOKEN_ADDRESS;
  url.searchParams.get("out");
  const [
    session,
    //pools,
    tokenIn,
    tokenOut
  ] = await Promise.all([
    getSession(request.headers.get("Cookie")),
    // fetchPools(),
    // tokenInAddress ? fetchToken(tokenInAddress) : null,
    // tokenOutAddress ? fetchToken(tokenOutAddress) : null,
    {
      id: "0x539bde0d7dbd336b79148aa742883198bbf60342",
      name: "MAGIC",
      symbol: "MAGIC",
      decimals: 18,
      derivedMAGIC: "1",
      isNFT: false,
      isMAGIC: true,
      isETH: false,
      vaultCollections: [],
      vaultReserveItems: [],
      image: "/img/tokens/magic.png",
      collections: [],
      urlSlug: "",
      collectionId: "",
      collectionTokenIds: [],
      priceUSD: 0.39492357,
      reserve: "0"
    },
    null
  ]);
  if (!tokenIn) {
    throw new Response("Input token not found", {
      status: 404
    });
  }
  const address = session.get("address");
  return defer({
    pools: [
      {
        id: "0xccd05a0fcfc1380e9da27862adb2198e58e0d66f",
        name: "Anima",
        symbol: "ANIMA",
        decimals: 18,
        derivedMAGIC: "0.01035657160732818821621681396728536",
        isNFT: false,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [],
        vaultReserveItems: [],
        image: "/img/tokens/anima.png",
        collections: [],
        urlSlug: "",
        collectionId: "",
        collectionTokenIds: [],
        priceUSD: 0.004090054232126686,
        reserve: "0"
      },
      {
        id: "0xeeac5e75216571773c0064b3b591a86253791db6",
        name: "Ellerium",
        symbol: "ELM",
        decimals: 18,
        derivedMAGIC: "0.0424572118182195900431379223632869",
        isNFT: false,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [],
        vaultReserveItems: [],
        image: "/img/tokens/elm.png",
        collections: [],
        urlSlug: "",
        collectionId: "",
        collectionTokenIds: [],
        priceUSD: 0.01676735366349747,
        reserve: "0"
      },
      {
        id: "0x872bad41cfc8ba731f811fea8b2d0b9fd6369585",
        name: "gFLY",
        symbol: "GFLY",
        decimals: 18,
        derivedMAGIC: "0.1975655451032742446111993841269468",
        isNFT: false,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [],
        vaultReserveItems: [],
        image: "/img/tokens/gfly.png",
        collections: [],
        urlSlug: "",
        collectionId: "",
        collectionTokenIds: [],
        priceUSD: 0.07802329038118108,
        reserve: "0"
      },
      {
        id: "0x74abf11b5f7bf057000e411a7130b46911792709",
        name: "Heist Rewards Token",
        symbol: "HRT",
        decimals: 18,
        derivedMAGIC: "0",
        isNFT: false,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [],
        vaultReserveItems: [],
        image: "/img/tokens/hrt.png",
        collections: [],
        urlSlug: "",
        collectionId: "",
        collectionTokenIds: [],
        priceUSD: 0,
        reserve: "0"
      },
      {
        id: "0x539bde0d7dbd336b79148aa742883198bbf60342",
        name: "MAGIC",
        symbol: "MAGIC",
        decimals: 18,
        derivedMAGIC: "1",
        isNFT: false,
        isMAGIC: true,
        isETH: false,
        vaultCollections: [],
        vaultReserveItems: [],
        image: "/img/tokens/magic.png",
        collections: [],
        urlSlug: "",
        collectionId: "",
        collectionTokenIds: [],
        priceUSD: 0.39492357,
        reserve: "0"
      },
      {
        id: "0xccd536fa5a6215a2600a7ee44fd7798f8c315a09",
        name: "Fishing Bait",
        symbol: "Fishing Bait",
        decimals: 18,
        derivedMAGIC: "0",
        isNFT: true,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [
          {
            collection: {
              id: "0x58318bceaa0d249b62fad57d134da7475e551b47",
              type: "ERC1155"
            },
            tokenIds: ["100920000"]
          }
        ],
        vaultReserveItems: [
          {
            tokenId: "100920000",
            amount: 369680
          }
        ],
        type: "ERC1155",
        image: "https://djmahssgw62sw.cloudfront.net/general/0xabc3845975855419effad091f62e8abbba39f10534766de81a5f7ec20efb94a2.png",
        collections: [
          {
            id: "0x58318bceaa0d249b62fad57d134da7475e551b47",
            urlSlug: "zeeverse-items",
            tokenIds: ["100920000"],
            name: "Items",
            symbol: "",
            type: "ERC1155",
            image: "https://images.treasure.lol/0/Zeeverse/zeeverse-items-thumb.png"
          }
        ],
        urlSlug: "zeeverse-items",
        collectionId: "0x58318bceaa0d249b62fad57d134da7475e551b47",
        collectionTokenIds: ["100920000"],
        priceUSD: 0,
        reserve: "0"
      },
      {
        id: "0x14ea6d0278c760adbce9117447f784acdd4f9d9e",
        name: "Gloop raw",
        symbol: "Gloop raw",
        decimals: 18,
        derivedMAGIC: "0",
        isNFT: true,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [
          {
            collection: {
              id: "0x58318bceaa0d249b62fad57d134da7475e551b47",
              type: "ERC1155"
            },
            tokenIds: ["100920001"]
          }
        ],
        vaultReserveItems: [
          {
            tokenId: "100920001",
            amount: 11514
          }
        ],
        type: "ERC1155",
        image: "https://djmahssgw62sw.cloudfront.net/general/0x31f870c092ef128ec6c831b0b36902afee8af16e79fef8abdc01f56e25d185cf.png",
        collections: [
          {
            id: "0x58318bceaa0d249b62fad57d134da7475e551b47",
            urlSlug: "zeeverse-items",
            tokenIds: ["100920001"],
            name: "Items",
            symbol: "",
            type: "ERC1155",
            image: "https://images.treasure.lol/0/Zeeverse/zeeverse-items-thumb.png"
          }
        ],
        urlSlug: "zeeverse-items",
        collectionId: "0x58318bceaa0d249b62fad57d134da7475e551b47",
        collectionTokenIds: ["100920001"],
        priceUSD: 0,
        reserve: "0"
      },
      {
        id: "0x6f8fc2345ef23c132ee2538858c23b579c3c5523",
        name: "Snork",
        symbol: "Snork",
        decimals: 18,
        derivedMAGIC: "0",
        isNFT: true,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [
          {
            collection: {
              id: "0x58318bceaa0d249b62fad57d134da7475e551b47",
              type: "ERC1155"
            },
            tokenIds: ["100920012"]
          }
        ],
        vaultReserveItems: [
          {
            tokenId: "100920012",
            amount: 1498
          }
        ],
        type: "ERC1155",
        image: "https://djmahssgw62sw.cloudfront.net/general/0xd4ed76ce1748f65c9e50e7863ebe2b7595e35aca493e1a4c254671e099ac2b83.png",
        collections: [
          {
            id: "0x58318bceaa0d249b62fad57d134da7475e551b47",
            urlSlug: "zeeverse-items",
            tokenIds: ["100920012"],
            name: "Items",
            symbol: "",
            type: "ERC1155",
            image: "https://images.treasure.lol/0/Zeeverse/zeeverse-items-thumb.png"
          }
        ],
        urlSlug: "zeeverse-items",
        collectionId: "0x58318bceaa0d249b62fad57d134da7475e551b47",
        collectionTokenIds: ["100920012"],
        priceUSD: 0,
        reserve: "0"
      },
      {
        id: "0x0caadd427a6feb5b5fc1137eb05aa7ddd9c08ce9",
        name: "VEE",
        symbol: "VEE",
        decimals: 18,
        derivedMAGIC: "0.001256102638234773389685845218283959",
        isNFT: false,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [],
        vaultReserveItems: [],
        image: "/img/tokens/vee.png",
        collections: [],
        urlSlug: "",
        collectionId: "",
        collectionTokenIds: [],
        priceUSD: 4960645381780952e-19,
        reserve: "0"
      }
    ],
    tokens: [
      {
        id: "0xccd05a0fcfc1380e9da27862adb2198e58e0d66f",
        name: "Anima",
        symbol: "ANIMA",
        decimals: 18,
        derivedMAGIC: "0.01035657160732818821621681396728536",
        isNFT: false,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [],
        vaultReserveItems: [],
        image: "/img/tokens/anima.png",
        collections: [],
        urlSlug: "",
        collectionId: "",
        collectionTokenIds: [],
        priceUSD: 0.004090054232126686,
        reserve: "0"
      },
      {
        id: "0xeeac5e75216571773c0064b3b591a86253791db6",
        name: "Ellerium",
        symbol: "ELM",
        decimals: 18,
        derivedMAGIC: "0.0424572118182195900431379223632869",
        isNFT: false,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [],
        vaultReserveItems: [],
        image: "/img/tokens/elm.png",
        collections: [],
        urlSlug: "",
        collectionId: "",
        collectionTokenIds: [],
        priceUSD: 0.01676735366349747,
        reserve: "0"
      },
      {
        id: "0x872bad41cfc8ba731f811fea8b2d0b9fd6369585",
        name: "gFLY",
        symbol: "GFLY",
        decimals: 18,
        derivedMAGIC: "0.1975655451032742446111993841269468",
        isNFT: false,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [],
        vaultReserveItems: [],
        image: "/img/tokens/gfly.png",
        collections: [],
        urlSlug: "",
        collectionId: "",
        collectionTokenIds: [],
        priceUSD: 0.07802329038118108,
        reserve: "0"
      },
      {
        id: "0x74abf11b5f7bf057000e411a7130b46911792709",
        name: "Heist Rewards Token",
        symbol: "HRT",
        decimals: 18,
        derivedMAGIC: "0",
        isNFT: false,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [],
        vaultReserveItems: [],
        image: "/img/tokens/hrt.png",
        collections: [],
        urlSlug: "",
        collectionId: "",
        collectionTokenIds: [],
        priceUSD: 0,
        reserve: "0"
      },
      {
        id: "0x539bde0d7dbd336b79148aa742883198bbf60342",
        name: "MAGIC",
        symbol: "MAGIC",
        decimals: 18,
        derivedMAGIC: "1",
        isNFT: false,
        isMAGIC: true,
        isETH: false,
        vaultCollections: [],
        vaultReserveItems: [],
        image: "/img/tokens/magic.png",
        collections: [],
        urlSlug: "",
        collectionId: "",
        collectionTokenIds: [],
        priceUSD: 0.39492357,
        reserve: "0"
      },
      {
        id: "0xccd536fa5a6215a2600a7ee44fd7798f8c315a09",
        name: "Fishing Bait",
        symbol: "Fishing Bait",
        decimals: 18,
        derivedMAGIC: "0",
        isNFT: true,
        isMAGIC: false,
        isETH: false,
        vaultCollections: [
          {
            collection: {
              id: "0x58318bceaa0d249b62fad57d134da7475e551b47",
              type: "ERC1155"
            },
            tokenIds: ["100920000"]
          }
        ],
        vaultReserveItems: [{ tokenId: "100920000", amount: 369680 }],
        type: "ERC1155",
        image: "https://djmahssgw62sw.cloudfront.net/general/0xabc3845975855419effad091f62e8abbba39f10534766de81a5f7ec20efb94a2.png",
        collections: [
          {
            id: "0x58318bceaa0d249b62fad57d134da7475e551b47",
            urlSlug: "zeeverse-items",
            tokenIds: ["100920000"],
            name: "Items",
            symbol: "",
            type: "ERC1155",
            image: "https://images.treasure.lol/0/Zeeverse/zeeverse-items-thumb.png"
          }
        ],
        urlSlug: "zeeverse-items",
        collectionId: "0x58318bceaa0d249b62fad57d134da7475e551b47",
        collectionTokenIds: ["100920000"],
        priceUSD: 0,
        reserve: "0"
      }
    ],
    tokenIn,
    tokenOut,
    tokenInNFTBalance: address && tokenIn.isNFT ? fetchPoolTokenBalance(tokenIn, address) : void 0,
    address
  });
}
const DEFAULT_STATE = {
  amount: "0",
  nftsIn: [],
  nftsOut: [],
  isExactOut: false
};
function SwapPage() {
  const loaderData = useLoaderData();
  const revalidator = useRevalidator();
  const { address, isConnected } = useAccount();
  const [searchParams, setSearchParams] = useSearchParams();
  const [{ amount, isExactOut, nftsIn, nftsOut }, setTrade] = useState(DEFAULT_STATE);
  const [swapModalOpen, setSwapModalOpen] = useState(false);
  const [priceImpactOptIn, setPriceImpactOptIn] = useState(false);
  const location = useLocation();
  const handleSelectToken = (direction, token) => {
    searchParams.set(direction, token.id);
    setSearchParams(searchParams, {
      state: "true"
    });
  };
  const swapRoute = useSwapRoute({
    ...loaderData,
    amount,
    isExactOut
  });
  const amountNFTsIn = countTokens(nftsIn);
  const amountNFTsOut = countTokens(nftsOut);
  const {
    isValid: isValidSwapRoute,
    version = "V2",
    amountIn,
    amountOut,
    tokenIn,
    tokenOut,
    path,
    priceImpact
  } = swapRoute;
  const routerAddress = useRouterAddress(version);
  const requiredNftsIn = Math.ceil(bigIntToNumber(amountIn, tokenIn.decimals));
  const requiredNftsOut = Math.floor(
    bigIntToNumber(amountOut, tokenOut?.decimals)
  );
  const hasAmounts = amountIn > 0 && amountOut > 0 && (!tokenIn.isNFT || requiredNftsIn === amountNFTsIn) && (!tokenOut?.isNFT || requiredNftsOut === amountNFTsOut);
  const requiresPriceImpactOptIn = hasAmounts && priceImpact >= 0.15;
  const { data: tokenInBalance, refetch: refetchTokenInBalance } = useTokenBalance({
    id: tokenIn.id,
    address,
    isETH: tokenIn.isETH,
    enabled: !tokenIn.isNFT
  });
  const { data: tokenOutBalance, refetch: refetchTokenOutBalance } = useTokenBalance({
    id: tokenOut?.id,
    address,
    isETH: tokenOut?.isETH,
    enabled: !tokenOut?.isNFT
  });
  const refetch = useCallback(() => {
    if (revalidator.state === "idle") ;
    refetchTokenInBalance();
    refetchTokenOutBalance();
  }, [revalidator, refetchTokenInBalance, refetchTokenOutBalance]);
  useFocusInterval(refetch, 5e3);
  const { amountInMax, amountOutMin, swap } = useSwap({
    version,
    tokenIn,
    tokenOut,
    amountIn,
    amountOut,
    isExactOut,
    nftsIn,
    nftsOut,
    path,
    enabled: isConnected && !!tokenOut && hasAmounts && isValidSwapRoute,
    onSuccess: () => {
      setTrade(DEFAULT_STATE);
      refetch();
      setSwapModalOpen(false);
      setPriceImpactOptIn(false);
    }
  });
  const { isApproved: isTokenInApproved, approve: approveTokenIn } = useApproval({
    operator: routerAddress,
    token: tokenIn,
    amount: amountInMax,
    enabled: isConnected && hasAmounts
  });
  useEffect(() => {
    if (tokenIn.isNFT) {
      setTrade(DEFAULT_STATE);
    } else {
      setTrade((trade) => ({
        ...trade,
        nftsOut: []
      }));
    }
  }, [tokenIn.id]);
  useEffect(() => {
    if (tokenOut?.isNFT) {
      setTrade(DEFAULT_STATE);
    } else {
      setTrade((trade) => ({
        ...trade,
        nftsOut: []
      }));
    }
  }, [tokenOut?.id]);
  const formattedTokenInAmount = formatAmount(amountIn, {
    decimals: tokenIn.decimals
  });
  const formattedTokenOutAmount = formatAmount(amountOut, {
    decimals: tokenOut?.decimals
  });
  return /* @__PURE__ */ jsxs("main", { className: "mx-auto max-w-xl px-4 pt-12 pb-20 sm:px-6 lg:px-8", children: [
    /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between gap-3 text-night-600", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-1.5 font-bold text-xl", children: [
        /* @__PURE__ */ jsx(SwapIcon, { className: "h-6 w-6" }),
        /* @__PURE__ */ jsx("h1", { className: "text-night-100", children: "Swap" })
      ] }),
      /* @__PURE__ */ jsx(SettingsDropdownMenu, {})
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "mt-3", children: [
      /* @__PURE__ */ jsx(
        SwapTokenInput,
        {
          token: tokenIn,
          otherToken: tokenOut,
          isOut: false,
          balance: tokenInBalance,
          amount: isExactOut ? tokenIn.isNFT ? requiredNftsIn.toString() : formattedTokenInAmount : amount,
          selectedNfts: nftsIn,
          requiredNftSelectionAmount: isExactOut && amountNFTsOut > 0 ? requiredNftsIn : void 0,
          onSelect: (token) => handleSelectToken("in", token),
          onUpdateAmount: (amount2) => setTrade({
            amount: amount2,
            nftsIn: [],
            nftsOut: [],
            isExactOut: false
          }),
          onSelectNfts: (tokens) => {
            const amountTokens = countTokens(tokens);
            setTrade((curr) => {
              if (amountNFTsIn === 0 && amountNFTsOut === 0 || // user hasn't selecting anything previously
              amountNFTsIn > 0 && amountNFTsIn !== amountTokens) {
                return {
                  amount: amountTokens.toString(),
                  nftsIn: tokens,
                  nftsOut: [],
                  isExactOut: false
                };
              }
              return {
                ...curr,
                nftsIn: tokens
              };
            });
          }
        },
        `${location.search}-in`
      ),
      /* @__PURE__ */ jsx(
        Link,
        {
          to: `/swap?in=${tokenOut?.id}&out=${tokenIn.id}`,
          "aria-disabled": !tokenOut?.id ? "true" : "false",
          onClick: (e) => !tokenOut?.id && e.preventDefault(),
          className: cn(
            "-my-2 relative z-10 mx-auto flex h-8 w-8 items-center justify-center rounded border-4 border-night-1200 bg-night-1100 text-honey-25",
            !tokenOut?.id ? "cursor-not-allowed text-night-800" : "group"
          ),
          children: /* @__PURE__ */ jsx(ArrowDownIcon, { className: "h-3.5 w-3.5 transition-transform group-hover:rotate-180" })
        }
      ),
      /* @__PURE__ */ jsx(
        SwapTokenInput,
        {
          token: tokenOut,
          otherToken: tokenIn,
          isOut: true,
          balance: tokenOutBalance,
          amount: isExactOut ? amount : tokenOut?.isNFT ? requiredNftsOut.toString() : formattedTokenOutAmount,
          selectedNfts: nftsOut,
          requiredNftSelectionAmount: !isExactOut && amountNFTsIn > 0 ? requiredNftsOut : void 0,
          onSelect: (token) => handleSelectToken("out", token),
          onUpdateAmount: (amount2) => setTrade({
            amount: amount2,
            nftsIn: [],
            nftsOut: [],
            isExactOut: true
          }),
          onSelectNfts: (tokens) => {
            const amountTokens = countTokens(tokens);
            setTrade((curr) => {
              if (amountNFTsIn === 0 && amountNFTsOut === 0 || // user hasn't selecting anything previously
              amountNFTsOut > 0 && amountNFTsOut !== amountTokens) {
                return {
                  amount: amountTokens.toString(),
                  nftsIn: [],
                  nftsOut: tokens,
                  isExactOut: true
                };
              }
              return {
                ...curr,
                nftsOut: tokens
              };
            });
          }
        },
        `${location.search}-out`
      ),
      /* @__PURE__ */ jsx("div", { className: "mt-4 space-y-4", children: /* @__PURE__ */ jsx(ClientOnly, { children: () => /* @__PURE__ */ jsxs(Fragment, { children: [
        requiresPriceImpactOptIn ? /* @__PURE__ */ jsx(
          LabeledCheckbox,
          {
            className: "rounded-lg border border-red-500 bg-red-500/20 p-3 text-honey-25/90",
            onCheckedChange: (checked) => setPriceImpactOptIn(Boolean(checked)),
            checked: priceImpactOptIn,
            id: "priceImpactOptIn",
            description: "You will lose a big portion of your funds in this trade. Please tick the box if you would like to continue.",
            checkboxClassName: "border-red-900",
            children: "Price impact is too high"
          }
        ) : null,
        !!tokenOut && !isValidSwapRoute ? /* @__PURE__ */ jsx(Button, { className: "w-full", size: "lg", disabled: true, children: "Swap route not available" }) : !isTokenInApproved && hasAmounts && (!requiresPriceImpactOptIn || priceImpactOptIn) ? /* @__PURE__ */ jsxs(
          TransactionButton,
          {
            className: "w-full",
            size: "lg",
            onClick: () => approveTokenIn(),
            children: [
              "Approve ",
              tokenIn.name
            ]
          }
        ) : /* @__PURE__ */ jsxs(Dialog, { open: swapModalOpen, onOpenChange: setSwapModalOpen, children: [
          /* @__PURE__ */ jsx(DialogTrigger, { asChild: true, children: /* @__PURE__ */ jsx(
            TransactionButton,
            {
              className: "w-full",
              size: "lg",
              disabled: !hasAmounts || requiresPriceImpactOptIn && !priceImpactOptIn,
              children: "Swap Items"
            }
          ) }),
          /* @__PURE__ */ jsxs(DialogContent, { children: [
            /* @__PURE__ */ jsxs(DialogHeader, { children: [
              "Swap ",
              formattedTokenInAmount,
              " ",
              tokenIn.symbol,
              " for",
              " ",
              formattedTokenOutAmount,
              " ",
              tokenOut?.symbol
            ] }),
            /* @__PURE__ */ jsxs("div", { children: [
              /* @__PURE__ */ jsxs("div", { className: "overflow-hidden rounded-lg bg-night-1100", children: [
                /* @__PURE__ */ jsxs("div", { className: "flex items-center bg-night-900 px-3.5 py-2.5", children: [
                  /* @__PURE__ */ jsx(
                    PoolTokenImage,
                    {
                      token: tokenIn,
                      className: "h-6 w-6"
                    }
                  ),
                  /* @__PURE__ */ jsx("span", { className: "ml-2 font-medium text-honey-25", children: tokenIn.name })
                ] }),
                /* @__PURE__ */ jsx("div", { className: "p-4", children: tokenIn.isNFT ? nftsIn.length > 0 ? /* @__PURE__ */ jsxs("div", { className: "flex items-center space-x-2", children: [
                  /* @__PURE__ */ jsx(
                    "div",
                    {
                      className: cn("flex", {
                        "-space-x-5": tokenIn.type === "ERC721"
                      }),
                      children: nftsIn.slice(0, Math.min(nftsIn.length, 5)).map((nft) => {
                        return /* @__PURE__ */ jsxs(
                          "div",
                          {
                            className: "flex flex-col items-center",
                            children: [
                              /* @__PURE__ */ jsx(
                                "img",
                                {
                                  className: "h-12 w-12 rounded border-2 border-night-1100",
                                  src: nft.image.uri,
                                  alt: nft.metadata.name
                                }
                              ),
                              tokenIn.type === "ERC1155" ? /* @__PURE__ */ jsxs("p", { className: "text-night-600 text-xs", children: [
                                nft.quantity,
                                "x"
                              ] }) : null
                            ]
                          },
                          nft.tokenId
                        );
                      })
                    }
                  ),
                  nftsIn.length > 5 ? /* @__PURE__ */ jsx("div", { className: "flex items-center rounded-md bg-night-900 px-2 py-1.5", children: /* @__PURE__ */ jsxs("p", { className: "font-semibold text-night-500 text-xs", children: [
                    "+",
                    nftsIn.length - 5
                  ] }) }) : null
                ] }) : null : /* @__PURE__ */ jsx("p", { children: formattedTokenInAmount }) })
              ] }),
              /* @__PURE__ */ jsx("div", { className: "-my-2 relative z-10 mx-auto flex h-8 w-8 items-center justify-center rounded border-4 border-night-1200 bg-night-1100 text-honey-25", children: /* @__PURE__ */ jsx(ArrowDownIcon, { className: "h-3.5 w-3.5" }) }),
              /* @__PURE__ */ jsxs("div", { className: "overflow-hidden rounded-lg bg-night-1100", children: [
                /* @__PURE__ */ jsxs("div", { className: "flex items-center bg-night-900 px-3.5 py-2.5", children: [
                  /* @__PURE__ */ jsx(
                    PoolTokenImage,
                    {
                      token: tokenOut,
                      className: "h-6 w-6"
                    }
                  ),
                  /* @__PURE__ */ jsx("span", { className: "ml-2 font-medium text-honey-25", children: tokenOut?.name })
                ] }),
                /* @__PURE__ */ jsx("div", { className: "p-4", children: tokenOut?.isNFT ? nftsOut.length > 0 ? /* @__PURE__ */ jsxs("div", { className: "flex items-center space-x-2", children: [
                  /* @__PURE__ */ jsx(
                    "div",
                    {
                      className: cn("flex", {
                        "-space-x-5": tokenOut?.type === "ERC721"
                      }),
                      children: nftsOut.slice(0, Math.min(nftsOut.length, 5)).map((nft) => {
                        return /* @__PURE__ */ jsxs(
                          "div",
                          {
                            className: "flex flex-col items-center",
                            children: [
                              /* @__PURE__ */ jsx(
                                "img",
                                {
                                  className: "h-12 w-12 rounded border-2 border-night-1100",
                                  src: nft.image.uri,
                                  alt: nft.metadata.name
                                }
                              ),
                              tokenOut?.type === "ERC1155" ? /* @__PURE__ */ jsxs("p", { className: "text-night-600 text-xs", children: [
                                nft.quantity,
                                "x"
                              ] }) : null
                            ]
                          },
                          nft.tokenId
                        );
                      })
                    }
                  ),
                  nftsOut.length > 5 ? /* @__PURE__ */ jsx("div", { className: "flex items-center rounded-md bg-night-900 px-2 py-1.5", children: /* @__PURE__ */ jsxs("p", { className: "font-semibold text-night-500 text-xs", children: [
                    "+",
                    nftsOut.length - 5
                  ] }) }) : null
                ] }) : null : /* @__PURE__ */ jsx("p", { children: formattedTokenOutAmount }) })
              ] }),
              /* @__PURE__ */ jsx(
                SwapRoutePanel,
                {
                  className: "mt-4",
                  swapRoute,
                  isExactOut,
                  amountInMax: tokenIn.isNFT ? floorBigInt(amountIn) : amountInMax,
                  amountOutMin: tokenOut?.isNFT ? floorBigInt(amountOut) : amountOutMin
                }
              ),
              /* @__PURE__ */ jsxs("div", { className: "mt-4 grid grid-cols-3 gap-3", children: [
                /* @__PURE__ */ jsx(
                  Button,
                  {
                    size: "lg",
                    className: "col-span-full sm:col-span-2",
                    onClick: () => swap(),
                    children: "Confirm Swap"
                  }
                ),
                /* @__PURE__ */ jsx(DialogClose$1, { asChild: true, children: /* @__PURE__ */ jsx(
                  Button,
                  {
                    size: "lg",
                    variant: "secondary",
                    className: "col-span-full sm:col-span-1",
                    children: "Cancel"
                  }
                ) })
              ] })
            ] })
          ] })
        ] })
      ] }) }) }),
      !!tokenOut && isValidSwapRoute ? /* @__PURE__ */ jsx(
        SwapRoutePanel,
        {
          className: "mt-4",
          swapRoute,
          isExactOut,
          amountInMax,
          amountOutMin
        }
      ) : null
    ] })
  ] });
}
const SwapTokenInput = ({
  token,
  otherToken,
  isOut,
  balance = 0n,
  amount,
  selectedNfts,
  requiredNftSelectionAmount,
  onSelect,
  onUpdateAmount,
  onSelectNfts,
  className
}) => {
  const parsedAmount = Number(amount);
  const amountPriceUSD = (token?.priceUSD ?? 0) * (Number.isNaN(parsedAmount) || parsedAmount === 0 ? 1 : parsedAmount);
  const { tokenInNFTBalance } = useLoaderData();
  const [collapsed, setCollapsed] = useState(true);
  const [ref, bounds] = useMeasure();
  const { createTokenUrl } = useTrove();
  const [openSelectionModal, setOpenSelectionModal] = useState(false);
  const buttonText = amount === "0" ? "Select items" : `Select ${amount} ${Number(amount) === 1 ? "item" : "items"}`;
  return token ? /* @__PURE__ */ jsxs("div", { className: cn("overflow-hidden rounded-lg bg-night-1100", className), children: [
    /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between gap-3 p-4", children: [
      /* @__PURE__ */ jsxs(Dialog, { children: [
        /* @__PURE__ */ jsx(
          TokenSelectDialog,
          {
            disabledTokenIds: [token.id, otherToken?.id].filter((id) => !!id),
            isOut,
            onSelect
          }
        ),
        /* @__PURE__ */ jsx(DialogTrigger, { asChild: true, children: /* @__PURE__ */ jsxs("button", { type: "button", className: "flex items-center gap-4 text-left", children: [
          /* @__PURE__ */ jsx(PoolTokenImage, { className: "h-12 w-12", token }),
          /* @__PURE__ */ jsxs("div", { className: "flex-1", children: [
            /* @__PURE__ */ jsxs("span", { className: "flex items-center gap-1.5 font-medium text-honey-25 text-sm sm:text-lg", children: [
              token.symbol,
              " ",
              /* @__PURE__ */ jsx(ChevronDownIcon, { className: "h-3 w-3" })
            ] }),
            token.isNFT ? /* @__PURE__ */ jsx(Fragment, { children: token.name.toUpperCase() !== token.collections[0]?.name.toUpperCase() && /* @__PURE__ */ jsx("p", { className: "text-night-400 text-xs sm:text-sm", children: token.collections[0]?.name }) }) : /* @__PURE__ */ jsx(Fragment, { children: token.name.toUpperCase() !== token.symbol.toUpperCase() ? /* @__PURE__ */ jsx("span", { className: "block text-night-400 text-xs sm:text-sm", children: token.name }) : null })
          ] })
        ] }) })
      ] }),
      /* @__PURE__ */ jsx("div", { className: "space-y-1 text-right", children: token.isNFT ? selectedNfts.length > 0 ? /* @__PURE__ */ jsxs("div", { className: "flex items-center space-x-2", children: [
        selectedNfts.length > 5 ? /* @__PURE__ */ jsx("div", { className: "flex items-center rounded-md bg-night-900 px-2 py-1.5", children: /* @__PURE__ */ jsxs("p", { className: "font-semibold text-night-500 text-xs", children: [
          "+",
          selectedNfts.length - 5
        ] }) }) : null,
        /* @__PURE__ */ jsx(
          "div",
          {
            className: cn("flex", {
              "-space-x-5": token.type === "ERC721"
            }),
            children: selectedNfts.slice(0, Math.min(selectedNfts.length, 5)).map((nft) => {
              return /* @__PURE__ */ jsxs(
                "div",
                {
                  className: "flex flex-col items-center",
                  children: [
                    /* @__PURE__ */ jsx(
                      "img",
                      {
                        className: "h-12 w-12 rounded border-2 border-night-1100",
                        src: nft.image.uri,
                        alt: nft.metadata.name
                      }
                    ),
                    token.type === "ERC1155" ? /* @__PURE__ */ jsxs("p", { className: "text-night-600 text-xs", children: [
                      nft.quantity,
                      "x"
                    ] }) : null
                  ]
                },
                nft.tokenId
              );
            })
          }
        ),
        /* @__PURE__ */ jsxs(
          Button,
          {
            variant: "ghost",
            onClick: () => setCollapsed((col) => !col),
            children: [
              /* @__PURE__ */ jsx(
                ChevronDownIcon,
                {
                  className: cn(
                    "h-4 w-auto transition-transform will-change-transform",
                    !collapsed && "-rotate-180"
                  )
                }
              ),
              /* @__PURE__ */ jsx("span", { className: "sr-only", children: collapsed ? "See selected NFTs" : "Close" })
            ]
          }
        )
      ] }) : /* @__PURE__ */ jsx(ClientOnly, { children: () => /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(
          Dialog,
          {
            open: openSelectionModal,
            onOpenChange: setOpenSelectionModal,
            children: openSelectionModal ? /* @__PURE__ */ jsx(
              SelectionPopup,
              {
                type: isOut ? "vault" : "inventory",
                token,
                selectedTokens: selectedNfts,
                requiredAmount: requiredNftSelectionAmount,
                onSubmit: onSelectNfts,
                children: ({ amount: amount2 }) => requiredNftSelectionAmount ? void 0 : /* @__PURE__ */ jsx(
                  TotalDisplay,
                  {
                    amount: amount2,
                    isExactOut: isOut
                  }
                )
              }
            ) : null
          }
        ),
        /* @__PURE__ */ jsx(
          Button,
          {
            variant: "dark",
            size: "md",
            onClick: () => setOpenSelectionModal(true),
            children: buttonText
          }
        )
      ] }) }) : /* @__PURE__ */ jsx(ClientOnly, { children: () => /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(
          CurrencyInput,
          {
            value: amount,
            onChange: onUpdateAmount,
            disabled: !!otherToken?.isNFT
          }
        ),
        amountPriceUSD > 0 ? /* @__PURE__ */ jsx("span", { className: "block text-night-400 text-sm", children: formatUSD(amountPriceUSD) }) : null
      ] }) }) })
    ] }),
    /* @__PURE__ */ jsx(motion.div, { animate: { height: bounds.height }, children: /* @__PURE__ */ jsx("div", { ref, children: /* @__PURE__ */ jsx(AnimatePresence, { initial: false, mode: "popLayout", children: !collapsed ? /* @__PURE__ */ jsx(
      motion.div,
      {
        exit: {
          opacity: 0
        },
        children: /* @__PURE__ */ jsx(
          motion.div,
          {
            className: "grid max-h-64 grid-cols-4 gap-3 overflow-auto p-4",
            initial: { opacity: 0 },
            animate: {
              opacity: 1,
              transition: {
                delay: 0.2
              }
            },
            exit: {
              opacity: 0
            },
            transition: {
              duration: 0.15
            },
            children: selectedNfts.map((nft) => {
              return /* @__PURE__ */ jsxs(
                "div",
                {
                  className: "flex flex-col overflow-hidden rounded-lg bg-night-900",
                  children: [
                    /* @__PURE__ */ jsxs("div", { className: "relative", children: [
                      /* @__PURE__ */ jsx(
                        "img",
                        {
                          src: nft.image.uri,
                          alt: nft.tokenId,
                          className: "w-full"
                        }
                      ),
                      token.type === "ERC1155" ? /* @__PURE__ */ jsxs("span", { className: "absolute right-1.5 bottom-1.5 rounded-lg bg-night-700/80 px-2 py-0.5 font-bold text-night-100 text-xs", children: [
                        nft.quantity,
                        "x"
                      ] }) : null
                    ] }),
                    /* @__PURE__ */ jsxs("div", { className: "flex items-start justify-between gap-2 p-2.5", children: [
                      /* @__PURE__ */ jsxs("div", { className: "min-w-0 text-left", children: [
                        /* @__PURE__ */ jsx("p", { className: "truncate font-medium text-honey-25 text-xs", children: nft.metadata.name }),
                        /* @__PURE__ */ jsxs("p", { className: "truncate text-[0.6rem] text-night-400", children: [
                          "#",
                          nft.tokenId
                        ] })
                      ] }),
                      /* @__PURE__ */ jsxs(
                        "a",
                        {
                          target: "_blank",
                          rel: "noopener noreferrer",
                          title: `View ${nft.metadata.name} in the marketplace`,
                          className: "text-night-400 transition-colors hover:text-night-100",
                          href: createTokenUrl(
                            nft.collectionUrlSlug,
                            nft.tokenId
                          ),
                          children: [
                            /* @__PURE__ */ jsx(
                              ExternalLink,
                              {
                                className: "h-3.5 w-auto",
                                "aria-hidden": "true"
                              }
                            ),
                            /* @__PURE__ */ jsxs("span", { className: "sr-only", children: [
                              "View ",
                              nft.metadata.name,
                              " in the marketplace"
                            ] })
                          ]
                        }
                      )
                    ] })
                  ]
                },
                nft.tokenId
              );
            })
          }
        )
      },
      "collapsed"
    ) : null }) }) }),
    /* @__PURE__ */ jsx("div", { className: "bg-night-1000 px-4 py-2.5 text-sm", children: /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between gap-4", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-1", children: [
        /* @__PURE__ */ jsxs("span", { className: "text-night-400 sm:text-sm", children: [
          token.isNFT && isOut ? "Vault" : token.isNFT ? "Inventory" : "Balance",
          ":"
        ] }),
        token.isNFT ? /* @__PURE__ */ jsx(Fragment, { children: isOut ? formatAmount(BigInt(token.reserve), {
          decimals: token.decimals
        }) : /* @__PURE__ */ jsx(
          Suspense$1,
          {
            fallback: /* @__PURE__ */ jsx(LoaderIcon, { className: "inline-block h-3.5 w-3.5" }),
            children: /* @__PURE__ */ jsx(Await, { resolve: tokenInNFTBalance, children: (balance2) => formatNumber(balance2 ?? 0) })
          }
        ) }) : /* @__PURE__ */ jsx(VisibleOnClient, { children: /* @__PURE__ */ jsx("span", { className: "font-semibold text-honey-25 sm:text-sm", children: formatAmount(balance, { decimals: token.decimals }) }) })
      ] }),
      !token?.isNFT && otherToken?.isNFT ? /* @__PURE__ */ jsx(InfoPopover, { children: "Input is disabled because the amount will be auto-calculated based on the selected NFTs." }) : null,
      !token?.isNFT && !otherToken?.isNFT && !isOut ? /* @__PURE__ */ jsx(
        Button,
        {
          size: "xs",
          variant: "secondary",
          onClick: () => onUpdateAmount(formatUnits(balance, token.decimals)),
          children: "Max"
        }
      ) : null,
      selectedNfts.length > 0 ? /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(
          Dialog,
          {
            open: openSelectionModal,
            onOpenChange: setOpenSelectionModal,
            children: openSelectionModal ? /* @__PURE__ */ jsx(
              SelectionPopup,
              {
                type: isOut ? "vault" : "inventory",
                token,
                selectedTokens: selectedNfts,
                requiredAmount: requiredNftSelectionAmount,
                onSubmit: onSelectNfts,
                children: ({ amount: amount2 }) => requiredNftSelectionAmount ? void 0 : /* @__PURE__ */ jsx(TotalDisplay, { amount: amount2, isExactOut: isOut })
              }
            ) : null
          }
        ),
        /* @__PURE__ */ jsx(
          Button,
          {
            variant: "ghost",
            onClick: () => setOpenSelectionModal(true),
            children: "Edit Selection"
          }
        )
      ] }) : null
    ] }) })
  ] }) : /* @__PURE__ */ jsxs(Dialog, { children: [
    /* @__PURE__ */ jsx(
      TokenSelectDialog,
      {
        disabledTokenIds: [otherToken?.id].filter((id) => !!id),
        isOut,
        onSelect
      }
    ),
    /* @__PURE__ */ jsx(DialogTrigger, { asChild: true, children: /* @__PURE__ */ jsxs(
      "button",
      {
        type: "button",
        className: cn(
          "group flex w-full items-center gap-4 rounded-lg bg-night-1100 px-4 py-5 font-medium text-night-400 text-xl transition-colors hover:text-honey-25",
          className
        ),
        children: [
          /* @__PURE__ */ jsx("div", { className: "flex h-12 w-12 items-center justify-center rounded-full bg-night-800 text-night-600 transition-colors group-hover:text-honey-50", children: /* @__PURE__ */ jsx(LayersIcon, { className: "h-6 w-6" }) }),
          "Select Asset"
        ]
      }
    ) })
  ] });
};
const TotalDisplay = ({
  amount,
  isExactOut
}) => {
  const loaderData = useLoaderData();
  const { amountIn, amountOut, tokenIn, tokenOut } = useSwapRoute({
    ...loaderData,
    amount,
    isExactOut
  });
  if (!tokenOut || amountIn === 0n && amountOut === 0n) {
    return null;
  }
  return /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2 rounded-lg bg-night-800 p-4", children: [
    /* @__PURE__ */ jsx("span", { className: "text-night-400 text-sm", children: "Cost:" }),
    /* @__PURE__ */ jsxs("span", { className: "flex items-center gap-1", children: [
      /* @__PURE__ */ jsx(
        PoolTokenImage,
        {
          token: isExactOut ? tokenIn : tokenOut,
          className: "h-4 w-4 flex-shrink-0"
        }
      ),
      /* @__PURE__ */ jsx("span", { className: "truncate font-medium text-honey-25 text-sm", children: isExactOut ? formatAmount(amountIn, {
        decimals: tokenIn.decimals
      }) : formatAmount(amountOut, {
        decimals: tokenOut?.decimals
      }) })
    ] })
  ] });
};
const TokenSelectDialog = ({
  disabledTokenIds = [],
  isOut,
  onSelect
}) => {
  const [tab, setTab] = useState("all");
  const [search, setSearch] = useState("");
  const [game, setGame] = useState("");
  const chainId = useChainId();
  const { tokens } = useLoaderData();
  const gameTokenIdsMap = game ? getTokenIdsMapForGame(game, chainId) : {};
  const gameCollectionIdsMap = game ? getCollectionIdsMapForGame(game, chainId) : {};
  return /* @__PURE__ */ jsxs(DialogContent, { children: [
    /* @__PURE__ */ jsxs(DialogHeader, { children: [
      /* @__PURE__ */ jsxs(DialogTitle, { children: [
        "Select an asset to ",
        isOut ? "buy" : "sell"
      ] }),
      /* @__PURE__ */ jsx(DialogDescription, { children: "Choose from the list of tokens and NFTs below." })
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "space-y-4 rounded-lg bg-night-1100 p-3 sm:p-4", children: [
      /* @__PURE__ */ jsxs("div", { className: "space-y-2", children: [
        /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-3 gap-2 sm:gap-3", children: [
          /* @__PURE__ */ jsxs(
            "button",
            {
              type: "button",
              className: cn(
                "flex items-center gap-1.5 rounded-lg border border-border bg-transparent px-2 py-2 font-medium text-night-500 text-sm transition-colors hover:text-honey-25 sm:gap-2.5 sm:px-3",
                tab === "all" && "border-night-800 bg-night-800 text-honey-25"
              ),
              onClick: () => setTab("all"),
              children: [
                /* @__PURE__ */ jsx(GlobeIcon, { className: "h-4 w-4 shrink-0" }),
                "All"
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            "button",
            {
              type: "button",
              className: cn(
                "flex items-center gap-1.5 rounded-lg border border-border bg-transparent px-2 py-2 font-medium text-night-500 text-sm transition-colors hover:text-honey-25 sm:gap-2.5 sm:px-3",
                tab === "tokens" && "border-night-800 bg-night-800 text-honey-25"
              ),
              onClick: () => setTab("tokens"),
              children: [
                /* @__PURE__ */ jsx(TokenIcon, { className: "h-4 w-4 shrink-0" }),
                "Tokens"
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            "button",
            {
              type: "button",
              className: cn(
                "flex items-center gap-1.5 rounded-lg border border-border bg-transparent px-2 py-2 font-medium text-night-500 text-sm transition-colors hover:text-honey-25 sm:gap-2.5 sm:px-3",
                tab === "collections" && "border-night-800 bg-night-800 text-honey-25"
              ),
              onClick: () => setTab("collections"),
              children: [
                /* @__PURE__ */ jsx(LayersIcon, { className: "h-4 w-4 shrink-0" }),
                "Collections"
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "flex flex-wrap items-center gap-2", children: [
          /* @__PURE__ */ jsxs("div", { className: "flex items-center rounded-md border border-night-800 pl-2", children: [
            /* @__PURE__ */ jsx(SearchIcon, { className: "h-5 w-5 text-night-400" }),
            /* @__PURE__ */ jsx(
              Input,
              {
                type: "search",
                placeholder: "Search",
                className: "h-auto w-auto max-w-[128px] border-none px-2 py-1.5 ring-offset-transparent focus-visible:ring-0 focus-visible:ring-transparent",
                value: search,
                onChange: (e) => setSearch(e.target.value)
              }
            )
          ] }),
          Object.entries(GAME_METADATA).map(
            ([id, { name, image, tokens: tokens2, collections }]) => chainId in tokens2 || chainId in collections ? /* @__PURE__ */ jsxs(
              "button",
              {
                type: "button",
                className: cn(
                  "flex items-center gap-1 rounded-full border border-night-800 px-2.5 py-1.5 text-xs transition-colors hover:bg-night-800 active:bg-night-900",
                  game === id && "bg-night-900"
                ),
                onClick: () => game === id ? setGame("") : setGame(id),
                children: [
                  /* @__PURE__ */ jsx("img", { src: image, alt: "", className: "h-4 w-4 rounded" }),
                  name
                ]
              },
              id
            ) : null
          )
        ] })
      ] }),
      /* @__PURE__ */ jsx(
        Suspense$1,
        {
          fallback: /* @__PURE__ */ jsx("div", { className: "flex h-80 items-center justify-center", children: /* @__PURE__ */ jsx(LoaderIcon, { className: "h-6 w-6" }) }),
          children: /* @__PURE__ */ jsx(Await, { resolve: tokens, children: (tokens2) => /* @__PURE__ */ jsx("ul", { className: "h-80 overflow-auto border-night-900 border-t pt-4", children: tokens2.filter(
            ({ id, symbol, name, collections, isNFT }) => (
              // Filter by search query
              (!search || symbol.toLowerCase().includes(search.toLowerCase()) || name.toLowerCase().includes(search.toLowerCase()) || collections.some(
                (collection) => collection.name.toLowerCase().includes(search.toLowerCase())
              )) && // Filter by selected game
              (!game || !!gameTokenIdsMap[id] || collections.some(
                (collection) => gameCollectionIdsMap[collection.id.toLowerCase()]
              )) && // Filter by selected tab
              (tab === "all" || (tab === "collections" ? isNFT : !isNFT))
            )
          ).map((token) => /* @__PURE__ */ jsx(
            Token,
            {
              disabled: disabledTokenIds.includes(token.id),
              onSelect,
              token
            },
            token.id
          )) }) })
        }
      )
    ] })
  ] });
};
const Token = ({
  token,
  disabled,
  onSelect
}) => {
  const { address } = useAccount();
  const { data: balance, isLoading } = usePoolTokenBalance({ token, address });
  return /* @__PURE__ */ jsxs(
    "li",
    {
      className: cn(
        "relative rounded-lg px-3 py-2 hover:bg-night-900",
        disabled && "pointer-events-none opacity-50"
      ),
      children: [
        /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-3", children: [
            /* @__PURE__ */ jsx(PoolTokenImage, { token, className: "h-9 w-9" }),
            /* @__PURE__ */ jsxs("div", { className: "text-left text-sm", children: [
              /* @__PURE__ */ jsx("span", { className: "block font-semibold text-honey-25", children: token.symbol }),
              token.name.toUpperCase() !== token.symbol.toUpperCase() ? /* @__PURE__ */ jsx("span", { className: "block text-night-600", children: token.name }) : token.name.toUpperCase() !== token.collections[0]?.name.toUpperCase() ? /* @__PURE__ */ jsx("p", { className: "text-night-400 text-xs sm:text-sm", children: token.collections[0]?.name }) : null
            ] })
          ] }),
          isLoading ? /* @__PURE__ */ jsx(LoaderIcon, { className: "h-4 w-4" }) : address ? /* @__PURE__ */ jsx("p", { className: "text-base-400 text-sm", children: formatAmount(balance, { decimals: token.decimals }) }) : null
        ] }),
        /* @__PURE__ */ jsx(
          "button",
          {
            type: "button",
            className: "absolute inset-0 h-full w-full",
            onClick: () => onSelect(token)
          }
        )
      ]
    }
  );
};

const route15 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: SwapPage,
  loader,
  meta: meta$1
}, Symbol.toStringTag, { value: 'Module' }));

const meta = ({ matches, location }) => {
  const requestInfo = matches.find((match) => match.id === "root")?.data.requestInfo;
  return getSocialMetas({
    url: generateUrl(requestInfo?.origin, location.pathname),
    title: generateTitle("Page Not Found"),
    image: generateUrl(requestInfo?.origin, "/img/seo-banner.png")
  });
};
function Page404() {
  return /* @__PURE__ */ jsx("div", { className: "h-auto bg-[url(/img/home/hero.png)] bg-bottom bg-cover py-24 md:h-[548px] md:py-0", children: /* @__PURE__ */ jsxs("div", { className: "mx-auto flex h-full w-full max-w-[90%] flex-col items-center justify-center space-y-8 text-center md:max-w-lg", children: [
    /* @__PURE__ */ jsxs("div", { className: "space-y-3", children: [
      /* @__PURE__ */ jsx("h1", { className: "text-center font-bold text-4xl text-honey-25", children: "Page Not Found" }),
      /* @__PURE__ */ jsx("p", { className: "text-center text-night-300", children: "The path you have entered no longer exists or has never existed, perhaps you've made a mistake." })
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-center gap-3", children: [
      /* @__PURE__ */ jsx(Link, { to: "/swap", prefetch: "render", children: /* @__PURE__ */ jsx(Button, { className: "w-full", size: "lg", children: "Start Trading" }) }),
      /* @__PURE__ */ jsx(Link, { to: "/pools", prefetch: "render", children: /* @__PURE__ */ jsx(Button, { className: "w-full", variant: "secondary", size: "lg", children: "Add Liquidity" }) })
    ] })
  ] }) });
}

const route16 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: Page404,
  meta
}, Symbol.toStringTag, { value: 'Module' }));

const serverManifest = {'entry':{'module':'/assets/entry.client-CoUCddNl.js','imports':['/assets/components-BLd368Cb.js'],'css':[]},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/root-DSZ9K-k6.js','imports':['/assets/components-BLd368Cb.js','/assets/root-B0ve7n9Q.js','/assets/Toast-Eg8_vlqZ.js','/assets/useConfig-DF3L7iUI.js','/assets/createLucideIcon-BFoDtFI7.js','/assets/utils-BpA9bqt-.js','/assets/index-Bt8Q4yak.js','/assets/consts-DRy7E-CO.js','/assets/arbitrumSepolia-BhgihaGe.js','/assets/defineChain-B0Tnjtyc.js','/assets/custom-BqWD8wPQ.js','/assets/formatUnits-CQZyr6Jb.js','/assets/Button-C8z9n4iz.js','/assets/chevron-right-fVo87A_c.js'],'css':['/assets/root-DXR48b36.css']},'routes/resources.pools.$id.transactions':{'id':'routes/resources.pools.$id.transactions','parentId':'root','path':'resources/pools/:id/transactions','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/resources.pools._id.transactions-l0sNRNKZ.js','imports':[],'css':[]},'routes/swap.$tokenIn.$tokenOut[.]png':{'id':'routes/swap.$tokenIn.$tokenOut[.]png','parentId':'routes/swap','path':':tokenIn/:tokenOut.png','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/swap._tokenIn._tokenOut_._png-l0sNRNKZ.js','imports':[],'css':[]},'routes/resources.vaults.$id.balance':{'id':'routes/resources.vaults.$id.balance','parentId':'root','path':'resources/vaults/:id/balance','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/resources.vaults._id.balance-l0sNRNKZ.js','imports':[],'css':[]},'routes/resources.vaults.$id.items':{'id':'routes/resources.vaults.$id.items','parentId':'root','path':'resources/vaults/:id/items','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/resources.vaults._id.items-l0sNRNKZ.js','imports':[],'css':[]},'routes/pools.my-positions':{'id':'routes/pools.my-positions','parentId':'routes/pools','path':'my-positions','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/pools.my-positions-CLjzXKNg.js','imports':['/assets/components-BLd368Cb.js','/assets/Skeleton-C9hrrATo.js','/assets/PoolImage-S9OdFhyI.js','/assets/number-D-wl6pPl.js','/assets/utils-BpA9bqt-.js','/assets/formatUnits-CQZyr6Jb.js'],'css':[]},'routes/resources.session':{'id':'routes/resources.session','parentId':'root','path':'resources/session','index':undefined,'caseSensitive':undefined,'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/resources.session-l0sNRNKZ.js','imports':[],'css':[]},'routes/pools_.$id[.]png':{'id':'routes/pools_.$id[.]png','parentId':'root','path':'pools/:id.png','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/pools_._id_._png-l0sNRNKZ.js','imports':[],'css':[]},'routes/resources.domain':{'id':'routes/resources.domain','parentId':'root','path':'resources/domain','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/resources.domain-CcPYVMiU.js','imports':[],'css':[]},'routes/pools._index':{'id':'routes/pools._index','parentId':'routes/pools','path':undefined,'index':true,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/pools._index-DXWES2mJ.js','imports':['/assets/components-BLd368Cb.js','/assets/Skeleton-C9hrrATo.js','/assets/PoolImage-S9OdFhyI.js','/assets/pools-DkhcCFeG.js','/assets/number-D-wl6pPl.js','/assets/utils-BpA9bqt-.js','/assets/custom-BqWD8wPQ.js','/assets/formatUnits-CQZyr6Jb.js','/assets/defineChain-B0Tnjtyc.js'],'css':[]},'routes/resources.og':{'id':'routes/resources.og','parentId':'root','path':'resources/og','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/resources.og-l0sNRNKZ.js','imports':[],'css':[]},'routes/healthcheck':{'id':'routes/healthcheck','parentId':'root','path':'healthcheck','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/healthcheck-l0sNRNKZ.js','imports':[],'css':[]},'routes/pools_.$id':{'id':'routes/pools_.$id','parentId':'root','path':'pools/:id','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/pools_._id-ijMR7Rig.js','imports':['/assets/components-BLd368Cb.js','/assets/Toast-Eg8_vlqZ.js','/assets/index-Bt8Q4yak.js','/assets/InfoPopover-PaSJtHpa.js','/assets/utils-BpA9bqt-.js','/assets/number-D-wl6pPl.js','/assets/pools-DkhcCFeG.js','/assets/Button-C8z9n4iz.js','/assets/PoolImage-S9OdFhyI.js','/assets/formatUnits-CQZyr6Jb.js','/assets/custom-BqWD8wPQ.js','/assets/arbitrumSepolia-BhgihaGe.js','/assets/seo-CliX0uaq.js','/assets/createLucideIcon-BFoDtFI7.js','/assets/chevron-right-fVo87A_c.js','/assets/useConfig-DF3L7iUI.js','/assets/Input-BOHZjH54.js','/assets/proxy-DLbAMy7k.js','/assets/defineChain-B0Tnjtyc.js'],'css':[]},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/_index-BGsMVka9.js','imports':['/assets/components-BLd368Cb.js','/assets/Button-C8z9n4iz.js','/assets/consts-DRy7E-CO.js','/assets/seo-CliX0uaq.js','/assets/proxy-DLbAMy7k.js','/assets/chevron-right-fVo87A_c.js','/assets/utils-BpA9bqt-.js','/assets/createLucideIcon-BFoDtFI7.js','/assets/arbitrumSepolia-BhgihaGe.js','/assets/defineChain-B0Tnjtyc.js'],'css':[]},'routes/pools':{'id':'routes/pools','parentId':'root','path':'pools','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/pools-B95EF3Xy.js','imports':['/assets/components-BLd368Cb.js','/assets/Input-BOHZjH54.js','/assets/consts-DRy7E-CO.js','/assets/seo-CliX0uaq.js','/assets/utils-BpA9bqt-.js','/assets/search-Bda9Knbm.js','/assets/useConfig-DF3L7iUI.js','/assets/arbitrumSepolia-BhgihaGe.js','/assets/defineChain-B0Tnjtyc.js','/assets/createLucideIcon-BFoDtFI7.js'],'css':[]},'routes/swap':{'id':'routes/swap','parentId':'root','path':'swap','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/swap-CiI4b9IX.js','imports':['/assets/components-BLd368Cb.js','/assets/InfoPopover-PaSJtHpa.js','/assets/Toast-Eg8_vlqZ.js','/assets/number-D-wl6pPl.js','/assets/utils-BpA9bqt-.js','/assets/Button-C8z9n4iz.js','/assets/Input-BOHZjH54.js','/assets/consts-DRy7E-CO.js','/assets/pools-DkhcCFeG.js','/assets/seo-CliX0uaq.js','/assets/createLucideIcon-BFoDtFI7.js','/assets/proxy-DLbAMy7k.js','/assets/formatUnits-CQZyr6Jb.js','/assets/search-Bda9Knbm.js','/assets/arbitrumSepolia-BhgihaGe.js','/assets/defineChain-B0Tnjtyc.js','/assets/useConfig-DF3L7iUI.js','/assets/custom-BqWD8wPQ.js'],'css':[]},'routes/404':{'id':'routes/404','parentId':'root','path':'404','index':undefined,'caseSensitive':undefined,'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false,'module':'/assets/404-DTrz0Eq8.js','imports':['/assets/components-BLd368Cb.js','/assets/Button-C8z9n4iz.js','/assets/seo-CliX0uaq.js','/assets/utils-BpA9bqt-.js','/assets/createLucideIcon-BFoDtFI7.js'],'css':[]}},'url':'/assets/manifest-46151558.js','version':'46151558'};

/**
       * `mode` is only relevant for the old Remix compiler but
       * is included here to satisfy the `ServerBuild` typings.
       */
      const mode = "production";
      const assetsBuildDirectory = "build/client";
      const basename = "/";
      const future = {"v3_fetcherPersist":false,"v3_relativeSplatPath":false,"v3_throwAbortReason":false,"v3_singleFetch":false,"v3_lazyRouteDiscovery":false,"unstable_optimizeDeps":false};
      const isSpaMode = false;
      const publicPath = "/";
      const entry = { module: entryServer };
      const routes = {
        "root": {
          id: "root",
          parentId: undefined,
          path: "",
          index: undefined,
          caseSensitive: undefined,
          module: route0
        },
  "routes/resources.pools.$id.transactions": {
          id: "routes/resources.pools.$id.transactions",
          parentId: "root",
          path: "resources/pools/:id/transactions",
          index: undefined,
          caseSensitive: undefined,
          module: route1
        },
  "routes/swap.$tokenIn.$tokenOut[.]png": {
          id: "routes/swap.$tokenIn.$tokenOut[.]png",
          parentId: "routes/swap",
          path: ":tokenIn/:tokenOut.png",
          index: undefined,
          caseSensitive: undefined,
          module: route2
        },
  "routes/resources.vaults.$id.balance": {
          id: "routes/resources.vaults.$id.balance",
          parentId: "root",
          path: "resources/vaults/:id/balance",
          index: undefined,
          caseSensitive: undefined,
          module: route3
        },
  "routes/resources.vaults.$id.items": {
          id: "routes/resources.vaults.$id.items",
          parentId: "root",
          path: "resources/vaults/:id/items",
          index: undefined,
          caseSensitive: undefined,
          module: route4
        },
  "routes/pools.my-positions": {
          id: "routes/pools.my-positions",
          parentId: "routes/pools",
          path: "my-positions",
          index: undefined,
          caseSensitive: undefined,
          module: route5
        },
  "routes/resources.session": {
          id: "routes/resources.session",
          parentId: "root",
          path: "resources/session",
          index: undefined,
          caseSensitive: undefined,
          module: route6
        },
  "routes/pools_.$id[.]png": {
          id: "routes/pools_.$id[.]png",
          parentId: "root",
          path: "pools/:id.png",
          index: undefined,
          caseSensitive: undefined,
          module: route7
        },
  "routes/resources.domain": {
          id: "routes/resources.domain",
          parentId: "root",
          path: "resources/domain",
          index: undefined,
          caseSensitive: undefined,
          module: route8
        },
  "routes/pools._index": {
          id: "routes/pools._index",
          parentId: "routes/pools",
          path: undefined,
          index: true,
          caseSensitive: undefined,
          module: route9
        },
  "routes/resources.og": {
          id: "routes/resources.og",
          parentId: "root",
          path: "resources/og",
          index: undefined,
          caseSensitive: undefined,
          module: route10
        },
  "routes/healthcheck": {
          id: "routes/healthcheck",
          parentId: "root",
          path: "healthcheck",
          index: undefined,
          caseSensitive: undefined,
          module: route11
        },
  "routes/pools_.$id": {
          id: "routes/pools_.$id",
          parentId: "root",
          path: "pools/:id",
          index: undefined,
          caseSensitive: undefined,
          module: route12
        },
  "routes/_index": {
          id: "routes/_index",
          parentId: "root",
          path: undefined,
          index: true,
          caseSensitive: undefined,
          module: route13
        },
  "routes/pools": {
          id: "routes/pools",
          parentId: "root",
          path: "pools",
          index: undefined,
          caseSensitive: undefined,
          module: route14
        },
  "routes/swap": {
          id: "routes/swap",
          parentId: "root",
          path: "swap",
          index: undefined,
          caseSensitive: undefined,
          module: route15
        },
  "routes/404": {
          id: "routes/404",
          parentId: "root",
          path: "404",
          index: undefined,
          caseSensitive: undefined,
          module: route16
        }
      };

export { serverManifest as assets, assetsBuildDirectory, basename, entry, future, isSpaMode, mode, publicPath, routes };
