import type { Address, Hash, Hex, Log } from "viem"
import type { Attempt, Transaction } from "./Transaction"
import type { TransactionManager } from "./TransactionManager"

export interface RevertedTransactionReceipt<T extends "success" | "reverted"> {
    /** The actual value per gas deducted from the sender's account for blob gas. Only specified for blob transactions as defined by EIP-4844. */
    blobGasPrice?: bigint | undefined
    /** The amount of blob gas used. Only specified for blob transactions as defined by EIP-4844. */
    blobGasUsed?: bigint | undefined
    /** Hash of block containing this transaction */
    blockHash: Hash
    /** Number of block containing this transaction */
    blockNumber: bigint
    /** Address of new contract or `null` if no contract was created */
    contractAddress: Address | null | undefined
    /** Gas used by this and all preceding transactions in this block */
    cumulativeGasUsed: bigint
    /** Pre-London, it is equal to the transaction's gasPrice. Post-London, it is equal to the actual gas price paid for inclusion. */
    effectiveGasPrice: bigint
    /** Transaction sender */
    from: Address
    /** Gas used by this transaction */
    gasUsed: bigint
    /** List of log objects generated by this transaction */
    logs: Log<bigint, number, false>[]
    /** Logs bloom filter */
    logsBloom: Hex
    /** The post-transaction state root. Only specified for transactions included before the Byzantium upgrade. */
    root?: Hash | undefined
    /** `success` if this transaction was successful or `reverted` if it failed */
    status: T
    /** Transaction recipient or `null` if deploying a contract */
    to: Address | null
    /** Hash of this transaction */
    transactionHash: Hash
    /** Index of this transaction in the block */
    transactionIndex: number
    /** Transaction type */
    type: "eip1559"
}

export interface IRetryPolicyManager {
    shouldRetry(
        transactionManager: TransactionManager,
        transaction: Transaction,
        attempt: Attempt,
        receipt: RevertedTransactionReceipt<"reverted">,
    ): Promise<boolean>
}

export class RetryPolicyManager implements IRetryPolicyManager {
    public async shouldRetry(
        transactionManager: TransactionManager,
        _: Transaction,
        attempt: Attempt,
        receipt: RevertedTransactionReceipt<"reverted">,
    ): Promise<boolean> {
        return this.isOutOfGas(transactionManager, attempt, receipt)
    }

    /**
     * Get the revert reason from the transaction trace
     * @param transactionManager - The transaction manager
     * @param attempt - The attempt
     * @returns The revert reason or undefined if it cannot be retrieved or the rpc does not allow debug
     */
    protected async getRevertReason(
        transactionManager: TransactionManager,
        attempt: Attempt,
    ): Promise<string | undefined> {
        const traceResult = transactionManager.rpcAllowDebug
            ? await transactionManager.viemClient.safeDebugTransaction(attempt.hash, {
                  tracer: "callTracer",
              })
            : undefined

        if (!traceResult || traceResult.isErr()) {
            return undefined
        }

        return traceResult.value.revertReason
    }

    protected async isOutOfGas(
        transactionManager: TransactionManager,
        attempt: Attempt,
        receipt: RevertedTransactionReceipt<"reverted">,
    ): Promise<boolean> {
        const revertReason = await this.getRevertReason(transactionManager, attempt)

        if (!revertReason) {
            return receipt.gasUsed === attempt.gas
        }

        return revertReason === "Out of Gas"
    }
}
