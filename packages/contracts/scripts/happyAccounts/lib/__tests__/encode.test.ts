import type { Hex } from "viem"
import { describe, expect, test } from "vitest"

import type { HappyTx } from "../../types/happyTx"
import { encode } from "../../lib/happyTxLib"

// Test cases for encoding
describe("encode", () => {
    test("should correctly encode tx with empty dynamic data", () => {
        const tx: HappyTx = {
            account: "0x1234567890123456789012345678901234567890",
            gasLimit: 1000000n,
            executeGasLimit: 800000n,
            dest: "0x2345678901234567890123456789012345678901",
            paymaster: "0x3456789012345678901234567890123456789012",
            value: 1000000000000000000n, // 1 ETH (10^19 in wei)
            nonce: 1n,
            maxFeePerGas: 2000000000n, // (2 * 10^9) wei
            submitterFee: 100000000n,  // (10^8) wei
            callData: "0x1234",
            paymasterData: "0x",
            validatorData: "0x",
            extraData: "0x",
        }

        const expected: Hex = "0x123456789012345678901234567890123456789023456789012345678901234534567890123456789012345678901234567890126789012345678901000f42400000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000005f5e10000000000000000020000000002000000000000000000000000000000000c35001234"
        const encoded = encode(tx)
        expect(encoded).toBe(expected)
    })

    test("should correctly encode tx with only extraData empty", () => {
        const tx: HappyTx = {
            account: "0x1234567890123456789012345678901234567890",
            gasLimit: 1000000n,
            executeGasLimit: 800000n,
            dest: "0x2345678901234567890123456789012345678901",
            paymaster: "0x3456789012345678901234567890123456789012",
            value: 1000000000000000000n,
            nonce: 1n,
            maxFeePerGas: 2000000000n,
            submitterFee: 100000000n,
            callData: "0x1234",
            paymasterData: "0x5678",
            validatorData: "0x9abc",
            extraData: "0x",
        }

        const expected: Hex = "0x123456789012345678901234567890123456789023456789012345678901234534567890123456789012345678901234567890126789012345678901000f42400000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000005f5e10000000000000000060000000002000000000200000000020000000000000c3500123456789abc"
        const encoded = encode(tx)
        expect(encoded).toBe(expected)
    })

    test("should correctly encode tx with all fields", () => {
        const tx: HappyTx = {
            account: "0x1234567890123456789012345678901234567890",
            gasLimit: 1000000n,
            executeGasLimit: 800000n,
            dest: "0x2345678901234567890123456789012345678901",
            paymaster: "0x3456789012345678901234567890123456789012",
            value: 1000000000000000000n,
            nonce: 1n,
            maxFeePerGas: 2000000000n,
            submitterFee: 100000000n,
            callData: "0x1234",
            paymasterData: "0x5678",
            validatorData: "0x9abc",
            extraData: "0xdef0",
        }

        const expected: Hex = "0x123456789012345678901234567890123456789023456789012345678901234534567890123456789012345678901234567890126789012345678901000f42400000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000005f5e10000000000000000080000000002000000000200000000020000000002000c3500123456789abcdef0"
        const encoded = encode(tx)
        expect(encoded).toBe(expected)
    })
})